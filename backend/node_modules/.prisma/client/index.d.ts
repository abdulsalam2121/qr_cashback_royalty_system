
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Tenant
 * 
 */
export type Tenant = $Result.DefaultSelection<Prisma.$TenantPayload>
/**
 * Model Store
 * 
 */
export type Store = $Result.DefaultSelection<Prisma.$StorePayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Customer
 * 
 */
export type Customer = $Result.DefaultSelection<Prisma.$CustomerPayload>
/**
 * Model Card
 * 
 */
export type Card = $Result.DefaultSelection<Prisma.$CardPayload>
/**
 * Model Transaction
 * 
 */
export type Transaction = $Result.DefaultSelection<Prisma.$TransactionPayload>
/**
 * Model TierRule
 * 
 */
export type TierRule = $Result.DefaultSelection<Prisma.$TierRulePayload>
/**
 * Model CashbackRule
 * 
 */
export type CashbackRule = $Result.DefaultSelection<Prisma.$CashbackRulePayload>
/**
 * Model Offer
 * 
 */
export type Offer = $Result.DefaultSelection<Prisma.$OfferPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model CardOrder
 * 
 */
export type CardOrder = $Result.DefaultSelection<Prisma.$CardOrderPayload>
/**
 * Model Plan
 * 
 */
export type Plan = $Result.DefaultSelection<Prisma.$PlanPayload>
/**
 * Model CardLimitTransaction
 * 
 */
export type CardLimitTransaction = $Result.DefaultSelection<Prisma.$CardLimitTransactionPayload>
/**
 * Model Payment
 * 
 */
export type Payment = $Result.DefaultSelection<Prisma.$PaymentPayload>
/**
 * Model SubscriptionEvent
 * 
 */
export type SubscriptionEvent = $Result.DefaultSelection<Prisma.$SubscriptionEventPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const SubscriptionStatus: {
  NONE: 'NONE',
  TRIALING: 'TRIALING',
  ACTIVE: 'ACTIVE',
  PAST_DUE: 'PAST_DUE',
  CANCELED: 'CANCELED'
};

export type SubscriptionStatus = (typeof SubscriptionStatus)[keyof typeof SubscriptionStatus]


export const Role: {
  platform_admin: 'platform_admin',
  tenant_admin: 'tenant_admin',
  cashier: 'cashier',
  customer: 'customer'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Tier: {
  SILVER: 'SILVER',
  GOLD: 'GOLD',
  PLATINUM: 'PLATINUM'
};

export type Tier = (typeof Tier)[keyof typeof Tier]


export const CardStatus: {
  UNASSIGNED: 'UNASSIGNED',
  ACTIVE: 'ACTIVE',
  BLOCKED: 'BLOCKED'
};

export type CardStatus = (typeof CardStatus)[keyof typeof CardStatus]


export const TxType: {
  EARN: 'EARN',
  REDEEM: 'REDEEM',
  ADJUST: 'ADJUST'
};

export type TxType = (typeof TxType)[keyof typeof TxType]


export const TxCategory: {
  PURCHASE: 'PURCHASE',
  REPAIR: 'REPAIR',
  OTHER: 'OTHER'
};

export type TxCategory = (typeof TxCategory)[keyof typeof TxCategory]


export const NotifChannel: {
  SMS: 'SMS',
  WHATSAPP: 'WHATSAPP'
};

export type NotifChannel = (typeof NotifChannel)[keyof typeof NotifChannel]


export const NotifStatus: {
  PENDING: 'PENDING',
  SENT: 'SENT',
  FAILED: 'FAILED'
};

export type NotifStatus = (typeof NotifStatus)[keyof typeof NotifStatus]


export const CardType: {
  SINGLE_SIDED: 'SINGLE_SIDED',
  DOUBLE_SIDED_CUSTOM: 'DOUBLE_SIDED_CUSTOM'
};

export type CardType = (typeof CardType)[keyof typeof CardType]


export const OrderStatus: {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  SHIPPED: 'SHIPPED',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED',
  PENDING_PAYMENT: 'PENDING_PAYMENT',
  PENDING_APPROVAL: 'PENDING_APPROVAL',
  APPROVED: 'APPROVED'
};

export type OrderStatus = (typeof OrderStatus)[keyof typeof OrderStatus]


export const OrderSourceType: {
  TRIAL: 'TRIAL',
  SUBSCRIPTION: 'SUBSCRIPTION',
  ADDITIONAL: 'ADDITIONAL'
};

export type OrderSourceType = (typeof OrderSourceType)[keyof typeof OrderSourceType]


export const BillingPeriod: {
  MONTHLY: 'MONTHLY',
  THREE_MONTHS: 'THREE_MONTHS',
  SIX_MONTHS: 'SIX_MONTHS',
  YEARLY: 'YEARLY'
};

export type BillingPeriod = (typeof BillingPeriod)[keyof typeof BillingPeriod]


export const CardLimitTransactionType: {
  GRANTED: 'GRANTED',
  USED: 'USED',
  REFUNDED: 'REFUNDED',
  EXPIRED: 'EXPIRED'
};

export type CardLimitTransactionType = (typeof CardLimitTransactionType)[keyof typeof CardLimitTransactionType]


export const CardLimitTransactionSource: {
  TRIAL: 'TRIAL',
  SUBSCRIPTION_UPGRADE: 'SUBSCRIPTION_UPGRADE',
  CARD_ORDER: 'CARD_ORDER',
  MANUAL_ADJUSTMENT: 'MANUAL_ADJUSTMENT'
};

export type CardLimitTransactionSource = (typeof CardLimitTransactionSource)[keyof typeof CardLimitTransactionSource]

}

export type SubscriptionStatus = $Enums.SubscriptionStatus

export const SubscriptionStatus: typeof $Enums.SubscriptionStatus

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type Tier = $Enums.Tier

export const Tier: typeof $Enums.Tier

export type CardStatus = $Enums.CardStatus

export const CardStatus: typeof $Enums.CardStatus

export type TxType = $Enums.TxType

export const TxType: typeof $Enums.TxType

export type TxCategory = $Enums.TxCategory

export const TxCategory: typeof $Enums.TxCategory

export type NotifChannel = $Enums.NotifChannel

export const NotifChannel: typeof $Enums.NotifChannel

export type NotifStatus = $Enums.NotifStatus

export const NotifStatus: typeof $Enums.NotifStatus

export type CardType = $Enums.CardType

export const CardType: typeof $Enums.CardType

export type OrderStatus = $Enums.OrderStatus

export const OrderStatus: typeof $Enums.OrderStatus

export type OrderSourceType = $Enums.OrderSourceType

export const OrderSourceType: typeof $Enums.OrderSourceType

export type BillingPeriod = $Enums.BillingPeriod

export const BillingPeriod: typeof $Enums.BillingPeriod

export type CardLimitTransactionType = $Enums.CardLimitTransactionType

export const CardLimitTransactionType: typeof $Enums.CardLimitTransactionType

export type CardLimitTransactionSource = $Enums.CardLimitTransactionSource

export const CardLimitTransactionSource: typeof $Enums.CardLimitTransactionSource

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Tenants
 * const tenants = await prisma.tenant.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Tenants
   * const tenants = await prisma.tenant.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.tenant`: Exposes CRUD operations for the **Tenant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tenants
    * const tenants = await prisma.tenant.findMany()
    * ```
    */
  get tenant(): Prisma.TenantDelegate<ExtArgs>;

  /**
   * `prisma.store`: Exposes CRUD operations for the **Store** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stores
    * const stores = await prisma.store.findMany()
    * ```
    */
  get store(): Prisma.StoreDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.customer`: Exposes CRUD operations for the **Customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.CustomerDelegate<ExtArgs>;

  /**
   * `prisma.card`: Exposes CRUD operations for the **Card** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cards
    * const cards = await prisma.card.findMany()
    * ```
    */
  get card(): Prisma.CardDelegate<ExtArgs>;

  /**
   * `prisma.transaction`: Exposes CRUD operations for the **Transaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transaction.findMany()
    * ```
    */
  get transaction(): Prisma.TransactionDelegate<ExtArgs>;

  /**
   * `prisma.tierRule`: Exposes CRUD operations for the **TierRule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TierRules
    * const tierRules = await prisma.tierRule.findMany()
    * ```
    */
  get tierRule(): Prisma.TierRuleDelegate<ExtArgs>;

  /**
   * `prisma.cashbackRule`: Exposes CRUD operations for the **CashbackRule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CashbackRules
    * const cashbackRules = await prisma.cashbackRule.findMany()
    * ```
    */
  get cashbackRule(): Prisma.CashbackRuleDelegate<ExtArgs>;

  /**
   * `prisma.offer`: Exposes CRUD operations for the **Offer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Offers
    * const offers = await prisma.offer.findMany()
    * ```
    */
  get offer(): Prisma.OfferDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.cardOrder`: Exposes CRUD operations for the **CardOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CardOrders
    * const cardOrders = await prisma.cardOrder.findMany()
    * ```
    */
  get cardOrder(): Prisma.CardOrderDelegate<ExtArgs>;

  /**
   * `prisma.plan`: Exposes CRUD operations for the **Plan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Plans
    * const plans = await prisma.plan.findMany()
    * ```
    */
  get plan(): Prisma.PlanDelegate<ExtArgs>;

  /**
   * `prisma.cardLimitTransaction`: Exposes CRUD operations for the **CardLimitTransaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CardLimitTransactions
    * const cardLimitTransactions = await prisma.cardLimitTransaction.findMany()
    * ```
    */
  get cardLimitTransaction(): Prisma.CardLimitTransactionDelegate<ExtArgs>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **Payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.PaymentDelegate<ExtArgs>;

  /**
   * `prisma.subscriptionEvent`: Exposes CRUD operations for the **SubscriptionEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SubscriptionEvents
    * const subscriptionEvents = await prisma.subscriptionEvent.findMany()
    * ```
    */
  get subscriptionEvent(): Prisma.SubscriptionEventDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Tenant: 'Tenant',
    Store: 'Store',
    User: 'User',
    Customer: 'Customer',
    Card: 'Card',
    Transaction: 'Transaction',
    TierRule: 'TierRule',
    CashbackRule: 'CashbackRule',
    Offer: 'Offer',
    Notification: 'Notification',
    CardOrder: 'CardOrder',
    Plan: 'Plan',
    CardLimitTransaction: 'CardLimitTransaction',
    Payment: 'Payment',
    SubscriptionEvent: 'SubscriptionEvent'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "tenant" | "store" | "user" | "customer" | "card" | "transaction" | "tierRule" | "cashbackRule" | "offer" | "notification" | "cardOrder" | "plan" | "cardLimitTransaction" | "payment" | "subscriptionEvent"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Tenant: {
        payload: Prisma.$TenantPayload<ExtArgs>
        fields: Prisma.TenantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TenantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TenantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          findFirst: {
            args: Prisma.TenantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TenantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          findMany: {
            args: Prisma.TenantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>[]
          }
          create: {
            args: Prisma.TenantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          createMany: {
            args: Prisma.TenantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TenantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>[]
          }
          delete: {
            args: Prisma.TenantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          update: {
            args: Prisma.TenantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          deleteMany: {
            args: Prisma.TenantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TenantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TenantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          aggregate: {
            args: Prisma.TenantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTenant>
          }
          groupBy: {
            args: Prisma.TenantGroupByArgs<ExtArgs>
            result: $Utils.Optional<TenantGroupByOutputType>[]
          }
          count: {
            args: Prisma.TenantCountArgs<ExtArgs>
            result: $Utils.Optional<TenantCountAggregateOutputType> | number
          }
        }
      }
      Store: {
        payload: Prisma.$StorePayload<ExtArgs>
        fields: Prisma.StoreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StoreFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StoreFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          findFirst: {
            args: Prisma.StoreFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StoreFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          findMany: {
            args: Prisma.StoreFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>[]
          }
          create: {
            args: Prisma.StoreCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          createMany: {
            args: Prisma.StoreCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StoreCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>[]
          }
          delete: {
            args: Prisma.StoreDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          update: {
            args: Prisma.StoreUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          deleteMany: {
            args: Prisma.StoreDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StoreUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StoreUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StorePayload>
          }
          aggregate: {
            args: Prisma.StoreAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStore>
          }
          groupBy: {
            args: Prisma.StoreGroupByArgs<ExtArgs>
            result: $Utils.Optional<StoreGroupByOutputType>[]
          }
          count: {
            args: Prisma.StoreCountArgs<ExtArgs>
            result: $Utils.Optional<StoreCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Customer: {
        payload: Prisma.$CustomerPayload<ExtArgs>
        fields: Prisma.CustomerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findFirst: {
            args: Prisma.CustomerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findMany: {
            args: Prisma.CustomerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          create: {
            args: Prisma.CustomerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          createMany: {
            args: Prisma.CustomerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          delete: {
            args: Prisma.CustomerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          update: {
            args: Prisma.CustomerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          deleteMany: {
            args: Prisma.CustomerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CustomerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          aggregate: {
            args: Prisma.CustomerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomer>
          }
          groupBy: {
            args: Prisma.CustomerGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerCountAggregateOutputType> | number
          }
        }
      }
      Card: {
        payload: Prisma.$CardPayload<ExtArgs>
        fields: Prisma.CardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload>
          }
          findFirst: {
            args: Prisma.CardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload>
          }
          findMany: {
            args: Prisma.CardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload>[]
          }
          create: {
            args: Prisma.CardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload>
          }
          createMany: {
            args: Prisma.CardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload>[]
          }
          delete: {
            args: Prisma.CardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload>
          }
          update: {
            args: Prisma.CardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload>
          }
          deleteMany: {
            args: Prisma.CardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload>
          }
          aggregate: {
            args: Prisma.CardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCard>
          }
          groupBy: {
            args: Prisma.CardGroupByArgs<ExtArgs>
            result: $Utils.Optional<CardGroupByOutputType>[]
          }
          count: {
            args: Prisma.CardCountArgs<ExtArgs>
            result: $Utils.Optional<CardCountAggregateOutputType> | number
          }
        }
      }
      Transaction: {
        payload: Prisma.$TransactionPayload<ExtArgs>
        fields: Prisma.TransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findFirst: {
            args: Prisma.TransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findMany: {
            args: Prisma.TransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          create: {
            args: Prisma.TransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          createMany: {
            args: Prisma.TransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          delete: {
            args: Prisma.TransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          update: {
            args: Prisma.TransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          deleteMany: {
            args: Prisma.TransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          aggregate: {
            args: Prisma.TransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransaction>
          }
          groupBy: {
            args: Prisma.TransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransactionCountArgs<ExtArgs>
            result: $Utils.Optional<TransactionCountAggregateOutputType> | number
          }
        }
      }
      TierRule: {
        payload: Prisma.$TierRulePayload<ExtArgs>
        fields: Prisma.TierRuleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TierRuleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TierRulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TierRuleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TierRulePayload>
          }
          findFirst: {
            args: Prisma.TierRuleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TierRulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TierRuleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TierRulePayload>
          }
          findMany: {
            args: Prisma.TierRuleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TierRulePayload>[]
          }
          create: {
            args: Prisma.TierRuleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TierRulePayload>
          }
          createMany: {
            args: Prisma.TierRuleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TierRuleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TierRulePayload>[]
          }
          delete: {
            args: Prisma.TierRuleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TierRulePayload>
          }
          update: {
            args: Prisma.TierRuleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TierRulePayload>
          }
          deleteMany: {
            args: Prisma.TierRuleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TierRuleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TierRuleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TierRulePayload>
          }
          aggregate: {
            args: Prisma.TierRuleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTierRule>
          }
          groupBy: {
            args: Prisma.TierRuleGroupByArgs<ExtArgs>
            result: $Utils.Optional<TierRuleGroupByOutputType>[]
          }
          count: {
            args: Prisma.TierRuleCountArgs<ExtArgs>
            result: $Utils.Optional<TierRuleCountAggregateOutputType> | number
          }
        }
      }
      CashbackRule: {
        payload: Prisma.$CashbackRulePayload<ExtArgs>
        fields: Prisma.CashbackRuleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CashbackRuleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashbackRulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CashbackRuleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashbackRulePayload>
          }
          findFirst: {
            args: Prisma.CashbackRuleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashbackRulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CashbackRuleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashbackRulePayload>
          }
          findMany: {
            args: Prisma.CashbackRuleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashbackRulePayload>[]
          }
          create: {
            args: Prisma.CashbackRuleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashbackRulePayload>
          }
          createMany: {
            args: Prisma.CashbackRuleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CashbackRuleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashbackRulePayload>[]
          }
          delete: {
            args: Prisma.CashbackRuleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashbackRulePayload>
          }
          update: {
            args: Prisma.CashbackRuleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashbackRulePayload>
          }
          deleteMany: {
            args: Prisma.CashbackRuleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CashbackRuleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CashbackRuleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashbackRulePayload>
          }
          aggregate: {
            args: Prisma.CashbackRuleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCashbackRule>
          }
          groupBy: {
            args: Prisma.CashbackRuleGroupByArgs<ExtArgs>
            result: $Utils.Optional<CashbackRuleGroupByOutputType>[]
          }
          count: {
            args: Prisma.CashbackRuleCountArgs<ExtArgs>
            result: $Utils.Optional<CashbackRuleCountAggregateOutputType> | number
          }
        }
      }
      Offer: {
        payload: Prisma.$OfferPayload<ExtArgs>
        fields: Prisma.OfferFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OfferFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfferPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OfferFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfferPayload>
          }
          findFirst: {
            args: Prisma.OfferFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfferPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OfferFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfferPayload>
          }
          findMany: {
            args: Prisma.OfferFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfferPayload>[]
          }
          create: {
            args: Prisma.OfferCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfferPayload>
          }
          createMany: {
            args: Prisma.OfferCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OfferCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfferPayload>[]
          }
          delete: {
            args: Prisma.OfferDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfferPayload>
          }
          update: {
            args: Prisma.OfferUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfferPayload>
          }
          deleteMany: {
            args: Prisma.OfferDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OfferUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OfferUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OfferPayload>
          }
          aggregate: {
            args: Prisma.OfferAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOffer>
          }
          groupBy: {
            args: Prisma.OfferGroupByArgs<ExtArgs>
            result: $Utils.Optional<OfferGroupByOutputType>[]
          }
          count: {
            args: Prisma.OfferCountArgs<ExtArgs>
            result: $Utils.Optional<OfferCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      CardOrder: {
        payload: Prisma.$CardOrderPayload<ExtArgs>
        fields: Prisma.CardOrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CardOrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CardOrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardOrderPayload>
          }
          findFirst: {
            args: Prisma.CardOrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CardOrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardOrderPayload>
          }
          findMany: {
            args: Prisma.CardOrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardOrderPayload>[]
          }
          create: {
            args: Prisma.CardOrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardOrderPayload>
          }
          createMany: {
            args: Prisma.CardOrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CardOrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardOrderPayload>[]
          }
          delete: {
            args: Prisma.CardOrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardOrderPayload>
          }
          update: {
            args: Prisma.CardOrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardOrderPayload>
          }
          deleteMany: {
            args: Prisma.CardOrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CardOrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CardOrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardOrderPayload>
          }
          aggregate: {
            args: Prisma.CardOrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCardOrder>
          }
          groupBy: {
            args: Prisma.CardOrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<CardOrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.CardOrderCountArgs<ExtArgs>
            result: $Utils.Optional<CardOrderCountAggregateOutputType> | number
          }
        }
      }
      Plan: {
        payload: Prisma.$PlanPayload<ExtArgs>
        fields: Prisma.PlanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          findFirst: {
            args: Prisma.PlanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          findMany: {
            args: Prisma.PlanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>[]
          }
          create: {
            args: Prisma.PlanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          createMany: {
            args: Prisma.PlanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>[]
          }
          delete: {
            args: Prisma.PlanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          update: {
            args: Prisma.PlanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          deleteMany: {
            args: Prisma.PlanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          aggregate: {
            args: Prisma.PlanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlan>
          }
          groupBy: {
            args: Prisma.PlanGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlanGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlanCountArgs<ExtArgs>
            result: $Utils.Optional<PlanCountAggregateOutputType> | number
          }
        }
      }
      CardLimitTransaction: {
        payload: Prisma.$CardLimitTransactionPayload<ExtArgs>
        fields: Prisma.CardLimitTransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CardLimitTransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardLimitTransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CardLimitTransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardLimitTransactionPayload>
          }
          findFirst: {
            args: Prisma.CardLimitTransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardLimitTransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CardLimitTransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardLimitTransactionPayload>
          }
          findMany: {
            args: Prisma.CardLimitTransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardLimitTransactionPayload>[]
          }
          create: {
            args: Prisma.CardLimitTransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardLimitTransactionPayload>
          }
          createMany: {
            args: Prisma.CardLimitTransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CardLimitTransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardLimitTransactionPayload>[]
          }
          delete: {
            args: Prisma.CardLimitTransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardLimitTransactionPayload>
          }
          update: {
            args: Prisma.CardLimitTransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardLimitTransactionPayload>
          }
          deleteMany: {
            args: Prisma.CardLimitTransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CardLimitTransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CardLimitTransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardLimitTransactionPayload>
          }
          aggregate: {
            args: Prisma.CardLimitTransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCardLimitTransaction>
          }
          groupBy: {
            args: Prisma.CardLimitTransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<CardLimitTransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.CardLimitTransactionCountArgs<ExtArgs>
            result: $Utils.Optional<CardLimitTransactionCountAggregateOutputType> | number
          }
        }
      }
      Payment: {
        payload: Prisma.$PaymentPayload<ExtArgs>
        fields: Prisma.PaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findFirst: {
            args: Prisma.PaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findMany: {
            args: Prisma.PaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          create: {
            args: Prisma.PaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          createMany: {
            args: Prisma.PaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          delete: {
            args: Prisma.PaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          update: {
            args: Prisma.PaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          deleteMany: {
            args: Prisma.PaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          aggregate: {
            args: Prisma.PaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayment>
          }
          groupBy: {
            args: Prisma.PaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentCountAggregateOutputType> | number
          }
        }
      }
      SubscriptionEvent: {
        payload: Prisma.$SubscriptionEventPayload<ExtArgs>
        fields: Prisma.SubscriptionEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubscriptionEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubscriptionEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionEventPayload>
          }
          findFirst: {
            args: Prisma.SubscriptionEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubscriptionEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionEventPayload>
          }
          findMany: {
            args: Prisma.SubscriptionEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionEventPayload>[]
          }
          create: {
            args: Prisma.SubscriptionEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionEventPayload>
          }
          createMany: {
            args: Prisma.SubscriptionEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubscriptionEventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionEventPayload>[]
          }
          delete: {
            args: Prisma.SubscriptionEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionEventPayload>
          }
          update: {
            args: Prisma.SubscriptionEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionEventPayload>
          }
          deleteMany: {
            args: Prisma.SubscriptionEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubscriptionEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SubscriptionEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionEventPayload>
          }
          aggregate: {
            args: Prisma.SubscriptionEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubscriptionEvent>
          }
          groupBy: {
            args: Prisma.SubscriptionEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubscriptionEventCountArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionEventCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type TenantCountOutputType
   */

  export type TenantCountOutputType = {
    cardLimitTransactions: number
    cardOrders: number
    cards: number
    cashbackRules: number
    customers: number
    notifications: number
    offers: number
    stores: number
    tierRules: number
    transactions: number
    users: number
    payments: number
    subscriptionEvents: number
  }

  export type TenantCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cardLimitTransactions?: boolean | TenantCountOutputTypeCountCardLimitTransactionsArgs
    cardOrders?: boolean | TenantCountOutputTypeCountCardOrdersArgs
    cards?: boolean | TenantCountOutputTypeCountCardsArgs
    cashbackRules?: boolean | TenantCountOutputTypeCountCashbackRulesArgs
    customers?: boolean | TenantCountOutputTypeCountCustomersArgs
    notifications?: boolean | TenantCountOutputTypeCountNotificationsArgs
    offers?: boolean | TenantCountOutputTypeCountOffersArgs
    stores?: boolean | TenantCountOutputTypeCountStoresArgs
    tierRules?: boolean | TenantCountOutputTypeCountTierRulesArgs
    transactions?: boolean | TenantCountOutputTypeCountTransactionsArgs
    users?: boolean | TenantCountOutputTypeCountUsersArgs
    payments?: boolean | TenantCountOutputTypeCountPaymentsArgs
    subscriptionEvents?: boolean | TenantCountOutputTypeCountSubscriptionEventsArgs
  }

  // Custom InputTypes
  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantCountOutputType
     */
    select?: TenantCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountCardLimitTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardLimitTransactionWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountCardOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardOrderWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountCashbackRulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CashbackRuleWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountCustomersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountOffersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OfferWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountStoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoreWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountTierRulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TierRuleWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountSubscriptionEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionEventWhereInput
  }


  /**
   * Count Type StoreCountOutputType
   */

  export type StoreCountOutputType = {
    cards: number
    transactions: number
    users: number
  }

  export type StoreCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cards?: boolean | StoreCountOutputTypeCountCardsArgs
    transactions?: boolean | StoreCountOutputTypeCountTransactionsArgs
    users?: boolean | StoreCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * StoreCountOutputType without action
   */
  export type StoreCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoreCountOutputType
     */
    select?: StoreCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StoreCountOutputType without action
   */
  export type StoreCountOutputTypeCountCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardWhereInput
  }

  /**
   * StoreCountOutputType without action
   */
  export type StoreCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }

  /**
   * StoreCountOutputType without action
   */
  export type StoreCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    transactionsProcessed: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transactionsProcessed?: boolean | UserCountOutputTypeCountTransactionsProcessedArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTransactionsProcessedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }


  /**
   * Count Type CustomerCountOutputType
   */

  export type CustomerCountOutputType = {
    cards: number
    notifications: number
    transactions: number
  }

  export type CustomerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cards?: boolean | CustomerCountOutputTypeCountCardsArgs
    notifications?: boolean | CustomerCountOutputTypeCountNotificationsArgs
    transactions?: boolean | CustomerCountOutputTypeCountTransactionsArgs
  }

  // Custom InputTypes
  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCountOutputType
     */
    select?: CustomerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }


  /**
   * Count Type CardCountOutputType
   */

  export type CardCountOutputType = {
    transactions: number
  }

  export type CardCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transactions?: boolean | CardCountOutputTypeCountTransactionsArgs
  }

  // Custom InputTypes
  /**
   * CardCountOutputType without action
   */
  export type CardCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardCountOutputType
     */
    select?: CardCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CardCountOutputType without action
   */
  export type CardCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }


  /**
   * Count Type CardOrderCountOutputType
   */

  export type CardOrderCountOutputType = {
    cardLimitTransactions: number
  }

  export type CardOrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cardLimitTransactions?: boolean | CardOrderCountOutputTypeCountCardLimitTransactionsArgs
  }

  // Custom InputTypes
  /**
   * CardOrderCountOutputType without action
   */
  export type CardOrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardOrderCountOutputType
     */
    select?: CardOrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CardOrderCountOutputType without action
   */
  export type CardOrderCountOutputTypeCountCardLimitTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardLimitTransactionWhereInput
  }


  /**
   * Count Type PlanCountOutputType
   */

  export type PlanCountOutputType = {
    cardLimitTransactions: number
    tenants: number
    payments: number
    subscriptionEvents: number
    previousSubscriptionEvents: number
  }

  export type PlanCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cardLimitTransactions?: boolean | PlanCountOutputTypeCountCardLimitTransactionsArgs
    tenants?: boolean | PlanCountOutputTypeCountTenantsArgs
    payments?: boolean | PlanCountOutputTypeCountPaymentsArgs
    subscriptionEvents?: boolean | PlanCountOutputTypeCountSubscriptionEventsArgs
    previousSubscriptionEvents?: boolean | PlanCountOutputTypeCountPreviousSubscriptionEventsArgs
  }

  // Custom InputTypes
  /**
   * PlanCountOutputType without action
   */
  export type PlanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanCountOutputType
     */
    select?: PlanCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PlanCountOutputType without action
   */
  export type PlanCountOutputTypeCountCardLimitTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardLimitTransactionWhereInput
  }

  /**
   * PlanCountOutputType without action
   */
  export type PlanCountOutputTypeCountTenantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TenantWhereInput
  }

  /**
   * PlanCountOutputType without action
   */
  export type PlanCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }

  /**
   * PlanCountOutputType without action
   */
  export type PlanCountOutputTypeCountSubscriptionEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionEventWhereInput
  }

  /**
   * PlanCountOutputType without action
   */
  export type PlanCountOutputTypeCountPreviousSubscriptionEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionEventWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Tenant
   */

  export type AggregateTenant = {
    _count: TenantCountAggregateOutputType | null
    _avg: TenantAvgAggregateOutputType | null
    _sum: TenantSumAggregateOutputType | null
    _min: TenantMinAggregateOutputType | null
    _max: TenantMaxAggregateOutputType | null
  }

  export type TenantAvgAggregateOutputType = {
    freeTrialActivations: number | null
    freeTrialCardsCreated: number | null
    freeTrialLimit: number | null
    currentCardBalance: number | null
    subscriptionCardLimit: number | null
    subscriptionCardsUsed: number | null
    totalCardAllowance: number | null
  }

  export type TenantSumAggregateOutputType = {
    freeTrialActivations: number | null
    freeTrialCardsCreated: number | null
    freeTrialLimit: number | null
    currentCardBalance: number | null
    subscriptionCardLimit: number | null
    subscriptionCardsUsed: number | null
    totalCardAllowance: number | null
  }

  export type TenantMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    graceEndsAt: Date | null
    planId: string | null
    slug: string | null
    stripeCustomerId: string | null
    stripeSubscriptionId: string | null
    subscriptionStatus: $Enums.SubscriptionStatus | null
    trialEndsAt: Date | null
    freeTrialActivations: number | null
    freeTrialCardsCreated: number | null
    freeTrialLimit: number | null
    trialExpiredNotified: boolean | null
    currentCardBalance: number | null
    subscriptionCardLimit: number | null
    subscriptionCardsUsed: number | null
    totalCardAllowance: number | null
  }

  export type TenantMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    graceEndsAt: Date | null
    planId: string | null
    slug: string | null
    stripeCustomerId: string | null
    stripeSubscriptionId: string | null
    subscriptionStatus: $Enums.SubscriptionStatus | null
    trialEndsAt: Date | null
    freeTrialActivations: number | null
    freeTrialCardsCreated: number | null
    freeTrialLimit: number | null
    trialExpiredNotified: boolean | null
    currentCardBalance: number | null
    subscriptionCardLimit: number | null
    subscriptionCardsUsed: number | null
    totalCardAllowance: number | null
  }

  export type TenantCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    graceEndsAt: number
    planId: number
    slug: number
    stripeCustomerId: number
    stripeSubscriptionId: number
    subscriptionStatus: number
    trialEndsAt: number
    freeTrialActivations: number
    freeTrialCardsCreated: number
    freeTrialLimit: number
    trialExpiredNotified: number
    currentCardBalance: number
    subscriptionCardLimit: number
    subscriptionCardsUsed: number
    totalCardAllowance: number
    _all: number
  }


  export type TenantAvgAggregateInputType = {
    freeTrialActivations?: true
    freeTrialCardsCreated?: true
    freeTrialLimit?: true
    currentCardBalance?: true
    subscriptionCardLimit?: true
    subscriptionCardsUsed?: true
    totalCardAllowance?: true
  }

  export type TenantSumAggregateInputType = {
    freeTrialActivations?: true
    freeTrialCardsCreated?: true
    freeTrialLimit?: true
    currentCardBalance?: true
    subscriptionCardLimit?: true
    subscriptionCardsUsed?: true
    totalCardAllowance?: true
  }

  export type TenantMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    graceEndsAt?: true
    planId?: true
    slug?: true
    stripeCustomerId?: true
    stripeSubscriptionId?: true
    subscriptionStatus?: true
    trialEndsAt?: true
    freeTrialActivations?: true
    freeTrialCardsCreated?: true
    freeTrialLimit?: true
    trialExpiredNotified?: true
    currentCardBalance?: true
    subscriptionCardLimit?: true
    subscriptionCardsUsed?: true
    totalCardAllowance?: true
  }

  export type TenantMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    graceEndsAt?: true
    planId?: true
    slug?: true
    stripeCustomerId?: true
    stripeSubscriptionId?: true
    subscriptionStatus?: true
    trialEndsAt?: true
    freeTrialActivations?: true
    freeTrialCardsCreated?: true
    freeTrialLimit?: true
    trialExpiredNotified?: true
    currentCardBalance?: true
    subscriptionCardLimit?: true
    subscriptionCardsUsed?: true
    totalCardAllowance?: true
  }

  export type TenantCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    graceEndsAt?: true
    planId?: true
    slug?: true
    stripeCustomerId?: true
    stripeSubscriptionId?: true
    subscriptionStatus?: true
    trialEndsAt?: true
    freeTrialActivations?: true
    freeTrialCardsCreated?: true
    freeTrialLimit?: true
    trialExpiredNotified?: true
    currentCardBalance?: true
    subscriptionCardLimit?: true
    subscriptionCardsUsed?: true
    totalCardAllowance?: true
    _all?: true
  }

  export type TenantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tenant to aggregate.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tenants
    **/
    _count?: true | TenantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TenantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TenantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TenantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TenantMaxAggregateInputType
  }

  export type GetTenantAggregateType<T extends TenantAggregateArgs> = {
        [P in keyof T & keyof AggregateTenant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTenant[P]>
      : GetScalarType<T[P], AggregateTenant[P]>
  }




  export type TenantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TenantWhereInput
    orderBy?: TenantOrderByWithAggregationInput | TenantOrderByWithAggregationInput[]
    by: TenantScalarFieldEnum[] | TenantScalarFieldEnum
    having?: TenantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TenantCountAggregateInputType | true
    _avg?: TenantAvgAggregateInputType
    _sum?: TenantSumAggregateInputType
    _min?: TenantMinAggregateInputType
    _max?: TenantMaxAggregateInputType
  }

  export type TenantGroupByOutputType = {
    id: string
    name: string | null
    createdAt: Date
    updatedAt: Date
    graceEndsAt: Date | null
    planId: string | null
    slug: string
    stripeCustomerId: string | null
    stripeSubscriptionId: string | null
    subscriptionStatus: $Enums.SubscriptionStatus
    trialEndsAt: Date | null
    freeTrialActivations: number
    freeTrialCardsCreated: number
    freeTrialLimit: number
    trialExpiredNotified: boolean
    currentCardBalance: number
    subscriptionCardLimit: number
    subscriptionCardsUsed: number
    totalCardAllowance: number
    _count: TenantCountAggregateOutputType | null
    _avg: TenantAvgAggregateOutputType | null
    _sum: TenantSumAggregateOutputType | null
    _min: TenantMinAggregateOutputType | null
    _max: TenantMaxAggregateOutputType | null
  }

  type GetTenantGroupByPayload<T extends TenantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TenantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TenantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TenantGroupByOutputType[P]>
            : GetScalarType<T[P], TenantGroupByOutputType[P]>
        }
      >
    >


  export type TenantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    graceEndsAt?: boolean
    planId?: boolean
    slug?: boolean
    stripeCustomerId?: boolean
    stripeSubscriptionId?: boolean
    subscriptionStatus?: boolean
    trialEndsAt?: boolean
    freeTrialActivations?: boolean
    freeTrialCardsCreated?: boolean
    freeTrialLimit?: boolean
    trialExpiredNotified?: boolean
    currentCardBalance?: boolean
    subscriptionCardLimit?: boolean
    subscriptionCardsUsed?: boolean
    totalCardAllowance?: boolean
    cardLimitTransactions?: boolean | Tenant$cardLimitTransactionsArgs<ExtArgs>
    cardOrders?: boolean | Tenant$cardOrdersArgs<ExtArgs>
    cards?: boolean | Tenant$cardsArgs<ExtArgs>
    cashbackRules?: boolean | Tenant$cashbackRulesArgs<ExtArgs>
    customers?: boolean | Tenant$customersArgs<ExtArgs>
    notifications?: boolean | Tenant$notificationsArgs<ExtArgs>
    offers?: boolean | Tenant$offersArgs<ExtArgs>
    stores?: boolean | Tenant$storesArgs<ExtArgs>
    plan?: boolean | Tenant$planArgs<ExtArgs>
    tierRules?: boolean | Tenant$tierRulesArgs<ExtArgs>
    transactions?: boolean | Tenant$transactionsArgs<ExtArgs>
    users?: boolean | Tenant$usersArgs<ExtArgs>
    payments?: boolean | Tenant$paymentsArgs<ExtArgs>
    subscriptionEvents?: boolean | Tenant$subscriptionEventsArgs<ExtArgs>
    _count?: boolean | TenantCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tenant"]>

  export type TenantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    graceEndsAt?: boolean
    planId?: boolean
    slug?: boolean
    stripeCustomerId?: boolean
    stripeSubscriptionId?: boolean
    subscriptionStatus?: boolean
    trialEndsAt?: boolean
    freeTrialActivations?: boolean
    freeTrialCardsCreated?: boolean
    freeTrialLimit?: boolean
    trialExpiredNotified?: boolean
    currentCardBalance?: boolean
    subscriptionCardLimit?: boolean
    subscriptionCardsUsed?: boolean
    totalCardAllowance?: boolean
    plan?: boolean | Tenant$planArgs<ExtArgs>
  }, ExtArgs["result"]["tenant"]>

  export type TenantSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    graceEndsAt?: boolean
    planId?: boolean
    slug?: boolean
    stripeCustomerId?: boolean
    stripeSubscriptionId?: boolean
    subscriptionStatus?: boolean
    trialEndsAt?: boolean
    freeTrialActivations?: boolean
    freeTrialCardsCreated?: boolean
    freeTrialLimit?: boolean
    trialExpiredNotified?: boolean
    currentCardBalance?: boolean
    subscriptionCardLimit?: boolean
    subscriptionCardsUsed?: boolean
    totalCardAllowance?: boolean
  }

  export type TenantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cardLimitTransactions?: boolean | Tenant$cardLimitTransactionsArgs<ExtArgs>
    cardOrders?: boolean | Tenant$cardOrdersArgs<ExtArgs>
    cards?: boolean | Tenant$cardsArgs<ExtArgs>
    cashbackRules?: boolean | Tenant$cashbackRulesArgs<ExtArgs>
    customers?: boolean | Tenant$customersArgs<ExtArgs>
    notifications?: boolean | Tenant$notificationsArgs<ExtArgs>
    offers?: boolean | Tenant$offersArgs<ExtArgs>
    stores?: boolean | Tenant$storesArgs<ExtArgs>
    plan?: boolean | Tenant$planArgs<ExtArgs>
    tierRules?: boolean | Tenant$tierRulesArgs<ExtArgs>
    transactions?: boolean | Tenant$transactionsArgs<ExtArgs>
    users?: boolean | Tenant$usersArgs<ExtArgs>
    payments?: boolean | Tenant$paymentsArgs<ExtArgs>
    subscriptionEvents?: boolean | Tenant$subscriptionEventsArgs<ExtArgs>
    _count?: boolean | TenantCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TenantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plan?: boolean | Tenant$planArgs<ExtArgs>
  }

  export type $TenantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tenant"
    objects: {
      cardLimitTransactions: Prisma.$CardLimitTransactionPayload<ExtArgs>[]
      cardOrders: Prisma.$CardOrderPayload<ExtArgs>[]
      cards: Prisma.$CardPayload<ExtArgs>[]
      cashbackRules: Prisma.$CashbackRulePayload<ExtArgs>[]
      customers: Prisma.$CustomerPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      offers: Prisma.$OfferPayload<ExtArgs>[]
      stores: Prisma.$StorePayload<ExtArgs>[]
      plan: Prisma.$PlanPayload<ExtArgs> | null
      tierRules: Prisma.$TierRulePayload<ExtArgs>[]
      transactions: Prisma.$TransactionPayload<ExtArgs>[]
      users: Prisma.$UserPayload<ExtArgs>[]
      payments: Prisma.$PaymentPayload<ExtArgs>[]
      subscriptionEvents: Prisma.$SubscriptionEventPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      createdAt: Date
      updatedAt: Date
      graceEndsAt: Date | null
      planId: string | null
      slug: string
      stripeCustomerId: string | null
      stripeSubscriptionId: string | null
      subscriptionStatus: $Enums.SubscriptionStatus
      trialEndsAt: Date | null
      freeTrialActivations: number
      freeTrialCardsCreated: number
      freeTrialLimit: number
      trialExpiredNotified: boolean
      currentCardBalance: number
      subscriptionCardLimit: number
      subscriptionCardsUsed: number
      totalCardAllowance: number
    }, ExtArgs["result"]["tenant"]>
    composites: {}
  }

  type TenantGetPayload<S extends boolean | null | undefined | TenantDefaultArgs> = $Result.GetResult<Prisma.$TenantPayload, S>

  type TenantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TenantFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TenantCountAggregateInputType | true
    }

  export interface TenantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tenant'], meta: { name: 'Tenant' } }
    /**
     * Find zero or one Tenant that matches the filter.
     * @param {TenantFindUniqueArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TenantFindUniqueArgs>(args: SelectSubset<T, TenantFindUniqueArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Tenant that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TenantFindUniqueOrThrowArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TenantFindUniqueOrThrowArgs>(args: SelectSubset<T, TenantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Tenant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindFirstArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TenantFindFirstArgs>(args?: SelectSubset<T, TenantFindFirstArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Tenant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindFirstOrThrowArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TenantFindFirstOrThrowArgs>(args?: SelectSubset<T, TenantFindFirstOrThrowArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tenants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tenants
     * const tenants = await prisma.tenant.findMany()
     * 
     * // Get first 10 Tenants
     * const tenants = await prisma.tenant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tenantWithIdOnly = await prisma.tenant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TenantFindManyArgs>(args?: SelectSubset<T, TenantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Tenant.
     * @param {TenantCreateArgs} args - Arguments to create a Tenant.
     * @example
     * // Create one Tenant
     * const Tenant = await prisma.tenant.create({
     *   data: {
     *     // ... data to create a Tenant
     *   }
     * })
     * 
     */
    create<T extends TenantCreateArgs>(args: SelectSubset<T, TenantCreateArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tenants.
     * @param {TenantCreateManyArgs} args - Arguments to create many Tenants.
     * @example
     * // Create many Tenants
     * const tenant = await prisma.tenant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TenantCreateManyArgs>(args?: SelectSubset<T, TenantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tenants and returns the data saved in the database.
     * @param {TenantCreateManyAndReturnArgs} args - Arguments to create many Tenants.
     * @example
     * // Create many Tenants
     * const tenant = await prisma.tenant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tenants and only return the `id`
     * const tenantWithIdOnly = await prisma.tenant.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TenantCreateManyAndReturnArgs>(args?: SelectSubset<T, TenantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Tenant.
     * @param {TenantDeleteArgs} args - Arguments to delete one Tenant.
     * @example
     * // Delete one Tenant
     * const Tenant = await prisma.tenant.delete({
     *   where: {
     *     // ... filter to delete one Tenant
     *   }
     * })
     * 
     */
    delete<T extends TenantDeleteArgs>(args: SelectSubset<T, TenantDeleteArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Tenant.
     * @param {TenantUpdateArgs} args - Arguments to update one Tenant.
     * @example
     * // Update one Tenant
     * const tenant = await prisma.tenant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TenantUpdateArgs>(args: SelectSubset<T, TenantUpdateArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tenants.
     * @param {TenantDeleteManyArgs} args - Arguments to filter Tenants to delete.
     * @example
     * // Delete a few Tenants
     * const { count } = await prisma.tenant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TenantDeleteManyArgs>(args?: SelectSubset<T, TenantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tenants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tenants
     * const tenant = await prisma.tenant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TenantUpdateManyArgs>(args: SelectSubset<T, TenantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tenant.
     * @param {TenantUpsertArgs} args - Arguments to update or create a Tenant.
     * @example
     * // Update or create a Tenant
     * const tenant = await prisma.tenant.upsert({
     *   create: {
     *     // ... data to create a Tenant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tenant we want to update
     *   }
     * })
     */
    upsert<T extends TenantUpsertArgs>(args: SelectSubset<T, TenantUpsertArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tenants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantCountArgs} args - Arguments to filter Tenants to count.
     * @example
     * // Count the number of Tenants
     * const count = await prisma.tenant.count({
     *   where: {
     *     // ... the filter for the Tenants we want to count
     *   }
     * })
    **/
    count<T extends TenantCountArgs>(
      args?: Subset<T, TenantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TenantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tenant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TenantAggregateArgs>(args: Subset<T, TenantAggregateArgs>): Prisma.PrismaPromise<GetTenantAggregateType<T>>

    /**
     * Group by Tenant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TenantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TenantGroupByArgs['orderBy'] }
        : { orderBy?: TenantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TenantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTenantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tenant model
   */
  readonly fields: TenantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tenant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TenantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cardLimitTransactions<T extends Tenant$cardLimitTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$cardLimitTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardLimitTransactionPayload<ExtArgs>, T, "findMany"> | Null>
    cardOrders<T extends Tenant$cardOrdersArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$cardOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardOrderPayload<ExtArgs>, T, "findMany"> | Null>
    cards<T extends Tenant$cardsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$cardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findMany"> | Null>
    cashbackRules<T extends Tenant$cashbackRulesArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$cashbackRulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CashbackRulePayload<ExtArgs>, T, "findMany"> | Null>
    customers<T extends Tenant$customersArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$customersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany"> | Null>
    notifications<T extends Tenant$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    offers<T extends Tenant$offersArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$offersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OfferPayload<ExtArgs>, T, "findMany"> | Null>
    stores<T extends Tenant$storesArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$storesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findMany"> | Null>
    plan<T extends Tenant$planArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$planArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    tierRules<T extends Tenant$tierRulesArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$tierRulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TierRulePayload<ExtArgs>, T, "findMany"> | Null>
    transactions<T extends Tenant$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany"> | Null>
    users<T extends Tenant$usersArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    payments<T extends Tenant$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany"> | Null>
    subscriptionEvents<T extends Tenant$subscriptionEventsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$subscriptionEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionEventPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tenant model
   */ 
  interface TenantFieldRefs {
    readonly id: FieldRef<"Tenant", 'String'>
    readonly name: FieldRef<"Tenant", 'String'>
    readonly createdAt: FieldRef<"Tenant", 'DateTime'>
    readonly updatedAt: FieldRef<"Tenant", 'DateTime'>
    readonly graceEndsAt: FieldRef<"Tenant", 'DateTime'>
    readonly planId: FieldRef<"Tenant", 'String'>
    readonly slug: FieldRef<"Tenant", 'String'>
    readonly stripeCustomerId: FieldRef<"Tenant", 'String'>
    readonly stripeSubscriptionId: FieldRef<"Tenant", 'String'>
    readonly subscriptionStatus: FieldRef<"Tenant", 'SubscriptionStatus'>
    readonly trialEndsAt: FieldRef<"Tenant", 'DateTime'>
    readonly freeTrialActivations: FieldRef<"Tenant", 'Int'>
    readonly freeTrialCardsCreated: FieldRef<"Tenant", 'Int'>
    readonly freeTrialLimit: FieldRef<"Tenant", 'Int'>
    readonly trialExpiredNotified: FieldRef<"Tenant", 'Boolean'>
    readonly currentCardBalance: FieldRef<"Tenant", 'Int'>
    readonly subscriptionCardLimit: FieldRef<"Tenant", 'Int'>
    readonly subscriptionCardsUsed: FieldRef<"Tenant", 'Int'>
    readonly totalCardAllowance: FieldRef<"Tenant", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Tenant findUnique
   */
  export type TenantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant findUniqueOrThrow
   */
  export type TenantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant findFirst
   */
  export type TenantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tenants.
     */
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant findFirstOrThrow
   */
  export type TenantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tenants.
     */
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant findMany
   */
  export type TenantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenants to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant create
   */
  export type TenantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The data needed to create a Tenant.
     */
    data: XOR<TenantCreateInput, TenantUncheckedCreateInput>
  }

  /**
   * Tenant createMany
   */
  export type TenantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tenants.
     */
    data: TenantCreateManyInput | TenantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tenant createManyAndReturn
   */
  export type TenantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Tenants.
     */
    data: TenantCreateManyInput | TenantCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tenant update
   */
  export type TenantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The data needed to update a Tenant.
     */
    data: XOR<TenantUpdateInput, TenantUncheckedUpdateInput>
    /**
     * Choose, which Tenant to update.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant updateMany
   */
  export type TenantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tenants.
     */
    data: XOR<TenantUpdateManyMutationInput, TenantUncheckedUpdateManyInput>
    /**
     * Filter which Tenants to update
     */
    where?: TenantWhereInput
  }

  /**
   * Tenant upsert
   */
  export type TenantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The filter to search for the Tenant to update in case it exists.
     */
    where: TenantWhereUniqueInput
    /**
     * In case the Tenant found by the `where` argument doesn't exist, create a new Tenant with this data.
     */
    create: XOR<TenantCreateInput, TenantUncheckedCreateInput>
    /**
     * In case the Tenant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TenantUpdateInput, TenantUncheckedUpdateInput>
  }

  /**
   * Tenant delete
   */
  export type TenantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter which Tenant to delete.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant deleteMany
   */
  export type TenantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tenants to delete
     */
    where?: TenantWhereInput
  }

  /**
   * Tenant.cardLimitTransactions
   */
  export type Tenant$cardLimitTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardLimitTransaction
     */
    select?: CardLimitTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardLimitTransactionInclude<ExtArgs> | null
    where?: CardLimitTransactionWhereInput
    orderBy?: CardLimitTransactionOrderByWithRelationInput | CardLimitTransactionOrderByWithRelationInput[]
    cursor?: CardLimitTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CardLimitTransactionScalarFieldEnum | CardLimitTransactionScalarFieldEnum[]
  }

  /**
   * Tenant.cardOrders
   */
  export type Tenant$cardOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardOrder
     */
    select?: CardOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardOrderInclude<ExtArgs> | null
    where?: CardOrderWhereInput
    orderBy?: CardOrderOrderByWithRelationInput | CardOrderOrderByWithRelationInput[]
    cursor?: CardOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CardOrderScalarFieldEnum | CardOrderScalarFieldEnum[]
  }

  /**
   * Tenant.cards
   */
  export type Tenant$cardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    where?: CardWhereInput
    orderBy?: CardOrderByWithRelationInput | CardOrderByWithRelationInput[]
    cursor?: CardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CardScalarFieldEnum | CardScalarFieldEnum[]
  }

  /**
   * Tenant.cashbackRules
   */
  export type Tenant$cashbackRulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashbackRule
     */
    select?: CashbackRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashbackRuleInclude<ExtArgs> | null
    where?: CashbackRuleWhereInput
    orderBy?: CashbackRuleOrderByWithRelationInput | CashbackRuleOrderByWithRelationInput[]
    cursor?: CashbackRuleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CashbackRuleScalarFieldEnum | CashbackRuleScalarFieldEnum[]
  }

  /**
   * Tenant.customers
   */
  export type Tenant$customersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    cursor?: CustomerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Tenant.notifications
   */
  export type Tenant$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Tenant.offers
   */
  export type Tenant$offersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Offer
     */
    select?: OfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfferInclude<ExtArgs> | null
    where?: OfferWhereInput
    orderBy?: OfferOrderByWithRelationInput | OfferOrderByWithRelationInput[]
    cursor?: OfferWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OfferScalarFieldEnum | OfferScalarFieldEnum[]
  }

  /**
   * Tenant.stores
   */
  export type Tenant$storesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    where?: StoreWhereInput
    orderBy?: StoreOrderByWithRelationInput | StoreOrderByWithRelationInput[]
    cursor?: StoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StoreScalarFieldEnum | StoreScalarFieldEnum[]
  }

  /**
   * Tenant.plan
   */
  export type Tenant$planArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    where?: PlanWhereInput
  }

  /**
   * Tenant.tierRules
   */
  export type Tenant$tierRulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TierRule
     */
    select?: TierRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TierRuleInclude<ExtArgs> | null
    where?: TierRuleWhereInput
    orderBy?: TierRuleOrderByWithRelationInput | TierRuleOrderByWithRelationInput[]
    cursor?: TierRuleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TierRuleScalarFieldEnum | TierRuleScalarFieldEnum[]
  }

  /**
   * Tenant.transactions
   */
  export type Tenant$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Tenant.users
   */
  export type Tenant$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Tenant.payments
   */
  export type Tenant$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Tenant.subscriptionEvents
   */
  export type Tenant$subscriptionEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionEvent
     */
    select?: SubscriptionEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionEventInclude<ExtArgs> | null
    where?: SubscriptionEventWhereInput
    orderBy?: SubscriptionEventOrderByWithRelationInput | SubscriptionEventOrderByWithRelationInput[]
    cursor?: SubscriptionEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubscriptionEventScalarFieldEnum | SubscriptionEventScalarFieldEnum[]
  }

  /**
   * Tenant without action
   */
  export type TenantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
  }


  /**
   * Model Store
   */

  export type AggregateStore = {
    _count: StoreCountAggregateOutputType | null
    _min: StoreMinAggregateOutputType | null
    _max: StoreMaxAggregateOutputType | null
  }

  export type StoreMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    name: string | null
    address: string | null
    active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StoreMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    name: string | null
    address: string | null
    active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StoreCountAggregateOutputType = {
    id: number
    tenantId: number
    name: number
    address: number
    active: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StoreMinAggregateInputType = {
    id?: true
    tenantId?: true
    name?: true
    address?: true
    active?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StoreMaxAggregateInputType = {
    id?: true
    tenantId?: true
    name?: true
    address?: true
    active?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StoreCountAggregateInputType = {
    id?: true
    tenantId?: true
    name?: true
    address?: true
    active?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StoreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Store to aggregate.
     */
    where?: StoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stores to fetch.
     */
    orderBy?: StoreOrderByWithRelationInput | StoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stores
    **/
    _count?: true | StoreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StoreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StoreMaxAggregateInputType
  }

  export type GetStoreAggregateType<T extends StoreAggregateArgs> = {
        [P in keyof T & keyof AggregateStore]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStore[P]>
      : GetScalarType<T[P], AggregateStore[P]>
  }




  export type StoreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoreWhereInput
    orderBy?: StoreOrderByWithAggregationInput | StoreOrderByWithAggregationInput[]
    by: StoreScalarFieldEnum[] | StoreScalarFieldEnum
    having?: StoreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StoreCountAggregateInputType | true
    _min?: StoreMinAggregateInputType
    _max?: StoreMaxAggregateInputType
  }

  export type StoreGroupByOutputType = {
    id: string
    tenantId: string
    name: string
    address: string | null
    active: boolean
    createdAt: Date
    updatedAt: Date
    _count: StoreCountAggregateOutputType | null
    _min: StoreMinAggregateOutputType | null
    _max: StoreMaxAggregateOutputType | null
  }

  type GetStoreGroupByPayload<T extends StoreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StoreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StoreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StoreGroupByOutputType[P]>
            : GetScalarType<T[P], StoreGroupByOutputType[P]>
        }
      >
    >


  export type StoreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    name?: boolean
    address?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    cards?: boolean | Store$cardsArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    transactions?: boolean | Store$transactionsArgs<ExtArgs>
    users?: boolean | Store$usersArgs<ExtArgs>
    _count?: boolean | StoreCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["store"]>

  export type StoreSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    name?: boolean
    address?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["store"]>

  export type StoreSelectScalar = {
    id?: boolean
    tenantId?: boolean
    name?: boolean
    address?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StoreInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cards?: boolean | Store$cardsArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    transactions?: boolean | Store$transactionsArgs<ExtArgs>
    users?: boolean | Store$usersArgs<ExtArgs>
    _count?: boolean | StoreCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StoreIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $StorePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Store"
    objects: {
      cards: Prisma.$CardPayload<ExtArgs>[]
      tenant: Prisma.$TenantPayload<ExtArgs>
      transactions: Prisma.$TransactionPayload<ExtArgs>[]
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      name: string
      address: string | null
      active: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["store"]>
    composites: {}
  }

  type StoreGetPayload<S extends boolean | null | undefined | StoreDefaultArgs> = $Result.GetResult<Prisma.$StorePayload, S>

  type StoreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StoreFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StoreCountAggregateInputType | true
    }

  export interface StoreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Store'], meta: { name: 'Store' } }
    /**
     * Find zero or one Store that matches the filter.
     * @param {StoreFindUniqueArgs} args - Arguments to find a Store
     * @example
     * // Get one Store
     * const store = await prisma.store.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StoreFindUniqueArgs>(args: SelectSubset<T, StoreFindUniqueArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Store that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StoreFindUniqueOrThrowArgs} args - Arguments to find a Store
     * @example
     * // Get one Store
     * const store = await prisma.store.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StoreFindUniqueOrThrowArgs>(args: SelectSubset<T, StoreFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Store that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreFindFirstArgs} args - Arguments to find a Store
     * @example
     * // Get one Store
     * const store = await prisma.store.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StoreFindFirstArgs>(args?: SelectSubset<T, StoreFindFirstArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Store that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreFindFirstOrThrowArgs} args - Arguments to find a Store
     * @example
     * // Get one Store
     * const store = await prisma.store.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StoreFindFirstOrThrowArgs>(args?: SelectSubset<T, StoreFindFirstOrThrowArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Stores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stores
     * const stores = await prisma.store.findMany()
     * 
     * // Get first 10 Stores
     * const stores = await prisma.store.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const storeWithIdOnly = await prisma.store.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StoreFindManyArgs>(args?: SelectSubset<T, StoreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Store.
     * @param {StoreCreateArgs} args - Arguments to create a Store.
     * @example
     * // Create one Store
     * const Store = await prisma.store.create({
     *   data: {
     *     // ... data to create a Store
     *   }
     * })
     * 
     */
    create<T extends StoreCreateArgs>(args: SelectSubset<T, StoreCreateArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Stores.
     * @param {StoreCreateManyArgs} args - Arguments to create many Stores.
     * @example
     * // Create many Stores
     * const store = await prisma.store.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StoreCreateManyArgs>(args?: SelectSubset<T, StoreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Stores and returns the data saved in the database.
     * @param {StoreCreateManyAndReturnArgs} args - Arguments to create many Stores.
     * @example
     * // Create many Stores
     * const store = await prisma.store.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Stores and only return the `id`
     * const storeWithIdOnly = await prisma.store.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StoreCreateManyAndReturnArgs>(args?: SelectSubset<T, StoreCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Store.
     * @param {StoreDeleteArgs} args - Arguments to delete one Store.
     * @example
     * // Delete one Store
     * const Store = await prisma.store.delete({
     *   where: {
     *     // ... filter to delete one Store
     *   }
     * })
     * 
     */
    delete<T extends StoreDeleteArgs>(args: SelectSubset<T, StoreDeleteArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Store.
     * @param {StoreUpdateArgs} args - Arguments to update one Store.
     * @example
     * // Update one Store
     * const store = await prisma.store.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StoreUpdateArgs>(args: SelectSubset<T, StoreUpdateArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Stores.
     * @param {StoreDeleteManyArgs} args - Arguments to filter Stores to delete.
     * @example
     * // Delete a few Stores
     * const { count } = await prisma.store.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StoreDeleteManyArgs>(args?: SelectSubset<T, StoreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stores
     * const store = await prisma.store.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StoreUpdateManyArgs>(args: SelectSubset<T, StoreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Store.
     * @param {StoreUpsertArgs} args - Arguments to update or create a Store.
     * @example
     * // Update or create a Store
     * const store = await prisma.store.upsert({
     *   create: {
     *     // ... data to create a Store
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Store we want to update
     *   }
     * })
     */
    upsert<T extends StoreUpsertArgs>(args: SelectSubset<T, StoreUpsertArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Stores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreCountArgs} args - Arguments to filter Stores to count.
     * @example
     * // Count the number of Stores
     * const count = await prisma.store.count({
     *   where: {
     *     // ... the filter for the Stores we want to count
     *   }
     * })
    **/
    count<T extends StoreCountArgs>(
      args?: Subset<T, StoreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StoreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Store.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StoreAggregateArgs>(args: Subset<T, StoreAggregateArgs>): Prisma.PrismaPromise<GetStoreAggregateType<T>>

    /**
     * Group by Store.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StoreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StoreGroupByArgs['orderBy'] }
        : { orderBy?: StoreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StoreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStoreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Store model
   */
  readonly fields: StoreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Store.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StoreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cards<T extends Store$cardsArgs<ExtArgs> = {}>(args?: Subset<T, Store$cardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findMany"> | Null>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    transactions<T extends Store$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, Store$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany"> | Null>
    users<T extends Store$usersArgs<ExtArgs> = {}>(args?: Subset<T, Store$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Store model
   */ 
  interface StoreFieldRefs {
    readonly id: FieldRef<"Store", 'String'>
    readonly tenantId: FieldRef<"Store", 'String'>
    readonly name: FieldRef<"Store", 'String'>
    readonly address: FieldRef<"Store", 'String'>
    readonly active: FieldRef<"Store", 'Boolean'>
    readonly createdAt: FieldRef<"Store", 'DateTime'>
    readonly updatedAt: FieldRef<"Store", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Store findUnique
   */
  export type StoreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * Filter, which Store to fetch.
     */
    where: StoreWhereUniqueInput
  }

  /**
   * Store findUniqueOrThrow
   */
  export type StoreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * Filter, which Store to fetch.
     */
    where: StoreWhereUniqueInput
  }

  /**
   * Store findFirst
   */
  export type StoreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * Filter, which Store to fetch.
     */
    where?: StoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stores to fetch.
     */
    orderBy?: StoreOrderByWithRelationInput | StoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stores.
     */
    cursor?: StoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stores.
     */
    distinct?: StoreScalarFieldEnum | StoreScalarFieldEnum[]
  }

  /**
   * Store findFirstOrThrow
   */
  export type StoreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * Filter, which Store to fetch.
     */
    where?: StoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stores to fetch.
     */
    orderBy?: StoreOrderByWithRelationInput | StoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stores.
     */
    cursor?: StoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stores.
     */
    distinct?: StoreScalarFieldEnum | StoreScalarFieldEnum[]
  }

  /**
   * Store findMany
   */
  export type StoreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * Filter, which Stores to fetch.
     */
    where?: StoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stores to fetch.
     */
    orderBy?: StoreOrderByWithRelationInput | StoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stores.
     */
    cursor?: StoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stores.
     */
    skip?: number
    distinct?: StoreScalarFieldEnum | StoreScalarFieldEnum[]
  }

  /**
   * Store create
   */
  export type StoreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * The data needed to create a Store.
     */
    data: XOR<StoreCreateInput, StoreUncheckedCreateInput>
  }

  /**
   * Store createMany
   */
  export type StoreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stores.
     */
    data: StoreCreateManyInput | StoreCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Store createManyAndReturn
   */
  export type StoreCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Stores.
     */
    data: StoreCreateManyInput | StoreCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Store update
   */
  export type StoreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * The data needed to update a Store.
     */
    data: XOR<StoreUpdateInput, StoreUncheckedUpdateInput>
    /**
     * Choose, which Store to update.
     */
    where: StoreWhereUniqueInput
  }

  /**
   * Store updateMany
   */
  export type StoreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stores.
     */
    data: XOR<StoreUpdateManyMutationInput, StoreUncheckedUpdateManyInput>
    /**
     * Filter which Stores to update
     */
    where?: StoreWhereInput
  }

  /**
   * Store upsert
   */
  export type StoreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * The filter to search for the Store to update in case it exists.
     */
    where: StoreWhereUniqueInput
    /**
     * In case the Store found by the `where` argument doesn't exist, create a new Store with this data.
     */
    create: XOR<StoreCreateInput, StoreUncheckedCreateInput>
    /**
     * In case the Store was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StoreUpdateInput, StoreUncheckedUpdateInput>
  }

  /**
   * Store delete
   */
  export type StoreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    /**
     * Filter which Store to delete.
     */
    where: StoreWhereUniqueInput
  }

  /**
   * Store deleteMany
   */
  export type StoreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stores to delete
     */
    where?: StoreWhereInput
  }

  /**
   * Store.cards
   */
  export type Store$cardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    where?: CardWhereInput
    orderBy?: CardOrderByWithRelationInput | CardOrderByWithRelationInput[]
    cursor?: CardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CardScalarFieldEnum | CardScalarFieldEnum[]
  }

  /**
   * Store.transactions
   */
  export type Store$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Store.users
   */
  export type Store$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Store without action
   */
  export type StoreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    email: string | null
    passwordHash: string | null
    role: $Enums.Role | null
    storeId: string | null
    firstName: string | null
    lastName: string | null
    active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLogin: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    email: string | null
    passwordHash: string | null
    role: $Enums.Role | null
    storeId: string | null
    firstName: string | null
    lastName: string | null
    active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLogin: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    tenantId: number
    email: number
    passwordHash: number
    role: number
    storeId: number
    firstName: number
    lastName: number
    active: number
    createdAt: number
    updatedAt: number
    lastLogin: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    tenantId?: true
    email?: true
    passwordHash?: true
    role?: true
    storeId?: true
    firstName?: true
    lastName?: true
    active?: true
    createdAt?: true
    updatedAt?: true
    lastLogin?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    tenantId?: true
    email?: true
    passwordHash?: true
    role?: true
    storeId?: true
    firstName?: true
    lastName?: true
    active?: true
    createdAt?: true
    updatedAt?: true
    lastLogin?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    tenantId?: true
    email?: true
    passwordHash?: true
    role?: true
    storeId?: true
    firstName?: true
    lastName?: true
    active?: true
    createdAt?: true
    updatedAt?: true
    lastLogin?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    tenantId: string
    email: string
    passwordHash: string
    role: $Enums.Role
    storeId: string | null
    firstName: string | null
    lastName: string | null
    active: boolean
    createdAt: Date
    updatedAt: Date
    lastLogin: Date | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    storeId?: boolean
    firstName?: boolean
    lastName?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLogin?: boolean
    transactionsProcessed?: boolean | User$transactionsProcessedArgs<ExtArgs>
    store?: boolean | User$storeArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    storeId?: boolean
    firstName?: boolean
    lastName?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLogin?: boolean
    store?: boolean | User$storeArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    tenantId?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    storeId?: boolean
    firstName?: boolean
    lastName?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLogin?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transactionsProcessed?: boolean | User$transactionsProcessedArgs<ExtArgs>
    store?: boolean | User$storeArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    store?: boolean | User$storeArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      transactionsProcessed: Prisma.$TransactionPayload<ExtArgs>[]
      store: Prisma.$StorePayload<ExtArgs> | null
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      email: string
      passwordHash: string
      role: $Enums.Role
      storeId: string | null
      firstName: string | null
      lastName: string | null
      active: boolean
      createdAt: Date
      updatedAt: Date
      lastLogin: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    transactionsProcessed<T extends User$transactionsProcessedArgs<ExtArgs> = {}>(args?: Subset<T, User$transactionsProcessedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany"> | Null>
    store<T extends User$storeArgs<ExtArgs> = {}>(args?: Subset<T, User$storeArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly tenantId: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly storeId: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly active: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly lastLogin: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.transactionsProcessed
   */
  export type User$transactionsProcessedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * User.store
   */
  export type User$storeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    where?: StoreWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Customer
   */

  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerAvgAggregateOutputType = {
    totalSpend: Decimal | null
  }

  export type CustomerSumAggregateOutputType = {
    totalSpend: Decimal | null
  }

  export type CustomerMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    firstName: string | null
    lastName: string | null
    phone: string | null
    email: string | null
    tier: $Enums.Tier | null
    totalSpend: Decimal | null
    active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    firstName: string | null
    lastName: string | null
    phone: string | null
    email: string | null
    tier: $Enums.Tier | null
    totalSpend: Decimal | null
    active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerCountAggregateOutputType = {
    id: number
    tenantId: number
    firstName: number
    lastName: number
    phone: number
    email: number
    tier: number
    totalSpend: number
    active: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CustomerAvgAggregateInputType = {
    totalSpend?: true
  }

  export type CustomerSumAggregateInputType = {
    totalSpend?: true
  }

  export type CustomerMinAggregateInputType = {
    id?: true
    tenantId?: true
    firstName?: true
    lastName?: true
    phone?: true
    email?: true
    tier?: true
    totalSpend?: true
    active?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerMaxAggregateInputType = {
    id?: true
    tenantId?: true
    firstName?: true
    lastName?: true
    phone?: true
    email?: true
    tier?: true
    totalSpend?: true
    active?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerCountAggregateInputType = {
    id?: true
    tenantId?: true
    firstName?: true
    lastName?: true
    phone?: true
    email?: true
    tier?: true
    totalSpend?: true
    active?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CustomerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customer to aggregate.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type CustomerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithAggregationInput | CustomerOrderByWithAggregationInput[]
    by: CustomerScalarFieldEnum[] | CustomerScalarFieldEnum
    having?: CustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _avg?: CustomerAvgAggregateInputType
    _sum?: CustomerSumAggregateInputType
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }

  export type CustomerGroupByOutputType = {
    id: string
    tenantId: string
    firstName: string
    lastName: string
    phone: string | null
    email: string | null
    tier: $Enums.Tier
    totalSpend: Decimal
    active: boolean
    createdAt: Date
    updatedAt: Date
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends CustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type CustomerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    email?: boolean
    tier?: boolean
    totalSpend?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    cards?: boolean | Customer$cardsArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    notifications?: boolean | Customer$notificationsArgs<ExtArgs>
    transactions?: boolean | Customer$transactionsArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    email?: boolean
    tier?: boolean
    totalSpend?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectScalar = {
    id?: boolean
    tenantId?: boolean
    firstName?: boolean
    lastName?: boolean
    phone?: boolean
    email?: boolean
    tier?: boolean
    totalSpend?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CustomerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cards?: boolean | Customer$cardsArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    notifications?: boolean | Customer$notificationsArgs<ExtArgs>
    transactions?: boolean | Customer$transactionsArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CustomerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $CustomerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Customer"
    objects: {
      cards: Prisma.$CardPayload<ExtArgs>[]
      tenant: Prisma.$TenantPayload<ExtArgs>
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      transactions: Prisma.$TransactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      firstName: string
      lastName: string
      phone: string | null
      email: string | null
      tier: $Enums.Tier
      totalSpend: Prisma.Decimal
      active: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["customer"]>
    composites: {}
  }

  type CustomerGetPayload<S extends boolean | null | undefined | CustomerDefaultArgs> = $Result.GetResult<Prisma.$CustomerPayload, S>

  type CustomerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CustomerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CustomerCountAggregateInputType | true
    }

  export interface CustomerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Customer'], meta: { name: 'Customer' } }
    /**
     * Find zero or one Customer that matches the filter.
     * @param {CustomerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerFindUniqueArgs>(args: SelectSubset<T, CustomerFindUniqueArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Customer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CustomerFindUniqueOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerFindFirstArgs>(args?: SelectSubset<T, CustomerFindFirstArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Customer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerWithIdOnly = await prisma.customer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerFindManyArgs>(args?: SelectSubset<T, CustomerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Customer.
     * @param {CustomerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
     */
    create<T extends CustomerCreateArgs>(args: SelectSubset<T, CustomerCreateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Customers.
     * @param {CustomerCreateManyArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerCreateManyArgs>(args?: SelectSubset<T, CustomerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Customers and returns the data saved in the database.
     * @param {CustomerCreateManyAndReturnArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Customers and only return the `id`
     * const customerWithIdOnly = await prisma.customer.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Customer.
     * @param {CustomerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
     */
    delete<T extends CustomerDeleteArgs>(args: SelectSubset<T, CustomerDeleteArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Customer.
     * @param {CustomerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerUpdateArgs>(args: SelectSubset<T, CustomerUpdateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Customers.
     * @param {CustomerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerDeleteManyArgs>(args?: SelectSubset<T, CustomerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerUpdateManyArgs>(args: SelectSubset<T, CustomerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Customer.
     * @param {CustomerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
     */
    upsert<T extends CustomerUpsertArgs>(args: SelectSubset<T, CustomerUpsertArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends CustomerCountArgs>(
      args?: Subset<T, CustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerGroupByArgs['orderBy'] }
        : { orderBy?: CustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Customer model
   */
  readonly fields: CustomerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cards<T extends Customer$cardsArgs<ExtArgs> = {}>(args?: Subset<T, Customer$cardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findMany"> | Null>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    notifications<T extends Customer$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, Customer$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    transactions<T extends Customer$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, Customer$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Customer model
   */ 
  interface CustomerFieldRefs {
    readonly id: FieldRef<"Customer", 'String'>
    readonly tenantId: FieldRef<"Customer", 'String'>
    readonly firstName: FieldRef<"Customer", 'String'>
    readonly lastName: FieldRef<"Customer", 'String'>
    readonly phone: FieldRef<"Customer", 'String'>
    readonly email: FieldRef<"Customer", 'String'>
    readonly tier: FieldRef<"Customer", 'Tier'>
    readonly totalSpend: FieldRef<"Customer", 'Decimal'>
    readonly active: FieldRef<"Customer", 'Boolean'>
    readonly createdAt: FieldRef<"Customer", 'DateTime'>
    readonly updatedAt: FieldRef<"Customer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Customer findUnique
   */
  export type CustomerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findUniqueOrThrow
   */
  export type CustomerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findFirst
   */
  export type CustomerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findFirstOrThrow
   */
  export type CustomerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findMany
   */
  export type CustomerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customers to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer create
   */
  export type CustomerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to create a Customer.
     */
    data: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
  }

  /**
   * Customer createMany
   */
  export type CustomerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Customer createManyAndReturn
   */
  export type CustomerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Customer update
   */
  export type CustomerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to update a Customer.
     */
    data: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
    /**
     * Choose, which Customer to update.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer updateMany
   */
  export type CustomerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
  }

  /**
   * Customer upsert
   */
  export type CustomerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The filter to search for the Customer to update in case it exists.
     */
    where: CustomerWhereUniqueInput
    /**
     * In case the Customer found by the `where` argument doesn't exist, create a new Customer with this data.
     */
    create: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
    /**
     * In case the Customer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
  }

  /**
   * Customer delete
   */
  export type CustomerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter which Customer to delete.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer deleteMany
   */
  export type CustomerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customers to delete
     */
    where?: CustomerWhereInput
  }

  /**
   * Customer.cards
   */
  export type Customer$cardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    where?: CardWhereInput
    orderBy?: CardOrderByWithRelationInput | CardOrderByWithRelationInput[]
    cursor?: CardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CardScalarFieldEnum | CardScalarFieldEnum[]
  }

  /**
   * Customer.notifications
   */
  export type Customer$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Customer.transactions
   */
  export type Customer$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Customer without action
   */
  export type CustomerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
  }


  /**
   * Model Card
   */

  export type AggregateCard = {
    _count: CardCountAggregateOutputType | null
    _avg: CardAvgAggregateOutputType | null
    _sum: CardSumAggregateOutputType | null
    _min: CardMinAggregateOutputType | null
    _max: CardMaxAggregateOutputType | null
  }

  export type CardAvgAggregateOutputType = {
    balanceCents: number | null
  }

  export type CardSumAggregateOutputType = {
    balanceCents: number | null
  }

  export type CardMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    cardUid: string | null
    customerId: string | null
    activatedAt: Date | null
    storeId: string | null
    status: $Enums.CardStatus | null
    qrUrl: string | null
    balanceCents: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CardMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    cardUid: string | null
    customerId: string | null
    activatedAt: Date | null
    storeId: string | null
    status: $Enums.CardStatus | null
    qrUrl: string | null
    balanceCents: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CardCountAggregateOutputType = {
    id: number
    tenantId: number
    cardUid: number
    customerId: number
    activatedAt: number
    storeId: number
    status: number
    qrUrl: number
    balanceCents: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CardAvgAggregateInputType = {
    balanceCents?: true
  }

  export type CardSumAggregateInputType = {
    balanceCents?: true
  }

  export type CardMinAggregateInputType = {
    id?: true
    tenantId?: true
    cardUid?: true
    customerId?: true
    activatedAt?: true
    storeId?: true
    status?: true
    qrUrl?: true
    balanceCents?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CardMaxAggregateInputType = {
    id?: true
    tenantId?: true
    cardUid?: true
    customerId?: true
    activatedAt?: true
    storeId?: true
    status?: true
    qrUrl?: true
    balanceCents?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CardCountAggregateInputType = {
    id?: true
    tenantId?: true
    cardUid?: true
    customerId?: true
    activatedAt?: true
    storeId?: true
    status?: true
    qrUrl?: true
    balanceCents?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Card to aggregate.
     */
    where?: CardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cards to fetch.
     */
    orderBy?: CardOrderByWithRelationInput | CardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cards
    **/
    _count?: true | CardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CardMaxAggregateInputType
  }

  export type GetCardAggregateType<T extends CardAggregateArgs> = {
        [P in keyof T & keyof AggregateCard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCard[P]>
      : GetScalarType<T[P], AggregateCard[P]>
  }




  export type CardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardWhereInput
    orderBy?: CardOrderByWithAggregationInput | CardOrderByWithAggregationInput[]
    by: CardScalarFieldEnum[] | CardScalarFieldEnum
    having?: CardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CardCountAggregateInputType | true
    _avg?: CardAvgAggregateInputType
    _sum?: CardSumAggregateInputType
    _min?: CardMinAggregateInputType
    _max?: CardMaxAggregateInputType
  }

  export type CardGroupByOutputType = {
    id: string
    tenantId: string
    cardUid: string
    customerId: string | null
    activatedAt: Date | null
    storeId: string | null
    status: $Enums.CardStatus
    qrUrl: string | null
    balanceCents: number
    createdAt: Date
    updatedAt: Date
    _count: CardCountAggregateOutputType | null
    _avg: CardAvgAggregateOutputType | null
    _sum: CardSumAggregateOutputType | null
    _min: CardMinAggregateOutputType | null
    _max: CardMaxAggregateOutputType | null
  }

  type GetCardGroupByPayload<T extends CardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CardGroupByOutputType[P]>
            : GetScalarType<T[P], CardGroupByOutputType[P]>
        }
      >
    >


  export type CardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    cardUid?: boolean
    customerId?: boolean
    activatedAt?: boolean
    storeId?: boolean
    status?: boolean
    qrUrl?: boolean
    balanceCents?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | Card$customerArgs<ExtArgs>
    store?: boolean | Card$storeArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    transactions?: boolean | Card$transactionsArgs<ExtArgs>
    _count?: boolean | CardCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["card"]>

  export type CardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    cardUid?: boolean
    customerId?: boolean
    activatedAt?: boolean
    storeId?: boolean
    status?: boolean
    qrUrl?: boolean
    balanceCents?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | Card$customerArgs<ExtArgs>
    store?: boolean | Card$storeArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["card"]>

  export type CardSelectScalar = {
    id?: boolean
    tenantId?: boolean
    cardUid?: boolean
    customerId?: boolean
    activatedAt?: boolean
    storeId?: boolean
    status?: boolean
    qrUrl?: boolean
    balanceCents?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | Card$customerArgs<ExtArgs>
    store?: boolean | Card$storeArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    transactions?: boolean | Card$transactionsArgs<ExtArgs>
    _count?: boolean | CardCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CardIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | Card$customerArgs<ExtArgs>
    store?: boolean | Card$storeArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $CardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Card"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs> | null
      store: Prisma.$StorePayload<ExtArgs> | null
      tenant: Prisma.$TenantPayload<ExtArgs>
      transactions: Prisma.$TransactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      cardUid: string
      customerId: string | null
      activatedAt: Date | null
      storeId: string | null
      status: $Enums.CardStatus
      qrUrl: string | null
      balanceCents: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["card"]>
    composites: {}
  }

  type CardGetPayload<S extends boolean | null | undefined | CardDefaultArgs> = $Result.GetResult<Prisma.$CardPayload, S>

  type CardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CardFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CardCountAggregateInputType | true
    }

  export interface CardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Card'], meta: { name: 'Card' } }
    /**
     * Find zero or one Card that matches the filter.
     * @param {CardFindUniqueArgs} args - Arguments to find a Card
     * @example
     * // Get one Card
     * const card = await prisma.card.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CardFindUniqueArgs>(args: SelectSubset<T, CardFindUniqueArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Card that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CardFindUniqueOrThrowArgs} args - Arguments to find a Card
     * @example
     * // Get one Card
     * const card = await prisma.card.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CardFindUniqueOrThrowArgs>(args: SelectSubset<T, CardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Card that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardFindFirstArgs} args - Arguments to find a Card
     * @example
     * // Get one Card
     * const card = await prisma.card.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CardFindFirstArgs>(args?: SelectSubset<T, CardFindFirstArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Card that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardFindFirstOrThrowArgs} args - Arguments to find a Card
     * @example
     * // Get one Card
     * const card = await prisma.card.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CardFindFirstOrThrowArgs>(args?: SelectSubset<T, CardFindFirstOrThrowArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Cards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cards
     * const cards = await prisma.card.findMany()
     * 
     * // Get first 10 Cards
     * const cards = await prisma.card.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cardWithIdOnly = await prisma.card.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CardFindManyArgs>(args?: SelectSubset<T, CardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Card.
     * @param {CardCreateArgs} args - Arguments to create a Card.
     * @example
     * // Create one Card
     * const Card = await prisma.card.create({
     *   data: {
     *     // ... data to create a Card
     *   }
     * })
     * 
     */
    create<T extends CardCreateArgs>(args: SelectSubset<T, CardCreateArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Cards.
     * @param {CardCreateManyArgs} args - Arguments to create many Cards.
     * @example
     * // Create many Cards
     * const card = await prisma.card.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CardCreateManyArgs>(args?: SelectSubset<T, CardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cards and returns the data saved in the database.
     * @param {CardCreateManyAndReturnArgs} args - Arguments to create many Cards.
     * @example
     * // Create many Cards
     * const card = await prisma.card.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cards and only return the `id`
     * const cardWithIdOnly = await prisma.card.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CardCreateManyAndReturnArgs>(args?: SelectSubset<T, CardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Card.
     * @param {CardDeleteArgs} args - Arguments to delete one Card.
     * @example
     * // Delete one Card
     * const Card = await prisma.card.delete({
     *   where: {
     *     // ... filter to delete one Card
     *   }
     * })
     * 
     */
    delete<T extends CardDeleteArgs>(args: SelectSubset<T, CardDeleteArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Card.
     * @param {CardUpdateArgs} args - Arguments to update one Card.
     * @example
     * // Update one Card
     * const card = await prisma.card.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CardUpdateArgs>(args: SelectSubset<T, CardUpdateArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Cards.
     * @param {CardDeleteManyArgs} args - Arguments to filter Cards to delete.
     * @example
     * // Delete a few Cards
     * const { count } = await prisma.card.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CardDeleteManyArgs>(args?: SelectSubset<T, CardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cards
     * const card = await prisma.card.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CardUpdateManyArgs>(args: SelectSubset<T, CardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Card.
     * @param {CardUpsertArgs} args - Arguments to update or create a Card.
     * @example
     * // Update or create a Card
     * const card = await prisma.card.upsert({
     *   create: {
     *     // ... data to create a Card
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Card we want to update
     *   }
     * })
     */
    upsert<T extends CardUpsertArgs>(args: SelectSubset<T, CardUpsertArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Cards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardCountArgs} args - Arguments to filter Cards to count.
     * @example
     * // Count the number of Cards
     * const count = await prisma.card.count({
     *   where: {
     *     // ... the filter for the Cards we want to count
     *   }
     * })
    **/
    count<T extends CardCountArgs>(
      args?: Subset<T, CardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Card.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CardAggregateArgs>(args: Subset<T, CardAggregateArgs>): Prisma.PrismaPromise<GetCardAggregateType<T>>

    /**
     * Group by Card.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CardGroupByArgs['orderBy'] }
        : { orderBy?: CardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Card model
   */
  readonly fields: CardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Card.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends Card$customerArgs<ExtArgs> = {}>(args?: Subset<T, Card$customerArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    store<T extends Card$storeArgs<ExtArgs> = {}>(args?: Subset<T, Card$storeArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    transactions<T extends Card$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, Card$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Card model
   */ 
  interface CardFieldRefs {
    readonly id: FieldRef<"Card", 'String'>
    readonly tenantId: FieldRef<"Card", 'String'>
    readonly cardUid: FieldRef<"Card", 'String'>
    readonly customerId: FieldRef<"Card", 'String'>
    readonly activatedAt: FieldRef<"Card", 'DateTime'>
    readonly storeId: FieldRef<"Card", 'String'>
    readonly status: FieldRef<"Card", 'CardStatus'>
    readonly qrUrl: FieldRef<"Card", 'String'>
    readonly balanceCents: FieldRef<"Card", 'Int'>
    readonly createdAt: FieldRef<"Card", 'DateTime'>
    readonly updatedAt: FieldRef<"Card", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Card findUnique
   */
  export type CardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * Filter, which Card to fetch.
     */
    where: CardWhereUniqueInput
  }

  /**
   * Card findUniqueOrThrow
   */
  export type CardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * Filter, which Card to fetch.
     */
    where: CardWhereUniqueInput
  }

  /**
   * Card findFirst
   */
  export type CardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * Filter, which Card to fetch.
     */
    where?: CardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cards to fetch.
     */
    orderBy?: CardOrderByWithRelationInput | CardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cards.
     */
    cursor?: CardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cards.
     */
    distinct?: CardScalarFieldEnum | CardScalarFieldEnum[]
  }

  /**
   * Card findFirstOrThrow
   */
  export type CardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * Filter, which Card to fetch.
     */
    where?: CardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cards to fetch.
     */
    orderBy?: CardOrderByWithRelationInput | CardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cards.
     */
    cursor?: CardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cards.
     */
    distinct?: CardScalarFieldEnum | CardScalarFieldEnum[]
  }

  /**
   * Card findMany
   */
  export type CardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * Filter, which Cards to fetch.
     */
    where?: CardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cards to fetch.
     */
    orderBy?: CardOrderByWithRelationInput | CardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cards.
     */
    cursor?: CardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cards.
     */
    skip?: number
    distinct?: CardScalarFieldEnum | CardScalarFieldEnum[]
  }

  /**
   * Card create
   */
  export type CardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * The data needed to create a Card.
     */
    data: XOR<CardCreateInput, CardUncheckedCreateInput>
  }

  /**
   * Card createMany
   */
  export type CardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cards.
     */
    data: CardCreateManyInput | CardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Card createManyAndReturn
   */
  export type CardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Cards.
     */
    data: CardCreateManyInput | CardCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Card update
   */
  export type CardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * The data needed to update a Card.
     */
    data: XOR<CardUpdateInput, CardUncheckedUpdateInput>
    /**
     * Choose, which Card to update.
     */
    where: CardWhereUniqueInput
  }

  /**
   * Card updateMany
   */
  export type CardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cards.
     */
    data: XOR<CardUpdateManyMutationInput, CardUncheckedUpdateManyInput>
    /**
     * Filter which Cards to update
     */
    where?: CardWhereInput
  }

  /**
   * Card upsert
   */
  export type CardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * The filter to search for the Card to update in case it exists.
     */
    where: CardWhereUniqueInput
    /**
     * In case the Card found by the `where` argument doesn't exist, create a new Card with this data.
     */
    create: XOR<CardCreateInput, CardUncheckedCreateInput>
    /**
     * In case the Card was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CardUpdateInput, CardUncheckedUpdateInput>
  }

  /**
   * Card delete
   */
  export type CardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * Filter which Card to delete.
     */
    where: CardWhereUniqueInput
  }

  /**
   * Card deleteMany
   */
  export type CardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cards to delete
     */
    where?: CardWhereInput
  }

  /**
   * Card.customer
   */
  export type Card$customerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    where?: CustomerWhereInput
  }

  /**
   * Card.store
   */
  export type Card$storeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Store
     */
    select?: StoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoreInclude<ExtArgs> | null
    where?: StoreWhereInput
  }

  /**
   * Card.transactions
   */
  export type Card$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Card without action
   */
  export type CardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
  }


  /**
   * Model Transaction
   */

  export type AggregateTransaction = {
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  export type TransactionAvgAggregateOutputType = {
    amountCents: number | null
    cashbackCents: number | null
    beforeBalanceCents: number | null
    afterBalanceCents: number | null
  }

  export type TransactionSumAggregateOutputType = {
    amountCents: number | null
    cashbackCents: number | null
    beforeBalanceCents: number | null
    afterBalanceCents: number | null
  }

  export type TransactionMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    storeId: string | null
    cardId: string | null
    customerId: string | null
    cashierId: string | null
    type: $Enums.TxType | null
    category: $Enums.TxCategory | null
    amountCents: number | null
    cashbackCents: number | null
    beforeBalanceCents: number | null
    afterBalanceCents: number | null
    note: string | null
    sourceIp: string | null
    createdAt: Date | null
  }

  export type TransactionMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    storeId: string | null
    cardId: string | null
    customerId: string | null
    cashierId: string | null
    type: $Enums.TxType | null
    category: $Enums.TxCategory | null
    amountCents: number | null
    cashbackCents: number | null
    beforeBalanceCents: number | null
    afterBalanceCents: number | null
    note: string | null
    sourceIp: string | null
    createdAt: Date | null
  }

  export type TransactionCountAggregateOutputType = {
    id: number
    tenantId: number
    storeId: number
    cardId: number
    customerId: number
    cashierId: number
    type: number
    category: number
    amountCents: number
    cashbackCents: number
    beforeBalanceCents: number
    afterBalanceCents: number
    note: number
    sourceIp: number
    createdAt: number
    _all: number
  }


  export type TransactionAvgAggregateInputType = {
    amountCents?: true
    cashbackCents?: true
    beforeBalanceCents?: true
    afterBalanceCents?: true
  }

  export type TransactionSumAggregateInputType = {
    amountCents?: true
    cashbackCents?: true
    beforeBalanceCents?: true
    afterBalanceCents?: true
  }

  export type TransactionMinAggregateInputType = {
    id?: true
    tenantId?: true
    storeId?: true
    cardId?: true
    customerId?: true
    cashierId?: true
    type?: true
    category?: true
    amountCents?: true
    cashbackCents?: true
    beforeBalanceCents?: true
    afterBalanceCents?: true
    note?: true
    sourceIp?: true
    createdAt?: true
  }

  export type TransactionMaxAggregateInputType = {
    id?: true
    tenantId?: true
    storeId?: true
    cardId?: true
    customerId?: true
    cashierId?: true
    type?: true
    category?: true
    amountCents?: true
    cashbackCents?: true
    beforeBalanceCents?: true
    afterBalanceCents?: true
    note?: true
    sourceIp?: true
    createdAt?: true
  }

  export type TransactionCountAggregateInputType = {
    id?: true
    tenantId?: true
    storeId?: true
    cardId?: true
    customerId?: true
    cashierId?: true
    type?: true
    category?: true
    amountCents?: true
    cashbackCents?: true
    beforeBalanceCents?: true
    afterBalanceCents?: true
    note?: true
    sourceIp?: true
    createdAt?: true
    _all?: true
  }

  export type TransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transaction to aggregate.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transactions
    **/
    _count?: true | TransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionMaxAggregateInputType
  }

  export type GetTransactionAggregateType<T extends TransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaction[P]>
      : GetScalarType<T[P], AggregateTransaction[P]>
  }




  export type TransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithAggregationInput | TransactionOrderByWithAggregationInput[]
    by: TransactionScalarFieldEnum[] | TransactionScalarFieldEnum
    having?: TransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionCountAggregateInputType | true
    _avg?: TransactionAvgAggregateInputType
    _sum?: TransactionSumAggregateInputType
    _min?: TransactionMinAggregateInputType
    _max?: TransactionMaxAggregateInputType
  }

  export type TransactionGroupByOutputType = {
    id: string
    tenantId: string
    storeId: string
    cardId: string
    customerId: string
    cashierId: string
    type: $Enums.TxType
    category: $Enums.TxCategory
    amountCents: number
    cashbackCents: number
    beforeBalanceCents: number
    afterBalanceCents: number
    note: string | null
    sourceIp: string | null
    createdAt: Date
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  type GetTransactionGroupByPayload<T extends TransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionGroupByOutputType[P]>
        }
      >
    >


  export type TransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    storeId?: boolean
    cardId?: boolean
    customerId?: boolean
    cashierId?: boolean
    type?: boolean
    category?: boolean
    amountCents?: boolean
    cashbackCents?: boolean
    beforeBalanceCents?: boolean
    afterBalanceCents?: boolean
    note?: boolean
    sourceIp?: boolean
    createdAt?: boolean
    card?: boolean | CardDefaultArgs<ExtArgs>
    cashier?: boolean | UserDefaultArgs<ExtArgs>
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    storeId?: boolean
    cardId?: boolean
    customerId?: boolean
    cashierId?: boolean
    type?: boolean
    category?: boolean
    amountCents?: boolean
    cashbackCents?: boolean
    beforeBalanceCents?: boolean
    afterBalanceCents?: boolean
    note?: boolean
    sourceIp?: boolean
    createdAt?: boolean
    card?: boolean | CardDefaultArgs<ExtArgs>
    cashier?: boolean | UserDefaultArgs<ExtArgs>
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectScalar = {
    id?: boolean
    tenantId?: boolean
    storeId?: boolean
    cardId?: boolean
    customerId?: boolean
    cashierId?: boolean
    type?: boolean
    category?: boolean
    amountCents?: boolean
    cashbackCents?: boolean
    beforeBalanceCents?: boolean
    afterBalanceCents?: boolean
    note?: boolean
    sourceIp?: boolean
    createdAt?: boolean
  }

  export type TransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    card?: boolean | CardDefaultArgs<ExtArgs>
    cashier?: boolean | UserDefaultArgs<ExtArgs>
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type TransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    card?: boolean | CardDefaultArgs<ExtArgs>
    cashier?: boolean | UserDefaultArgs<ExtArgs>
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    store?: boolean | StoreDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $TransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transaction"
    objects: {
      card: Prisma.$CardPayload<ExtArgs>
      cashier: Prisma.$UserPayload<ExtArgs>
      customer: Prisma.$CustomerPayload<ExtArgs>
      store: Prisma.$StorePayload<ExtArgs>
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      storeId: string
      cardId: string
      customerId: string
      cashierId: string
      type: $Enums.TxType
      category: $Enums.TxCategory
      amountCents: number
      cashbackCents: number
      beforeBalanceCents: number
      afterBalanceCents: number
      note: string | null
      sourceIp: string | null
      createdAt: Date
    }, ExtArgs["result"]["transaction"]>
    composites: {}
  }

  type TransactionGetPayload<S extends boolean | null | undefined | TransactionDefaultArgs> = $Result.GetResult<Prisma.$TransactionPayload, S>

  type TransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TransactionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TransactionCountAggregateInputType | true
    }

  export interface TransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transaction'], meta: { name: 'Transaction' } }
    /**
     * Find zero or one Transaction that matches the filter.
     * @param {TransactionFindUniqueArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransactionFindUniqueArgs>(args: SelectSubset<T, TransactionFindUniqueArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Transaction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TransactionFindUniqueOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, TransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Transaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransactionFindFirstArgs>(args?: SelectSubset<T, TransactionFindFirstArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Transaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, TransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transaction.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionWithIdOnly = await prisma.transaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransactionFindManyArgs>(args?: SelectSubset<T, TransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Transaction.
     * @param {TransactionCreateArgs} args - Arguments to create a Transaction.
     * @example
     * // Create one Transaction
     * const Transaction = await prisma.transaction.create({
     *   data: {
     *     // ... data to create a Transaction
     *   }
     * })
     * 
     */
    create<T extends TransactionCreateArgs>(args: SelectSubset<T, TransactionCreateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Transactions.
     * @param {TransactionCreateManyArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransactionCreateManyArgs>(args?: SelectSubset<T, TransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transactions and returns the data saved in the database.
     * @param {TransactionCreateManyAndReturnArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transactions and only return the `id`
     * const transactionWithIdOnly = await prisma.transaction.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, TransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Transaction.
     * @param {TransactionDeleteArgs} args - Arguments to delete one Transaction.
     * @example
     * // Delete one Transaction
     * const Transaction = await prisma.transaction.delete({
     *   where: {
     *     // ... filter to delete one Transaction
     *   }
     * })
     * 
     */
    delete<T extends TransactionDeleteArgs>(args: SelectSubset<T, TransactionDeleteArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Transaction.
     * @param {TransactionUpdateArgs} args - Arguments to update one Transaction.
     * @example
     * // Update one Transaction
     * const transaction = await prisma.transaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransactionUpdateArgs>(args: SelectSubset<T, TransactionUpdateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Transactions.
     * @param {TransactionDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransactionDeleteManyArgs>(args?: SelectSubset<T, TransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransactionUpdateManyArgs>(args: SelectSubset<T, TransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Transaction.
     * @param {TransactionUpsertArgs} args - Arguments to update or create a Transaction.
     * @example
     * // Update or create a Transaction
     * const transaction = await prisma.transaction.upsert({
     *   create: {
     *     // ... data to create a Transaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaction we want to update
     *   }
     * })
     */
    upsert<T extends TransactionUpsertArgs>(args: SelectSubset<T, TransactionUpsertArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transaction.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends TransactionCountArgs>(
      args?: Subset<T, TransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionAggregateArgs>(args: Subset<T, TransactionAggregateArgs>): Prisma.PrismaPromise<GetTransactionAggregateType<T>>

    /**
     * Group by Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionGroupByArgs['orderBy'] }
        : { orderBy?: TransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transaction model
   */
  readonly fields: TransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    card<T extends CardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CardDefaultArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    cashier<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    store<T extends StoreDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StoreDefaultArgs<ExtArgs>>): Prisma__StoreClient<$Result.GetResult<Prisma.$StorePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Transaction model
   */ 
  interface TransactionFieldRefs {
    readonly id: FieldRef<"Transaction", 'String'>
    readonly tenantId: FieldRef<"Transaction", 'String'>
    readonly storeId: FieldRef<"Transaction", 'String'>
    readonly cardId: FieldRef<"Transaction", 'String'>
    readonly customerId: FieldRef<"Transaction", 'String'>
    readonly cashierId: FieldRef<"Transaction", 'String'>
    readonly type: FieldRef<"Transaction", 'TxType'>
    readonly category: FieldRef<"Transaction", 'TxCategory'>
    readonly amountCents: FieldRef<"Transaction", 'Int'>
    readonly cashbackCents: FieldRef<"Transaction", 'Int'>
    readonly beforeBalanceCents: FieldRef<"Transaction", 'Int'>
    readonly afterBalanceCents: FieldRef<"Transaction", 'Int'>
    readonly note: FieldRef<"Transaction", 'String'>
    readonly sourceIp: FieldRef<"Transaction", 'String'>
    readonly createdAt: FieldRef<"Transaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Transaction findUnique
   */
  export type TransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findUniqueOrThrow
   */
  export type TransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findFirst
   */
  export type TransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findFirstOrThrow
   */
  export type TransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findMany
   */
  export type TransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction create
   */
  export type TransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a Transaction.
     */
    data: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
  }

  /**
   * Transaction createMany
   */
  export type TransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Transaction createManyAndReturn
   */
  export type TransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transaction update
   */
  export type TransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a Transaction.
     */
    data: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
    /**
     * Choose, which Transaction to update.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction updateMany
   */
  export type TransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
  }

  /**
   * Transaction upsert
   */
  export type TransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the Transaction to update in case it exists.
     */
    where: TransactionWhereUniqueInput
    /**
     * In case the Transaction found by the `where` argument doesn't exist, create a new Transaction with this data.
     */
    create: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
    /**
     * In case the Transaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
  }

  /**
   * Transaction delete
   */
  export type TransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter which Transaction to delete.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction deleteMany
   */
  export type TransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transactions to delete
     */
    where?: TransactionWhereInput
  }

  /**
   * Transaction without action
   */
  export type TransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
  }


  /**
   * Model TierRule
   */

  export type AggregateTierRule = {
    _count: TierRuleCountAggregateOutputType | null
    _avg: TierRuleAvgAggregateOutputType | null
    _sum: TierRuleSumAggregateOutputType | null
    _min: TierRuleMinAggregateOutputType | null
    _max: TierRuleMaxAggregateOutputType | null
  }

  export type TierRuleAvgAggregateOutputType = {
    minTotalSpendCents: number | null
    baseRateBps: number | null
  }

  export type TierRuleSumAggregateOutputType = {
    minTotalSpendCents: number | null
    baseRateBps: number | null
  }

  export type TierRuleMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    tier: $Enums.Tier | null
    name: string | null
    minTotalSpendCents: number | null
    baseRateBps: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TierRuleMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    tier: $Enums.Tier | null
    name: string | null
    minTotalSpendCents: number | null
    baseRateBps: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TierRuleCountAggregateOutputType = {
    id: number
    tenantId: number
    tier: number
    name: number
    minTotalSpendCents: number
    baseRateBps: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TierRuleAvgAggregateInputType = {
    minTotalSpendCents?: true
    baseRateBps?: true
  }

  export type TierRuleSumAggregateInputType = {
    minTotalSpendCents?: true
    baseRateBps?: true
  }

  export type TierRuleMinAggregateInputType = {
    id?: true
    tenantId?: true
    tier?: true
    name?: true
    minTotalSpendCents?: true
    baseRateBps?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TierRuleMaxAggregateInputType = {
    id?: true
    tenantId?: true
    tier?: true
    name?: true
    minTotalSpendCents?: true
    baseRateBps?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TierRuleCountAggregateInputType = {
    id?: true
    tenantId?: true
    tier?: true
    name?: true
    minTotalSpendCents?: true
    baseRateBps?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TierRuleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TierRule to aggregate.
     */
    where?: TierRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TierRules to fetch.
     */
    orderBy?: TierRuleOrderByWithRelationInput | TierRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TierRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TierRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TierRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TierRules
    **/
    _count?: true | TierRuleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TierRuleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TierRuleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TierRuleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TierRuleMaxAggregateInputType
  }

  export type GetTierRuleAggregateType<T extends TierRuleAggregateArgs> = {
        [P in keyof T & keyof AggregateTierRule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTierRule[P]>
      : GetScalarType<T[P], AggregateTierRule[P]>
  }




  export type TierRuleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TierRuleWhereInput
    orderBy?: TierRuleOrderByWithAggregationInput | TierRuleOrderByWithAggregationInput[]
    by: TierRuleScalarFieldEnum[] | TierRuleScalarFieldEnum
    having?: TierRuleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TierRuleCountAggregateInputType | true
    _avg?: TierRuleAvgAggregateInputType
    _sum?: TierRuleSumAggregateInputType
    _min?: TierRuleMinAggregateInputType
    _max?: TierRuleMaxAggregateInputType
  }

  export type TierRuleGroupByOutputType = {
    id: string
    tenantId: string
    tier: $Enums.Tier
    name: string
    minTotalSpendCents: number
    baseRateBps: number
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: TierRuleCountAggregateOutputType | null
    _avg: TierRuleAvgAggregateOutputType | null
    _sum: TierRuleSumAggregateOutputType | null
    _min: TierRuleMinAggregateOutputType | null
    _max: TierRuleMaxAggregateOutputType | null
  }

  type GetTierRuleGroupByPayload<T extends TierRuleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TierRuleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TierRuleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TierRuleGroupByOutputType[P]>
            : GetScalarType<T[P], TierRuleGroupByOutputType[P]>
        }
      >
    >


  export type TierRuleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    tier?: boolean
    name?: boolean
    minTotalSpendCents?: boolean
    baseRateBps?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tierRule"]>

  export type TierRuleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    tier?: boolean
    name?: boolean
    minTotalSpendCents?: boolean
    baseRateBps?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tierRule"]>

  export type TierRuleSelectScalar = {
    id?: boolean
    tenantId?: boolean
    tier?: boolean
    name?: boolean
    minTotalSpendCents?: boolean
    baseRateBps?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TierRuleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type TierRuleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $TierRulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TierRule"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      tier: $Enums.Tier
      name: string
      minTotalSpendCents: number
      baseRateBps: number
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tierRule"]>
    composites: {}
  }

  type TierRuleGetPayload<S extends boolean | null | undefined | TierRuleDefaultArgs> = $Result.GetResult<Prisma.$TierRulePayload, S>

  type TierRuleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TierRuleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TierRuleCountAggregateInputType | true
    }

  export interface TierRuleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TierRule'], meta: { name: 'TierRule' } }
    /**
     * Find zero or one TierRule that matches the filter.
     * @param {TierRuleFindUniqueArgs} args - Arguments to find a TierRule
     * @example
     * // Get one TierRule
     * const tierRule = await prisma.tierRule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TierRuleFindUniqueArgs>(args: SelectSubset<T, TierRuleFindUniqueArgs<ExtArgs>>): Prisma__TierRuleClient<$Result.GetResult<Prisma.$TierRulePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TierRule that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TierRuleFindUniqueOrThrowArgs} args - Arguments to find a TierRule
     * @example
     * // Get one TierRule
     * const tierRule = await prisma.tierRule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TierRuleFindUniqueOrThrowArgs>(args: SelectSubset<T, TierRuleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TierRuleClient<$Result.GetResult<Prisma.$TierRulePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TierRule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TierRuleFindFirstArgs} args - Arguments to find a TierRule
     * @example
     * // Get one TierRule
     * const tierRule = await prisma.tierRule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TierRuleFindFirstArgs>(args?: SelectSubset<T, TierRuleFindFirstArgs<ExtArgs>>): Prisma__TierRuleClient<$Result.GetResult<Prisma.$TierRulePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TierRule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TierRuleFindFirstOrThrowArgs} args - Arguments to find a TierRule
     * @example
     * // Get one TierRule
     * const tierRule = await prisma.tierRule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TierRuleFindFirstOrThrowArgs>(args?: SelectSubset<T, TierRuleFindFirstOrThrowArgs<ExtArgs>>): Prisma__TierRuleClient<$Result.GetResult<Prisma.$TierRulePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TierRules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TierRuleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TierRules
     * const tierRules = await prisma.tierRule.findMany()
     * 
     * // Get first 10 TierRules
     * const tierRules = await prisma.tierRule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tierRuleWithIdOnly = await prisma.tierRule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TierRuleFindManyArgs>(args?: SelectSubset<T, TierRuleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TierRulePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TierRule.
     * @param {TierRuleCreateArgs} args - Arguments to create a TierRule.
     * @example
     * // Create one TierRule
     * const TierRule = await prisma.tierRule.create({
     *   data: {
     *     // ... data to create a TierRule
     *   }
     * })
     * 
     */
    create<T extends TierRuleCreateArgs>(args: SelectSubset<T, TierRuleCreateArgs<ExtArgs>>): Prisma__TierRuleClient<$Result.GetResult<Prisma.$TierRulePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TierRules.
     * @param {TierRuleCreateManyArgs} args - Arguments to create many TierRules.
     * @example
     * // Create many TierRules
     * const tierRule = await prisma.tierRule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TierRuleCreateManyArgs>(args?: SelectSubset<T, TierRuleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TierRules and returns the data saved in the database.
     * @param {TierRuleCreateManyAndReturnArgs} args - Arguments to create many TierRules.
     * @example
     * // Create many TierRules
     * const tierRule = await prisma.tierRule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TierRules and only return the `id`
     * const tierRuleWithIdOnly = await prisma.tierRule.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TierRuleCreateManyAndReturnArgs>(args?: SelectSubset<T, TierRuleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TierRulePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TierRule.
     * @param {TierRuleDeleteArgs} args - Arguments to delete one TierRule.
     * @example
     * // Delete one TierRule
     * const TierRule = await prisma.tierRule.delete({
     *   where: {
     *     // ... filter to delete one TierRule
     *   }
     * })
     * 
     */
    delete<T extends TierRuleDeleteArgs>(args: SelectSubset<T, TierRuleDeleteArgs<ExtArgs>>): Prisma__TierRuleClient<$Result.GetResult<Prisma.$TierRulePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TierRule.
     * @param {TierRuleUpdateArgs} args - Arguments to update one TierRule.
     * @example
     * // Update one TierRule
     * const tierRule = await prisma.tierRule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TierRuleUpdateArgs>(args: SelectSubset<T, TierRuleUpdateArgs<ExtArgs>>): Prisma__TierRuleClient<$Result.GetResult<Prisma.$TierRulePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TierRules.
     * @param {TierRuleDeleteManyArgs} args - Arguments to filter TierRules to delete.
     * @example
     * // Delete a few TierRules
     * const { count } = await prisma.tierRule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TierRuleDeleteManyArgs>(args?: SelectSubset<T, TierRuleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TierRules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TierRuleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TierRules
     * const tierRule = await prisma.tierRule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TierRuleUpdateManyArgs>(args: SelectSubset<T, TierRuleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TierRule.
     * @param {TierRuleUpsertArgs} args - Arguments to update or create a TierRule.
     * @example
     * // Update or create a TierRule
     * const tierRule = await prisma.tierRule.upsert({
     *   create: {
     *     // ... data to create a TierRule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TierRule we want to update
     *   }
     * })
     */
    upsert<T extends TierRuleUpsertArgs>(args: SelectSubset<T, TierRuleUpsertArgs<ExtArgs>>): Prisma__TierRuleClient<$Result.GetResult<Prisma.$TierRulePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TierRules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TierRuleCountArgs} args - Arguments to filter TierRules to count.
     * @example
     * // Count the number of TierRules
     * const count = await prisma.tierRule.count({
     *   where: {
     *     // ... the filter for the TierRules we want to count
     *   }
     * })
    **/
    count<T extends TierRuleCountArgs>(
      args?: Subset<T, TierRuleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TierRuleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TierRule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TierRuleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TierRuleAggregateArgs>(args: Subset<T, TierRuleAggregateArgs>): Prisma.PrismaPromise<GetTierRuleAggregateType<T>>

    /**
     * Group by TierRule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TierRuleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TierRuleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TierRuleGroupByArgs['orderBy'] }
        : { orderBy?: TierRuleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TierRuleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTierRuleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TierRule model
   */
  readonly fields: TierRuleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TierRule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TierRuleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TierRule model
   */ 
  interface TierRuleFieldRefs {
    readonly id: FieldRef<"TierRule", 'String'>
    readonly tenantId: FieldRef<"TierRule", 'String'>
    readonly tier: FieldRef<"TierRule", 'Tier'>
    readonly name: FieldRef<"TierRule", 'String'>
    readonly minTotalSpendCents: FieldRef<"TierRule", 'Int'>
    readonly baseRateBps: FieldRef<"TierRule", 'Int'>
    readonly isActive: FieldRef<"TierRule", 'Boolean'>
    readonly createdAt: FieldRef<"TierRule", 'DateTime'>
    readonly updatedAt: FieldRef<"TierRule", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TierRule findUnique
   */
  export type TierRuleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TierRule
     */
    select?: TierRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TierRuleInclude<ExtArgs> | null
    /**
     * Filter, which TierRule to fetch.
     */
    where: TierRuleWhereUniqueInput
  }

  /**
   * TierRule findUniqueOrThrow
   */
  export type TierRuleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TierRule
     */
    select?: TierRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TierRuleInclude<ExtArgs> | null
    /**
     * Filter, which TierRule to fetch.
     */
    where: TierRuleWhereUniqueInput
  }

  /**
   * TierRule findFirst
   */
  export type TierRuleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TierRule
     */
    select?: TierRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TierRuleInclude<ExtArgs> | null
    /**
     * Filter, which TierRule to fetch.
     */
    where?: TierRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TierRules to fetch.
     */
    orderBy?: TierRuleOrderByWithRelationInput | TierRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TierRules.
     */
    cursor?: TierRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TierRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TierRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TierRules.
     */
    distinct?: TierRuleScalarFieldEnum | TierRuleScalarFieldEnum[]
  }

  /**
   * TierRule findFirstOrThrow
   */
  export type TierRuleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TierRule
     */
    select?: TierRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TierRuleInclude<ExtArgs> | null
    /**
     * Filter, which TierRule to fetch.
     */
    where?: TierRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TierRules to fetch.
     */
    orderBy?: TierRuleOrderByWithRelationInput | TierRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TierRules.
     */
    cursor?: TierRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TierRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TierRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TierRules.
     */
    distinct?: TierRuleScalarFieldEnum | TierRuleScalarFieldEnum[]
  }

  /**
   * TierRule findMany
   */
  export type TierRuleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TierRule
     */
    select?: TierRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TierRuleInclude<ExtArgs> | null
    /**
     * Filter, which TierRules to fetch.
     */
    where?: TierRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TierRules to fetch.
     */
    orderBy?: TierRuleOrderByWithRelationInput | TierRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TierRules.
     */
    cursor?: TierRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TierRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TierRules.
     */
    skip?: number
    distinct?: TierRuleScalarFieldEnum | TierRuleScalarFieldEnum[]
  }

  /**
   * TierRule create
   */
  export type TierRuleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TierRule
     */
    select?: TierRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TierRuleInclude<ExtArgs> | null
    /**
     * The data needed to create a TierRule.
     */
    data: XOR<TierRuleCreateInput, TierRuleUncheckedCreateInput>
  }

  /**
   * TierRule createMany
   */
  export type TierRuleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TierRules.
     */
    data: TierRuleCreateManyInput | TierRuleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TierRule createManyAndReturn
   */
  export type TierRuleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TierRule
     */
    select?: TierRuleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TierRules.
     */
    data: TierRuleCreateManyInput | TierRuleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TierRuleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TierRule update
   */
  export type TierRuleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TierRule
     */
    select?: TierRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TierRuleInclude<ExtArgs> | null
    /**
     * The data needed to update a TierRule.
     */
    data: XOR<TierRuleUpdateInput, TierRuleUncheckedUpdateInput>
    /**
     * Choose, which TierRule to update.
     */
    where: TierRuleWhereUniqueInput
  }

  /**
   * TierRule updateMany
   */
  export type TierRuleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TierRules.
     */
    data: XOR<TierRuleUpdateManyMutationInput, TierRuleUncheckedUpdateManyInput>
    /**
     * Filter which TierRules to update
     */
    where?: TierRuleWhereInput
  }

  /**
   * TierRule upsert
   */
  export type TierRuleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TierRule
     */
    select?: TierRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TierRuleInclude<ExtArgs> | null
    /**
     * The filter to search for the TierRule to update in case it exists.
     */
    where: TierRuleWhereUniqueInput
    /**
     * In case the TierRule found by the `where` argument doesn't exist, create a new TierRule with this data.
     */
    create: XOR<TierRuleCreateInput, TierRuleUncheckedCreateInput>
    /**
     * In case the TierRule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TierRuleUpdateInput, TierRuleUncheckedUpdateInput>
  }

  /**
   * TierRule delete
   */
  export type TierRuleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TierRule
     */
    select?: TierRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TierRuleInclude<ExtArgs> | null
    /**
     * Filter which TierRule to delete.
     */
    where: TierRuleWhereUniqueInput
  }

  /**
   * TierRule deleteMany
   */
  export type TierRuleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TierRules to delete
     */
    where?: TierRuleWhereInput
  }

  /**
   * TierRule without action
   */
  export type TierRuleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TierRule
     */
    select?: TierRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TierRuleInclude<ExtArgs> | null
  }


  /**
   * Model CashbackRule
   */

  export type AggregateCashbackRule = {
    _count: CashbackRuleCountAggregateOutputType | null
    _avg: CashbackRuleAvgAggregateOutputType | null
    _sum: CashbackRuleSumAggregateOutputType | null
    _min: CashbackRuleMinAggregateOutputType | null
    _max: CashbackRuleMaxAggregateOutputType | null
  }

  export type CashbackRuleAvgAggregateOutputType = {
    baseRateBps: number | null
  }

  export type CashbackRuleSumAggregateOutputType = {
    baseRateBps: number | null
  }

  export type CashbackRuleMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    category: $Enums.TxCategory | null
    baseRateBps: number | null
    startAt: Date | null
    endAt: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CashbackRuleMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    category: $Enums.TxCategory | null
    baseRateBps: number | null
    startAt: Date | null
    endAt: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CashbackRuleCountAggregateOutputType = {
    id: number
    tenantId: number
    category: number
    baseRateBps: number
    startAt: number
    endAt: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CashbackRuleAvgAggregateInputType = {
    baseRateBps?: true
  }

  export type CashbackRuleSumAggregateInputType = {
    baseRateBps?: true
  }

  export type CashbackRuleMinAggregateInputType = {
    id?: true
    tenantId?: true
    category?: true
    baseRateBps?: true
    startAt?: true
    endAt?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CashbackRuleMaxAggregateInputType = {
    id?: true
    tenantId?: true
    category?: true
    baseRateBps?: true
    startAt?: true
    endAt?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CashbackRuleCountAggregateInputType = {
    id?: true
    tenantId?: true
    category?: true
    baseRateBps?: true
    startAt?: true
    endAt?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CashbackRuleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CashbackRule to aggregate.
     */
    where?: CashbackRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CashbackRules to fetch.
     */
    orderBy?: CashbackRuleOrderByWithRelationInput | CashbackRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CashbackRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CashbackRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CashbackRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CashbackRules
    **/
    _count?: true | CashbackRuleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CashbackRuleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CashbackRuleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CashbackRuleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CashbackRuleMaxAggregateInputType
  }

  export type GetCashbackRuleAggregateType<T extends CashbackRuleAggregateArgs> = {
        [P in keyof T & keyof AggregateCashbackRule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCashbackRule[P]>
      : GetScalarType<T[P], AggregateCashbackRule[P]>
  }




  export type CashbackRuleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CashbackRuleWhereInput
    orderBy?: CashbackRuleOrderByWithAggregationInput | CashbackRuleOrderByWithAggregationInput[]
    by: CashbackRuleScalarFieldEnum[] | CashbackRuleScalarFieldEnum
    having?: CashbackRuleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CashbackRuleCountAggregateInputType | true
    _avg?: CashbackRuleAvgAggregateInputType
    _sum?: CashbackRuleSumAggregateInputType
    _min?: CashbackRuleMinAggregateInputType
    _max?: CashbackRuleMaxAggregateInputType
  }

  export type CashbackRuleGroupByOutputType = {
    id: string
    tenantId: string
    category: $Enums.TxCategory
    baseRateBps: number
    startAt: Date | null
    endAt: Date | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: CashbackRuleCountAggregateOutputType | null
    _avg: CashbackRuleAvgAggregateOutputType | null
    _sum: CashbackRuleSumAggregateOutputType | null
    _min: CashbackRuleMinAggregateOutputType | null
    _max: CashbackRuleMaxAggregateOutputType | null
  }

  type GetCashbackRuleGroupByPayload<T extends CashbackRuleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CashbackRuleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CashbackRuleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CashbackRuleGroupByOutputType[P]>
            : GetScalarType<T[P], CashbackRuleGroupByOutputType[P]>
        }
      >
    >


  export type CashbackRuleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    category?: boolean
    baseRateBps?: boolean
    startAt?: boolean
    endAt?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cashbackRule"]>

  export type CashbackRuleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    category?: boolean
    baseRateBps?: boolean
    startAt?: boolean
    endAt?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cashbackRule"]>

  export type CashbackRuleSelectScalar = {
    id?: boolean
    tenantId?: boolean
    category?: boolean
    baseRateBps?: boolean
    startAt?: boolean
    endAt?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CashbackRuleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type CashbackRuleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $CashbackRulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CashbackRule"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      category: $Enums.TxCategory
      baseRateBps: number
      startAt: Date | null
      endAt: Date | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["cashbackRule"]>
    composites: {}
  }

  type CashbackRuleGetPayload<S extends boolean | null | undefined | CashbackRuleDefaultArgs> = $Result.GetResult<Prisma.$CashbackRulePayload, S>

  type CashbackRuleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CashbackRuleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CashbackRuleCountAggregateInputType | true
    }

  export interface CashbackRuleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CashbackRule'], meta: { name: 'CashbackRule' } }
    /**
     * Find zero or one CashbackRule that matches the filter.
     * @param {CashbackRuleFindUniqueArgs} args - Arguments to find a CashbackRule
     * @example
     * // Get one CashbackRule
     * const cashbackRule = await prisma.cashbackRule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CashbackRuleFindUniqueArgs>(args: SelectSubset<T, CashbackRuleFindUniqueArgs<ExtArgs>>): Prisma__CashbackRuleClient<$Result.GetResult<Prisma.$CashbackRulePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CashbackRule that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CashbackRuleFindUniqueOrThrowArgs} args - Arguments to find a CashbackRule
     * @example
     * // Get one CashbackRule
     * const cashbackRule = await prisma.cashbackRule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CashbackRuleFindUniqueOrThrowArgs>(args: SelectSubset<T, CashbackRuleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CashbackRuleClient<$Result.GetResult<Prisma.$CashbackRulePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CashbackRule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashbackRuleFindFirstArgs} args - Arguments to find a CashbackRule
     * @example
     * // Get one CashbackRule
     * const cashbackRule = await prisma.cashbackRule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CashbackRuleFindFirstArgs>(args?: SelectSubset<T, CashbackRuleFindFirstArgs<ExtArgs>>): Prisma__CashbackRuleClient<$Result.GetResult<Prisma.$CashbackRulePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CashbackRule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashbackRuleFindFirstOrThrowArgs} args - Arguments to find a CashbackRule
     * @example
     * // Get one CashbackRule
     * const cashbackRule = await prisma.cashbackRule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CashbackRuleFindFirstOrThrowArgs>(args?: SelectSubset<T, CashbackRuleFindFirstOrThrowArgs<ExtArgs>>): Prisma__CashbackRuleClient<$Result.GetResult<Prisma.$CashbackRulePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CashbackRules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashbackRuleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CashbackRules
     * const cashbackRules = await prisma.cashbackRule.findMany()
     * 
     * // Get first 10 CashbackRules
     * const cashbackRules = await prisma.cashbackRule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cashbackRuleWithIdOnly = await prisma.cashbackRule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CashbackRuleFindManyArgs>(args?: SelectSubset<T, CashbackRuleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CashbackRulePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CashbackRule.
     * @param {CashbackRuleCreateArgs} args - Arguments to create a CashbackRule.
     * @example
     * // Create one CashbackRule
     * const CashbackRule = await prisma.cashbackRule.create({
     *   data: {
     *     // ... data to create a CashbackRule
     *   }
     * })
     * 
     */
    create<T extends CashbackRuleCreateArgs>(args: SelectSubset<T, CashbackRuleCreateArgs<ExtArgs>>): Prisma__CashbackRuleClient<$Result.GetResult<Prisma.$CashbackRulePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CashbackRules.
     * @param {CashbackRuleCreateManyArgs} args - Arguments to create many CashbackRules.
     * @example
     * // Create many CashbackRules
     * const cashbackRule = await prisma.cashbackRule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CashbackRuleCreateManyArgs>(args?: SelectSubset<T, CashbackRuleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CashbackRules and returns the data saved in the database.
     * @param {CashbackRuleCreateManyAndReturnArgs} args - Arguments to create many CashbackRules.
     * @example
     * // Create many CashbackRules
     * const cashbackRule = await prisma.cashbackRule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CashbackRules and only return the `id`
     * const cashbackRuleWithIdOnly = await prisma.cashbackRule.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CashbackRuleCreateManyAndReturnArgs>(args?: SelectSubset<T, CashbackRuleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CashbackRulePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CashbackRule.
     * @param {CashbackRuleDeleteArgs} args - Arguments to delete one CashbackRule.
     * @example
     * // Delete one CashbackRule
     * const CashbackRule = await prisma.cashbackRule.delete({
     *   where: {
     *     // ... filter to delete one CashbackRule
     *   }
     * })
     * 
     */
    delete<T extends CashbackRuleDeleteArgs>(args: SelectSubset<T, CashbackRuleDeleteArgs<ExtArgs>>): Prisma__CashbackRuleClient<$Result.GetResult<Prisma.$CashbackRulePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CashbackRule.
     * @param {CashbackRuleUpdateArgs} args - Arguments to update one CashbackRule.
     * @example
     * // Update one CashbackRule
     * const cashbackRule = await prisma.cashbackRule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CashbackRuleUpdateArgs>(args: SelectSubset<T, CashbackRuleUpdateArgs<ExtArgs>>): Prisma__CashbackRuleClient<$Result.GetResult<Prisma.$CashbackRulePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CashbackRules.
     * @param {CashbackRuleDeleteManyArgs} args - Arguments to filter CashbackRules to delete.
     * @example
     * // Delete a few CashbackRules
     * const { count } = await prisma.cashbackRule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CashbackRuleDeleteManyArgs>(args?: SelectSubset<T, CashbackRuleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CashbackRules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashbackRuleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CashbackRules
     * const cashbackRule = await prisma.cashbackRule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CashbackRuleUpdateManyArgs>(args: SelectSubset<T, CashbackRuleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CashbackRule.
     * @param {CashbackRuleUpsertArgs} args - Arguments to update or create a CashbackRule.
     * @example
     * // Update or create a CashbackRule
     * const cashbackRule = await prisma.cashbackRule.upsert({
     *   create: {
     *     // ... data to create a CashbackRule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CashbackRule we want to update
     *   }
     * })
     */
    upsert<T extends CashbackRuleUpsertArgs>(args: SelectSubset<T, CashbackRuleUpsertArgs<ExtArgs>>): Prisma__CashbackRuleClient<$Result.GetResult<Prisma.$CashbackRulePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CashbackRules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashbackRuleCountArgs} args - Arguments to filter CashbackRules to count.
     * @example
     * // Count the number of CashbackRules
     * const count = await prisma.cashbackRule.count({
     *   where: {
     *     // ... the filter for the CashbackRules we want to count
     *   }
     * })
    **/
    count<T extends CashbackRuleCountArgs>(
      args?: Subset<T, CashbackRuleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CashbackRuleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CashbackRule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashbackRuleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CashbackRuleAggregateArgs>(args: Subset<T, CashbackRuleAggregateArgs>): Prisma.PrismaPromise<GetCashbackRuleAggregateType<T>>

    /**
     * Group by CashbackRule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashbackRuleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CashbackRuleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CashbackRuleGroupByArgs['orderBy'] }
        : { orderBy?: CashbackRuleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CashbackRuleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCashbackRuleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CashbackRule model
   */
  readonly fields: CashbackRuleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CashbackRule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CashbackRuleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CashbackRule model
   */ 
  interface CashbackRuleFieldRefs {
    readonly id: FieldRef<"CashbackRule", 'String'>
    readonly tenantId: FieldRef<"CashbackRule", 'String'>
    readonly category: FieldRef<"CashbackRule", 'TxCategory'>
    readonly baseRateBps: FieldRef<"CashbackRule", 'Int'>
    readonly startAt: FieldRef<"CashbackRule", 'DateTime'>
    readonly endAt: FieldRef<"CashbackRule", 'DateTime'>
    readonly isActive: FieldRef<"CashbackRule", 'Boolean'>
    readonly createdAt: FieldRef<"CashbackRule", 'DateTime'>
    readonly updatedAt: FieldRef<"CashbackRule", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CashbackRule findUnique
   */
  export type CashbackRuleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashbackRule
     */
    select?: CashbackRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashbackRuleInclude<ExtArgs> | null
    /**
     * Filter, which CashbackRule to fetch.
     */
    where: CashbackRuleWhereUniqueInput
  }

  /**
   * CashbackRule findUniqueOrThrow
   */
  export type CashbackRuleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashbackRule
     */
    select?: CashbackRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashbackRuleInclude<ExtArgs> | null
    /**
     * Filter, which CashbackRule to fetch.
     */
    where: CashbackRuleWhereUniqueInput
  }

  /**
   * CashbackRule findFirst
   */
  export type CashbackRuleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashbackRule
     */
    select?: CashbackRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashbackRuleInclude<ExtArgs> | null
    /**
     * Filter, which CashbackRule to fetch.
     */
    where?: CashbackRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CashbackRules to fetch.
     */
    orderBy?: CashbackRuleOrderByWithRelationInput | CashbackRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CashbackRules.
     */
    cursor?: CashbackRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CashbackRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CashbackRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CashbackRules.
     */
    distinct?: CashbackRuleScalarFieldEnum | CashbackRuleScalarFieldEnum[]
  }

  /**
   * CashbackRule findFirstOrThrow
   */
  export type CashbackRuleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashbackRule
     */
    select?: CashbackRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashbackRuleInclude<ExtArgs> | null
    /**
     * Filter, which CashbackRule to fetch.
     */
    where?: CashbackRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CashbackRules to fetch.
     */
    orderBy?: CashbackRuleOrderByWithRelationInput | CashbackRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CashbackRules.
     */
    cursor?: CashbackRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CashbackRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CashbackRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CashbackRules.
     */
    distinct?: CashbackRuleScalarFieldEnum | CashbackRuleScalarFieldEnum[]
  }

  /**
   * CashbackRule findMany
   */
  export type CashbackRuleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashbackRule
     */
    select?: CashbackRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashbackRuleInclude<ExtArgs> | null
    /**
     * Filter, which CashbackRules to fetch.
     */
    where?: CashbackRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CashbackRules to fetch.
     */
    orderBy?: CashbackRuleOrderByWithRelationInput | CashbackRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CashbackRules.
     */
    cursor?: CashbackRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CashbackRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CashbackRules.
     */
    skip?: number
    distinct?: CashbackRuleScalarFieldEnum | CashbackRuleScalarFieldEnum[]
  }

  /**
   * CashbackRule create
   */
  export type CashbackRuleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashbackRule
     */
    select?: CashbackRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashbackRuleInclude<ExtArgs> | null
    /**
     * The data needed to create a CashbackRule.
     */
    data: XOR<CashbackRuleCreateInput, CashbackRuleUncheckedCreateInput>
  }

  /**
   * CashbackRule createMany
   */
  export type CashbackRuleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CashbackRules.
     */
    data: CashbackRuleCreateManyInput | CashbackRuleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CashbackRule createManyAndReturn
   */
  export type CashbackRuleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashbackRule
     */
    select?: CashbackRuleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CashbackRules.
     */
    data: CashbackRuleCreateManyInput | CashbackRuleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashbackRuleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CashbackRule update
   */
  export type CashbackRuleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashbackRule
     */
    select?: CashbackRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashbackRuleInclude<ExtArgs> | null
    /**
     * The data needed to update a CashbackRule.
     */
    data: XOR<CashbackRuleUpdateInput, CashbackRuleUncheckedUpdateInput>
    /**
     * Choose, which CashbackRule to update.
     */
    where: CashbackRuleWhereUniqueInput
  }

  /**
   * CashbackRule updateMany
   */
  export type CashbackRuleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CashbackRules.
     */
    data: XOR<CashbackRuleUpdateManyMutationInput, CashbackRuleUncheckedUpdateManyInput>
    /**
     * Filter which CashbackRules to update
     */
    where?: CashbackRuleWhereInput
  }

  /**
   * CashbackRule upsert
   */
  export type CashbackRuleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashbackRule
     */
    select?: CashbackRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashbackRuleInclude<ExtArgs> | null
    /**
     * The filter to search for the CashbackRule to update in case it exists.
     */
    where: CashbackRuleWhereUniqueInput
    /**
     * In case the CashbackRule found by the `where` argument doesn't exist, create a new CashbackRule with this data.
     */
    create: XOR<CashbackRuleCreateInput, CashbackRuleUncheckedCreateInput>
    /**
     * In case the CashbackRule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CashbackRuleUpdateInput, CashbackRuleUncheckedUpdateInput>
  }

  /**
   * CashbackRule delete
   */
  export type CashbackRuleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashbackRule
     */
    select?: CashbackRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashbackRuleInclude<ExtArgs> | null
    /**
     * Filter which CashbackRule to delete.
     */
    where: CashbackRuleWhereUniqueInput
  }

  /**
   * CashbackRule deleteMany
   */
  export type CashbackRuleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CashbackRules to delete
     */
    where?: CashbackRuleWhereInput
  }

  /**
   * CashbackRule without action
   */
  export type CashbackRuleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashbackRule
     */
    select?: CashbackRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashbackRuleInclude<ExtArgs> | null
  }


  /**
   * Model Offer
   */

  export type AggregateOffer = {
    _count: OfferCountAggregateOutputType | null
    _avg: OfferAvgAggregateOutputType | null
    _sum: OfferSumAggregateOutputType | null
    _min: OfferMinAggregateOutputType | null
    _max: OfferMaxAggregateOutputType | null
  }

  export type OfferAvgAggregateOutputType = {
    rateMultiplierBps: number | null
  }

  export type OfferSumAggregateOutputType = {
    rateMultiplierBps: number | null
  }

  export type OfferMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    name: string | null
    description: string | null
    rateMultiplierBps: number | null
    startAt: Date | null
    endAt: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OfferMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    name: string | null
    description: string | null
    rateMultiplierBps: number | null
    startAt: Date | null
    endAt: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OfferCountAggregateOutputType = {
    id: number
    tenantId: number
    name: number
    description: number
    rateMultiplierBps: number
    startAt: number
    endAt: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OfferAvgAggregateInputType = {
    rateMultiplierBps?: true
  }

  export type OfferSumAggregateInputType = {
    rateMultiplierBps?: true
  }

  export type OfferMinAggregateInputType = {
    id?: true
    tenantId?: true
    name?: true
    description?: true
    rateMultiplierBps?: true
    startAt?: true
    endAt?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OfferMaxAggregateInputType = {
    id?: true
    tenantId?: true
    name?: true
    description?: true
    rateMultiplierBps?: true
    startAt?: true
    endAt?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OfferCountAggregateInputType = {
    id?: true
    tenantId?: true
    name?: true
    description?: true
    rateMultiplierBps?: true
    startAt?: true
    endAt?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OfferAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Offer to aggregate.
     */
    where?: OfferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Offers to fetch.
     */
    orderBy?: OfferOrderByWithRelationInput | OfferOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OfferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Offers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Offers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Offers
    **/
    _count?: true | OfferCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OfferAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OfferSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OfferMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OfferMaxAggregateInputType
  }

  export type GetOfferAggregateType<T extends OfferAggregateArgs> = {
        [P in keyof T & keyof AggregateOffer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOffer[P]>
      : GetScalarType<T[P], AggregateOffer[P]>
  }




  export type OfferGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OfferWhereInput
    orderBy?: OfferOrderByWithAggregationInput | OfferOrderByWithAggregationInput[]
    by: OfferScalarFieldEnum[] | OfferScalarFieldEnum
    having?: OfferScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OfferCountAggregateInputType | true
    _avg?: OfferAvgAggregateInputType
    _sum?: OfferSumAggregateInputType
    _min?: OfferMinAggregateInputType
    _max?: OfferMaxAggregateInputType
  }

  export type OfferGroupByOutputType = {
    id: string
    tenantId: string
    name: string
    description: string | null
    rateMultiplierBps: number
    startAt: Date
    endAt: Date
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: OfferCountAggregateOutputType | null
    _avg: OfferAvgAggregateOutputType | null
    _sum: OfferSumAggregateOutputType | null
    _min: OfferMinAggregateOutputType | null
    _max: OfferMaxAggregateOutputType | null
  }

  type GetOfferGroupByPayload<T extends OfferGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OfferGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OfferGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OfferGroupByOutputType[P]>
            : GetScalarType<T[P], OfferGroupByOutputType[P]>
        }
      >
    >


  export type OfferSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    name?: boolean
    description?: boolean
    rateMultiplierBps?: boolean
    startAt?: boolean
    endAt?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["offer"]>

  export type OfferSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    name?: boolean
    description?: boolean
    rateMultiplierBps?: boolean
    startAt?: boolean
    endAt?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["offer"]>

  export type OfferSelectScalar = {
    id?: boolean
    tenantId?: boolean
    name?: boolean
    description?: boolean
    rateMultiplierBps?: boolean
    startAt?: boolean
    endAt?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OfferInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type OfferIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $OfferPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Offer"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      name: string
      description: string | null
      rateMultiplierBps: number
      startAt: Date
      endAt: Date
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["offer"]>
    composites: {}
  }

  type OfferGetPayload<S extends boolean | null | undefined | OfferDefaultArgs> = $Result.GetResult<Prisma.$OfferPayload, S>

  type OfferCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OfferFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OfferCountAggregateInputType | true
    }

  export interface OfferDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Offer'], meta: { name: 'Offer' } }
    /**
     * Find zero or one Offer that matches the filter.
     * @param {OfferFindUniqueArgs} args - Arguments to find a Offer
     * @example
     * // Get one Offer
     * const offer = await prisma.offer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OfferFindUniqueArgs>(args: SelectSubset<T, OfferFindUniqueArgs<ExtArgs>>): Prisma__OfferClient<$Result.GetResult<Prisma.$OfferPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Offer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OfferFindUniqueOrThrowArgs} args - Arguments to find a Offer
     * @example
     * // Get one Offer
     * const offer = await prisma.offer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OfferFindUniqueOrThrowArgs>(args: SelectSubset<T, OfferFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OfferClient<$Result.GetResult<Prisma.$OfferPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Offer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfferFindFirstArgs} args - Arguments to find a Offer
     * @example
     * // Get one Offer
     * const offer = await prisma.offer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OfferFindFirstArgs>(args?: SelectSubset<T, OfferFindFirstArgs<ExtArgs>>): Prisma__OfferClient<$Result.GetResult<Prisma.$OfferPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Offer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfferFindFirstOrThrowArgs} args - Arguments to find a Offer
     * @example
     * // Get one Offer
     * const offer = await prisma.offer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OfferFindFirstOrThrowArgs>(args?: SelectSubset<T, OfferFindFirstOrThrowArgs<ExtArgs>>): Prisma__OfferClient<$Result.GetResult<Prisma.$OfferPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Offers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfferFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Offers
     * const offers = await prisma.offer.findMany()
     * 
     * // Get first 10 Offers
     * const offers = await prisma.offer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const offerWithIdOnly = await prisma.offer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OfferFindManyArgs>(args?: SelectSubset<T, OfferFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OfferPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Offer.
     * @param {OfferCreateArgs} args - Arguments to create a Offer.
     * @example
     * // Create one Offer
     * const Offer = await prisma.offer.create({
     *   data: {
     *     // ... data to create a Offer
     *   }
     * })
     * 
     */
    create<T extends OfferCreateArgs>(args: SelectSubset<T, OfferCreateArgs<ExtArgs>>): Prisma__OfferClient<$Result.GetResult<Prisma.$OfferPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Offers.
     * @param {OfferCreateManyArgs} args - Arguments to create many Offers.
     * @example
     * // Create many Offers
     * const offer = await prisma.offer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OfferCreateManyArgs>(args?: SelectSubset<T, OfferCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Offers and returns the data saved in the database.
     * @param {OfferCreateManyAndReturnArgs} args - Arguments to create many Offers.
     * @example
     * // Create many Offers
     * const offer = await prisma.offer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Offers and only return the `id`
     * const offerWithIdOnly = await prisma.offer.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OfferCreateManyAndReturnArgs>(args?: SelectSubset<T, OfferCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OfferPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Offer.
     * @param {OfferDeleteArgs} args - Arguments to delete one Offer.
     * @example
     * // Delete one Offer
     * const Offer = await prisma.offer.delete({
     *   where: {
     *     // ... filter to delete one Offer
     *   }
     * })
     * 
     */
    delete<T extends OfferDeleteArgs>(args: SelectSubset<T, OfferDeleteArgs<ExtArgs>>): Prisma__OfferClient<$Result.GetResult<Prisma.$OfferPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Offer.
     * @param {OfferUpdateArgs} args - Arguments to update one Offer.
     * @example
     * // Update one Offer
     * const offer = await prisma.offer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OfferUpdateArgs>(args: SelectSubset<T, OfferUpdateArgs<ExtArgs>>): Prisma__OfferClient<$Result.GetResult<Prisma.$OfferPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Offers.
     * @param {OfferDeleteManyArgs} args - Arguments to filter Offers to delete.
     * @example
     * // Delete a few Offers
     * const { count } = await prisma.offer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OfferDeleteManyArgs>(args?: SelectSubset<T, OfferDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Offers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfferUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Offers
     * const offer = await prisma.offer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OfferUpdateManyArgs>(args: SelectSubset<T, OfferUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Offer.
     * @param {OfferUpsertArgs} args - Arguments to update or create a Offer.
     * @example
     * // Update or create a Offer
     * const offer = await prisma.offer.upsert({
     *   create: {
     *     // ... data to create a Offer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Offer we want to update
     *   }
     * })
     */
    upsert<T extends OfferUpsertArgs>(args: SelectSubset<T, OfferUpsertArgs<ExtArgs>>): Prisma__OfferClient<$Result.GetResult<Prisma.$OfferPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Offers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfferCountArgs} args - Arguments to filter Offers to count.
     * @example
     * // Count the number of Offers
     * const count = await prisma.offer.count({
     *   where: {
     *     // ... the filter for the Offers we want to count
     *   }
     * })
    **/
    count<T extends OfferCountArgs>(
      args?: Subset<T, OfferCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OfferCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Offer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfferAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OfferAggregateArgs>(args: Subset<T, OfferAggregateArgs>): Prisma.PrismaPromise<GetOfferAggregateType<T>>

    /**
     * Group by Offer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfferGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OfferGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OfferGroupByArgs['orderBy'] }
        : { orderBy?: OfferGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OfferGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOfferGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Offer model
   */
  readonly fields: OfferFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Offer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OfferClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Offer model
   */ 
  interface OfferFieldRefs {
    readonly id: FieldRef<"Offer", 'String'>
    readonly tenantId: FieldRef<"Offer", 'String'>
    readonly name: FieldRef<"Offer", 'String'>
    readonly description: FieldRef<"Offer", 'String'>
    readonly rateMultiplierBps: FieldRef<"Offer", 'Int'>
    readonly startAt: FieldRef<"Offer", 'DateTime'>
    readonly endAt: FieldRef<"Offer", 'DateTime'>
    readonly isActive: FieldRef<"Offer", 'Boolean'>
    readonly createdAt: FieldRef<"Offer", 'DateTime'>
    readonly updatedAt: FieldRef<"Offer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Offer findUnique
   */
  export type OfferFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Offer
     */
    select?: OfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfferInclude<ExtArgs> | null
    /**
     * Filter, which Offer to fetch.
     */
    where: OfferWhereUniqueInput
  }

  /**
   * Offer findUniqueOrThrow
   */
  export type OfferFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Offer
     */
    select?: OfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfferInclude<ExtArgs> | null
    /**
     * Filter, which Offer to fetch.
     */
    where: OfferWhereUniqueInput
  }

  /**
   * Offer findFirst
   */
  export type OfferFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Offer
     */
    select?: OfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfferInclude<ExtArgs> | null
    /**
     * Filter, which Offer to fetch.
     */
    where?: OfferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Offers to fetch.
     */
    orderBy?: OfferOrderByWithRelationInput | OfferOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Offers.
     */
    cursor?: OfferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Offers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Offers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Offers.
     */
    distinct?: OfferScalarFieldEnum | OfferScalarFieldEnum[]
  }

  /**
   * Offer findFirstOrThrow
   */
  export type OfferFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Offer
     */
    select?: OfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfferInclude<ExtArgs> | null
    /**
     * Filter, which Offer to fetch.
     */
    where?: OfferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Offers to fetch.
     */
    orderBy?: OfferOrderByWithRelationInput | OfferOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Offers.
     */
    cursor?: OfferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Offers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Offers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Offers.
     */
    distinct?: OfferScalarFieldEnum | OfferScalarFieldEnum[]
  }

  /**
   * Offer findMany
   */
  export type OfferFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Offer
     */
    select?: OfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfferInclude<ExtArgs> | null
    /**
     * Filter, which Offers to fetch.
     */
    where?: OfferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Offers to fetch.
     */
    orderBy?: OfferOrderByWithRelationInput | OfferOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Offers.
     */
    cursor?: OfferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Offers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Offers.
     */
    skip?: number
    distinct?: OfferScalarFieldEnum | OfferScalarFieldEnum[]
  }

  /**
   * Offer create
   */
  export type OfferCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Offer
     */
    select?: OfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfferInclude<ExtArgs> | null
    /**
     * The data needed to create a Offer.
     */
    data: XOR<OfferCreateInput, OfferUncheckedCreateInput>
  }

  /**
   * Offer createMany
   */
  export type OfferCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Offers.
     */
    data: OfferCreateManyInput | OfferCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Offer createManyAndReturn
   */
  export type OfferCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Offer
     */
    select?: OfferSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Offers.
     */
    data: OfferCreateManyInput | OfferCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfferIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Offer update
   */
  export type OfferUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Offer
     */
    select?: OfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfferInclude<ExtArgs> | null
    /**
     * The data needed to update a Offer.
     */
    data: XOR<OfferUpdateInput, OfferUncheckedUpdateInput>
    /**
     * Choose, which Offer to update.
     */
    where: OfferWhereUniqueInput
  }

  /**
   * Offer updateMany
   */
  export type OfferUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Offers.
     */
    data: XOR<OfferUpdateManyMutationInput, OfferUncheckedUpdateManyInput>
    /**
     * Filter which Offers to update
     */
    where?: OfferWhereInput
  }

  /**
   * Offer upsert
   */
  export type OfferUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Offer
     */
    select?: OfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfferInclude<ExtArgs> | null
    /**
     * The filter to search for the Offer to update in case it exists.
     */
    where: OfferWhereUniqueInput
    /**
     * In case the Offer found by the `where` argument doesn't exist, create a new Offer with this data.
     */
    create: XOR<OfferCreateInput, OfferUncheckedCreateInput>
    /**
     * In case the Offer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OfferUpdateInput, OfferUncheckedUpdateInput>
  }

  /**
   * Offer delete
   */
  export type OfferDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Offer
     */
    select?: OfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfferInclude<ExtArgs> | null
    /**
     * Filter which Offer to delete.
     */
    where: OfferWhereUniqueInput
  }

  /**
   * Offer deleteMany
   */
  export type OfferDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Offers to delete
     */
    where?: OfferWhereInput
  }

  /**
   * Offer without action
   */
  export type OfferDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Offer
     */
    select?: OfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OfferInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    customerId: string | null
    channel: $Enums.NotifChannel | null
    template: string | null
    status: $Enums.NotifStatus | null
    error: string | null
    createdAt: Date | null
    sentAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    customerId: string | null
    channel: $Enums.NotifChannel | null
    template: string | null
    status: $Enums.NotifStatus | null
    error: string | null
    createdAt: Date | null
    sentAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    tenantId: number
    customerId: number
    channel: number
    template: number
    payload: number
    status: number
    error: number
    createdAt: number
    sentAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    tenantId?: true
    customerId?: true
    channel?: true
    template?: true
    status?: true
    error?: true
    createdAt?: true
    sentAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    tenantId?: true
    customerId?: true
    channel?: true
    template?: true
    status?: true
    error?: true
    createdAt?: true
    sentAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    tenantId?: true
    customerId?: true
    channel?: true
    template?: true
    payload?: true
    status?: true
    error?: true
    createdAt?: true
    sentAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    tenantId: string
    customerId: string
    channel: $Enums.NotifChannel
    template: string
    payload: JsonValue
    status: $Enums.NotifStatus
    error: string | null
    createdAt: Date
    sentAt: Date | null
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    customerId?: boolean
    channel?: boolean
    template?: boolean
    payload?: boolean
    status?: boolean
    error?: boolean
    createdAt?: boolean
    sentAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    customerId?: boolean
    channel?: boolean
    template?: boolean
    payload?: boolean
    status?: boolean
    error?: boolean
    createdAt?: boolean
    sentAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    tenantId?: boolean
    customerId?: boolean
    channel?: boolean
    template?: boolean
    payload?: boolean
    status?: boolean
    error?: boolean
    createdAt?: boolean
    sentAt?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      customerId: string
      channel: $Enums.NotifChannel
      template: string
      payload: Prisma.JsonValue
      status: $Enums.NotifStatus
      error: string | null
      createdAt: Date
      sentAt: Date | null
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly tenantId: FieldRef<"Notification", 'String'>
    readonly customerId: FieldRef<"Notification", 'String'>
    readonly channel: FieldRef<"Notification", 'NotifChannel'>
    readonly template: FieldRef<"Notification", 'String'>
    readonly payload: FieldRef<"Notification", 'Json'>
    readonly status: FieldRef<"Notification", 'NotifStatus'>
    readonly error: FieldRef<"Notification", 'String'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly sentAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model CardOrder
   */

  export type AggregateCardOrder = {
    _count: CardOrderCountAggregateOutputType | null
    _avg: CardOrderAvgAggregateOutputType | null
    _sum: CardOrderSumAggregateOutputType | null
    _min: CardOrderMinAggregateOutputType | null
    _max: CardOrderMaxAggregateOutputType | null
  }

  export type CardOrderAvgAggregateOutputType = {
    quantity: number | null
    unitPrice: Decimal | null
    totalPrice: Decimal | null
  }

  export type CardOrderSumAggregateOutputType = {
    quantity: number | null
    unitPrice: Decimal | null
    totalPrice: Decimal | null
  }

  export type CardOrderMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    cardType: $Enums.CardType | null
    quantity: number | null
    unitPrice: Decimal | null
    totalPrice: Decimal | null
    status: $Enums.OrderStatus | null
    storeName: string | null
    storePhone: string | null
    storeAddress: string | null
    customDesign: string | null
    shippingAddress: string | null
    trackingNumber: string | null
    createdAt: Date | null
    updatedAt: Date | null
    shippedAt: Date | null
    deliveredAt: Date | null
    approvedAt: Date | null
    approvedBy: string | null
    deductFromBalance: boolean | null
    paidAt: Date | null
    sourceType: $Enums.OrderSourceType | null
    stripePaymentId: string | null
    stripeSessionId: string | null
  }

  export type CardOrderMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    cardType: $Enums.CardType | null
    quantity: number | null
    unitPrice: Decimal | null
    totalPrice: Decimal | null
    status: $Enums.OrderStatus | null
    storeName: string | null
    storePhone: string | null
    storeAddress: string | null
    customDesign: string | null
    shippingAddress: string | null
    trackingNumber: string | null
    createdAt: Date | null
    updatedAt: Date | null
    shippedAt: Date | null
    deliveredAt: Date | null
    approvedAt: Date | null
    approvedBy: string | null
    deductFromBalance: boolean | null
    paidAt: Date | null
    sourceType: $Enums.OrderSourceType | null
    stripePaymentId: string | null
    stripeSessionId: string | null
  }

  export type CardOrderCountAggregateOutputType = {
    id: number
    tenantId: number
    cardType: number
    quantity: number
    unitPrice: number
    totalPrice: number
    status: number
    storeName: number
    storePhone: number
    storeAddress: number
    customDesign: number
    shippingAddress: number
    trackingNumber: number
    createdAt: number
    updatedAt: number
    shippedAt: number
    deliveredAt: number
    approvedAt: number
    approvedBy: number
    deductFromBalance: number
    paidAt: number
    sourceType: number
    stripePaymentId: number
    stripeSessionId: number
    _all: number
  }


  export type CardOrderAvgAggregateInputType = {
    quantity?: true
    unitPrice?: true
    totalPrice?: true
  }

  export type CardOrderSumAggregateInputType = {
    quantity?: true
    unitPrice?: true
    totalPrice?: true
  }

  export type CardOrderMinAggregateInputType = {
    id?: true
    tenantId?: true
    cardType?: true
    quantity?: true
    unitPrice?: true
    totalPrice?: true
    status?: true
    storeName?: true
    storePhone?: true
    storeAddress?: true
    customDesign?: true
    shippingAddress?: true
    trackingNumber?: true
    createdAt?: true
    updatedAt?: true
    shippedAt?: true
    deliveredAt?: true
    approvedAt?: true
    approvedBy?: true
    deductFromBalance?: true
    paidAt?: true
    sourceType?: true
    stripePaymentId?: true
    stripeSessionId?: true
  }

  export type CardOrderMaxAggregateInputType = {
    id?: true
    tenantId?: true
    cardType?: true
    quantity?: true
    unitPrice?: true
    totalPrice?: true
    status?: true
    storeName?: true
    storePhone?: true
    storeAddress?: true
    customDesign?: true
    shippingAddress?: true
    trackingNumber?: true
    createdAt?: true
    updatedAt?: true
    shippedAt?: true
    deliveredAt?: true
    approvedAt?: true
    approvedBy?: true
    deductFromBalance?: true
    paidAt?: true
    sourceType?: true
    stripePaymentId?: true
    stripeSessionId?: true
  }

  export type CardOrderCountAggregateInputType = {
    id?: true
    tenantId?: true
    cardType?: true
    quantity?: true
    unitPrice?: true
    totalPrice?: true
    status?: true
    storeName?: true
    storePhone?: true
    storeAddress?: true
    customDesign?: true
    shippingAddress?: true
    trackingNumber?: true
    createdAt?: true
    updatedAt?: true
    shippedAt?: true
    deliveredAt?: true
    approvedAt?: true
    approvedBy?: true
    deductFromBalance?: true
    paidAt?: true
    sourceType?: true
    stripePaymentId?: true
    stripeSessionId?: true
    _all?: true
  }

  export type CardOrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CardOrder to aggregate.
     */
    where?: CardOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardOrders to fetch.
     */
    orderBy?: CardOrderOrderByWithRelationInput | CardOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CardOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CardOrders
    **/
    _count?: true | CardOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CardOrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CardOrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CardOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CardOrderMaxAggregateInputType
  }

  export type GetCardOrderAggregateType<T extends CardOrderAggregateArgs> = {
        [P in keyof T & keyof AggregateCardOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCardOrder[P]>
      : GetScalarType<T[P], AggregateCardOrder[P]>
  }




  export type CardOrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardOrderWhereInput
    orderBy?: CardOrderOrderByWithAggregationInput | CardOrderOrderByWithAggregationInput[]
    by: CardOrderScalarFieldEnum[] | CardOrderScalarFieldEnum
    having?: CardOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CardOrderCountAggregateInputType | true
    _avg?: CardOrderAvgAggregateInputType
    _sum?: CardOrderSumAggregateInputType
    _min?: CardOrderMinAggregateInputType
    _max?: CardOrderMaxAggregateInputType
  }

  export type CardOrderGroupByOutputType = {
    id: string
    tenantId: string
    cardType: $Enums.CardType
    quantity: number
    unitPrice: Decimal
    totalPrice: Decimal
    status: $Enums.OrderStatus
    storeName: string | null
    storePhone: string | null
    storeAddress: string | null
    customDesign: string | null
    shippingAddress: string | null
    trackingNumber: string | null
    createdAt: Date
    updatedAt: Date
    shippedAt: Date | null
    deliveredAt: Date | null
    approvedAt: Date | null
    approvedBy: string | null
    deductFromBalance: boolean
    paidAt: Date | null
    sourceType: $Enums.OrderSourceType
    stripePaymentId: string | null
    stripeSessionId: string | null
    _count: CardOrderCountAggregateOutputType | null
    _avg: CardOrderAvgAggregateOutputType | null
    _sum: CardOrderSumAggregateOutputType | null
    _min: CardOrderMinAggregateOutputType | null
    _max: CardOrderMaxAggregateOutputType | null
  }

  type GetCardOrderGroupByPayload<T extends CardOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CardOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CardOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CardOrderGroupByOutputType[P]>
            : GetScalarType<T[P], CardOrderGroupByOutputType[P]>
        }
      >
    >


  export type CardOrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    cardType?: boolean
    quantity?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    status?: boolean
    storeName?: boolean
    storePhone?: boolean
    storeAddress?: boolean
    customDesign?: boolean
    shippingAddress?: boolean
    trackingNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    shippedAt?: boolean
    deliveredAt?: boolean
    approvedAt?: boolean
    approvedBy?: boolean
    deductFromBalance?: boolean
    paidAt?: boolean
    sourceType?: boolean
    stripePaymentId?: boolean
    stripeSessionId?: boolean
    cardLimitTransactions?: boolean | CardOrder$cardLimitTransactionsArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    _count?: boolean | CardOrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cardOrder"]>

  export type CardOrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    cardType?: boolean
    quantity?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    status?: boolean
    storeName?: boolean
    storePhone?: boolean
    storeAddress?: boolean
    customDesign?: boolean
    shippingAddress?: boolean
    trackingNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    shippedAt?: boolean
    deliveredAt?: boolean
    approvedAt?: boolean
    approvedBy?: boolean
    deductFromBalance?: boolean
    paidAt?: boolean
    sourceType?: boolean
    stripePaymentId?: boolean
    stripeSessionId?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cardOrder"]>

  export type CardOrderSelectScalar = {
    id?: boolean
    tenantId?: boolean
    cardType?: boolean
    quantity?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    status?: boolean
    storeName?: boolean
    storePhone?: boolean
    storeAddress?: boolean
    customDesign?: boolean
    shippingAddress?: boolean
    trackingNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    shippedAt?: boolean
    deliveredAt?: boolean
    approvedAt?: boolean
    approvedBy?: boolean
    deductFromBalance?: boolean
    paidAt?: boolean
    sourceType?: boolean
    stripePaymentId?: boolean
    stripeSessionId?: boolean
  }

  export type CardOrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cardLimitTransactions?: boolean | CardOrder$cardLimitTransactionsArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    _count?: boolean | CardOrderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CardOrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $CardOrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CardOrder"
    objects: {
      cardLimitTransactions: Prisma.$CardLimitTransactionPayload<ExtArgs>[]
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      cardType: $Enums.CardType
      quantity: number
      unitPrice: Prisma.Decimal
      totalPrice: Prisma.Decimal
      status: $Enums.OrderStatus
      storeName: string | null
      storePhone: string | null
      storeAddress: string | null
      customDesign: string | null
      shippingAddress: string | null
      trackingNumber: string | null
      createdAt: Date
      updatedAt: Date
      shippedAt: Date | null
      deliveredAt: Date | null
      approvedAt: Date | null
      approvedBy: string | null
      deductFromBalance: boolean
      paidAt: Date | null
      sourceType: $Enums.OrderSourceType
      stripePaymentId: string | null
      stripeSessionId: string | null
    }, ExtArgs["result"]["cardOrder"]>
    composites: {}
  }

  type CardOrderGetPayload<S extends boolean | null | undefined | CardOrderDefaultArgs> = $Result.GetResult<Prisma.$CardOrderPayload, S>

  type CardOrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CardOrderFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CardOrderCountAggregateInputType | true
    }

  export interface CardOrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CardOrder'], meta: { name: 'CardOrder' } }
    /**
     * Find zero or one CardOrder that matches the filter.
     * @param {CardOrderFindUniqueArgs} args - Arguments to find a CardOrder
     * @example
     * // Get one CardOrder
     * const cardOrder = await prisma.cardOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CardOrderFindUniqueArgs>(args: SelectSubset<T, CardOrderFindUniqueArgs<ExtArgs>>): Prisma__CardOrderClient<$Result.GetResult<Prisma.$CardOrderPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CardOrder that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CardOrderFindUniqueOrThrowArgs} args - Arguments to find a CardOrder
     * @example
     * // Get one CardOrder
     * const cardOrder = await prisma.cardOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CardOrderFindUniqueOrThrowArgs>(args: SelectSubset<T, CardOrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CardOrderClient<$Result.GetResult<Prisma.$CardOrderPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CardOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardOrderFindFirstArgs} args - Arguments to find a CardOrder
     * @example
     * // Get one CardOrder
     * const cardOrder = await prisma.cardOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CardOrderFindFirstArgs>(args?: SelectSubset<T, CardOrderFindFirstArgs<ExtArgs>>): Prisma__CardOrderClient<$Result.GetResult<Prisma.$CardOrderPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CardOrder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardOrderFindFirstOrThrowArgs} args - Arguments to find a CardOrder
     * @example
     * // Get one CardOrder
     * const cardOrder = await prisma.cardOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CardOrderFindFirstOrThrowArgs>(args?: SelectSubset<T, CardOrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__CardOrderClient<$Result.GetResult<Prisma.$CardOrderPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CardOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardOrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CardOrders
     * const cardOrders = await prisma.cardOrder.findMany()
     * 
     * // Get first 10 CardOrders
     * const cardOrders = await prisma.cardOrder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cardOrderWithIdOnly = await prisma.cardOrder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CardOrderFindManyArgs>(args?: SelectSubset<T, CardOrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardOrderPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CardOrder.
     * @param {CardOrderCreateArgs} args - Arguments to create a CardOrder.
     * @example
     * // Create one CardOrder
     * const CardOrder = await prisma.cardOrder.create({
     *   data: {
     *     // ... data to create a CardOrder
     *   }
     * })
     * 
     */
    create<T extends CardOrderCreateArgs>(args: SelectSubset<T, CardOrderCreateArgs<ExtArgs>>): Prisma__CardOrderClient<$Result.GetResult<Prisma.$CardOrderPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CardOrders.
     * @param {CardOrderCreateManyArgs} args - Arguments to create many CardOrders.
     * @example
     * // Create many CardOrders
     * const cardOrder = await prisma.cardOrder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CardOrderCreateManyArgs>(args?: SelectSubset<T, CardOrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CardOrders and returns the data saved in the database.
     * @param {CardOrderCreateManyAndReturnArgs} args - Arguments to create many CardOrders.
     * @example
     * // Create many CardOrders
     * const cardOrder = await prisma.cardOrder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CardOrders and only return the `id`
     * const cardOrderWithIdOnly = await prisma.cardOrder.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CardOrderCreateManyAndReturnArgs>(args?: SelectSubset<T, CardOrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardOrderPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CardOrder.
     * @param {CardOrderDeleteArgs} args - Arguments to delete one CardOrder.
     * @example
     * // Delete one CardOrder
     * const CardOrder = await prisma.cardOrder.delete({
     *   where: {
     *     // ... filter to delete one CardOrder
     *   }
     * })
     * 
     */
    delete<T extends CardOrderDeleteArgs>(args: SelectSubset<T, CardOrderDeleteArgs<ExtArgs>>): Prisma__CardOrderClient<$Result.GetResult<Prisma.$CardOrderPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CardOrder.
     * @param {CardOrderUpdateArgs} args - Arguments to update one CardOrder.
     * @example
     * // Update one CardOrder
     * const cardOrder = await prisma.cardOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CardOrderUpdateArgs>(args: SelectSubset<T, CardOrderUpdateArgs<ExtArgs>>): Prisma__CardOrderClient<$Result.GetResult<Prisma.$CardOrderPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CardOrders.
     * @param {CardOrderDeleteManyArgs} args - Arguments to filter CardOrders to delete.
     * @example
     * // Delete a few CardOrders
     * const { count } = await prisma.cardOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CardOrderDeleteManyArgs>(args?: SelectSubset<T, CardOrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CardOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CardOrders
     * const cardOrder = await prisma.cardOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CardOrderUpdateManyArgs>(args: SelectSubset<T, CardOrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CardOrder.
     * @param {CardOrderUpsertArgs} args - Arguments to update or create a CardOrder.
     * @example
     * // Update or create a CardOrder
     * const cardOrder = await prisma.cardOrder.upsert({
     *   create: {
     *     // ... data to create a CardOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CardOrder we want to update
     *   }
     * })
     */
    upsert<T extends CardOrderUpsertArgs>(args: SelectSubset<T, CardOrderUpsertArgs<ExtArgs>>): Prisma__CardOrderClient<$Result.GetResult<Prisma.$CardOrderPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CardOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardOrderCountArgs} args - Arguments to filter CardOrders to count.
     * @example
     * // Count the number of CardOrders
     * const count = await prisma.cardOrder.count({
     *   where: {
     *     // ... the filter for the CardOrders we want to count
     *   }
     * })
    **/
    count<T extends CardOrderCountArgs>(
      args?: Subset<T, CardOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CardOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CardOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CardOrderAggregateArgs>(args: Subset<T, CardOrderAggregateArgs>): Prisma.PrismaPromise<GetCardOrderAggregateType<T>>

    /**
     * Group by CardOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CardOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CardOrderGroupByArgs['orderBy'] }
        : { orderBy?: CardOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CardOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCardOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CardOrder model
   */
  readonly fields: CardOrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CardOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CardOrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cardLimitTransactions<T extends CardOrder$cardLimitTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, CardOrder$cardLimitTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardLimitTransactionPayload<ExtArgs>, T, "findMany"> | Null>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CardOrder model
   */ 
  interface CardOrderFieldRefs {
    readonly id: FieldRef<"CardOrder", 'String'>
    readonly tenantId: FieldRef<"CardOrder", 'String'>
    readonly cardType: FieldRef<"CardOrder", 'CardType'>
    readonly quantity: FieldRef<"CardOrder", 'Int'>
    readonly unitPrice: FieldRef<"CardOrder", 'Decimal'>
    readonly totalPrice: FieldRef<"CardOrder", 'Decimal'>
    readonly status: FieldRef<"CardOrder", 'OrderStatus'>
    readonly storeName: FieldRef<"CardOrder", 'String'>
    readonly storePhone: FieldRef<"CardOrder", 'String'>
    readonly storeAddress: FieldRef<"CardOrder", 'String'>
    readonly customDesign: FieldRef<"CardOrder", 'String'>
    readonly shippingAddress: FieldRef<"CardOrder", 'String'>
    readonly trackingNumber: FieldRef<"CardOrder", 'String'>
    readonly createdAt: FieldRef<"CardOrder", 'DateTime'>
    readonly updatedAt: FieldRef<"CardOrder", 'DateTime'>
    readonly shippedAt: FieldRef<"CardOrder", 'DateTime'>
    readonly deliveredAt: FieldRef<"CardOrder", 'DateTime'>
    readonly approvedAt: FieldRef<"CardOrder", 'DateTime'>
    readonly approvedBy: FieldRef<"CardOrder", 'String'>
    readonly deductFromBalance: FieldRef<"CardOrder", 'Boolean'>
    readonly paidAt: FieldRef<"CardOrder", 'DateTime'>
    readonly sourceType: FieldRef<"CardOrder", 'OrderSourceType'>
    readonly stripePaymentId: FieldRef<"CardOrder", 'String'>
    readonly stripeSessionId: FieldRef<"CardOrder", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CardOrder findUnique
   */
  export type CardOrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardOrder
     */
    select?: CardOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardOrderInclude<ExtArgs> | null
    /**
     * Filter, which CardOrder to fetch.
     */
    where: CardOrderWhereUniqueInput
  }

  /**
   * CardOrder findUniqueOrThrow
   */
  export type CardOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardOrder
     */
    select?: CardOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardOrderInclude<ExtArgs> | null
    /**
     * Filter, which CardOrder to fetch.
     */
    where: CardOrderWhereUniqueInput
  }

  /**
   * CardOrder findFirst
   */
  export type CardOrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardOrder
     */
    select?: CardOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardOrderInclude<ExtArgs> | null
    /**
     * Filter, which CardOrder to fetch.
     */
    where?: CardOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardOrders to fetch.
     */
    orderBy?: CardOrderOrderByWithRelationInput | CardOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CardOrders.
     */
    cursor?: CardOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CardOrders.
     */
    distinct?: CardOrderScalarFieldEnum | CardOrderScalarFieldEnum[]
  }

  /**
   * CardOrder findFirstOrThrow
   */
  export type CardOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardOrder
     */
    select?: CardOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardOrderInclude<ExtArgs> | null
    /**
     * Filter, which CardOrder to fetch.
     */
    where?: CardOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardOrders to fetch.
     */
    orderBy?: CardOrderOrderByWithRelationInput | CardOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CardOrders.
     */
    cursor?: CardOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CardOrders.
     */
    distinct?: CardOrderScalarFieldEnum | CardOrderScalarFieldEnum[]
  }

  /**
   * CardOrder findMany
   */
  export type CardOrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardOrder
     */
    select?: CardOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardOrderInclude<ExtArgs> | null
    /**
     * Filter, which CardOrders to fetch.
     */
    where?: CardOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardOrders to fetch.
     */
    orderBy?: CardOrderOrderByWithRelationInput | CardOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CardOrders.
     */
    cursor?: CardOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardOrders.
     */
    skip?: number
    distinct?: CardOrderScalarFieldEnum | CardOrderScalarFieldEnum[]
  }

  /**
   * CardOrder create
   */
  export type CardOrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardOrder
     */
    select?: CardOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardOrderInclude<ExtArgs> | null
    /**
     * The data needed to create a CardOrder.
     */
    data: XOR<CardOrderCreateInput, CardOrderUncheckedCreateInput>
  }

  /**
   * CardOrder createMany
   */
  export type CardOrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CardOrders.
     */
    data: CardOrderCreateManyInput | CardOrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CardOrder createManyAndReturn
   */
  export type CardOrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardOrder
     */
    select?: CardOrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CardOrders.
     */
    data: CardOrderCreateManyInput | CardOrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardOrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CardOrder update
   */
  export type CardOrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardOrder
     */
    select?: CardOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardOrderInclude<ExtArgs> | null
    /**
     * The data needed to update a CardOrder.
     */
    data: XOR<CardOrderUpdateInput, CardOrderUncheckedUpdateInput>
    /**
     * Choose, which CardOrder to update.
     */
    where: CardOrderWhereUniqueInput
  }

  /**
   * CardOrder updateMany
   */
  export type CardOrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CardOrders.
     */
    data: XOR<CardOrderUpdateManyMutationInput, CardOrderUncheckedUpdateManyInput>
    /**
     * Filter which CardOrders to update
     */
    where?: CardOrderWhereInput
  }

  /**
   * CardOrder upsert
   */
  export type CardOrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardOrder
     */
    select?: CardOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardOrderInclude<ExtArgs> | null
    /**
     * The filter to search for the CardOrder to update in case it exists.
     */
    where: CardOrderWhereUniqueInput
    /**
     * In case the CardOrder found by the `where` argument doesn't exist, create a new CardOrder with this data.
     */
    create: XOR<CardOrderCreateInput, CardOrderUncheckedCreateInput>
    /**
     * In case the CardOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CardOrderUpdateInput, CardOrderUncheckedUpdateInput>
  }

  /**
   * CardOrder delete
   */
  export type CardOrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardOrder
     */
    select?: CardOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardOrderInclude<ExtArgs> | null
    /**
     * Filter which CardOrder to delete.
     */
    where: CardOrderWhereUniqueInput
  }

  /**
   * CardOrder deleteMany
   */
  export type CardOrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CardOrders to delete
     */
    where?: CardOrderWhereInput
  }

  /**
   * CardOrder.cardLimitTransactions
   */
  export type CardOrder$cardLimitTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardLimitTransaction
     */
    select?: CardLimitTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardLimitTransactionInclude<ExtArgs> | null
    where?: CardLimitTransactionWhereInput
    orderBy?: CardLimitTransactionOrderByWithRelationInput | CardLimitTransactionOrderByWithRelationInput[]
    cursor?: CardLimitTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CardLimitTransactionScalarFieldEnum | CardLimitTransactionScalarFieldEnum[]
  }

  /**
   * CardOrder without action
   */
  export type CardOrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardOrder
     */
    select?: CardOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardOrderInclude<ExtArgs> | null
  }


  /**
   * Model Plan
   */

  export type AggregatePlan = {
    _count: PlanCountAggregateOutputType | null
    _avg: PlanAvgAggregateOutputType | null
    _sum: PlanSumAggregateOutputType | null
    _min: PlanMinAggregateOutputType | null
    _max: PlanMaxAggregateOutputType | null
  }

  export type PlanAvgAggregateOutputType = {
    priceMonthly: number | null
    billingPeriodMultiplier: number | null
    maxStores: number | null
    maxStaff: number | null
    maxCards: number | null
    maxTransactions: number | null
    cardAllowance: number | null
  }

  export type PlanSumAggregateOutputType = {
    priceMonthly: number | null
    billingPeriodMultiplier: number | null
    maxStores: number | null
    maxStaff: number | null
    maxCards: number | null
    maxTransactions: number | null
    cardAllowance: number | null
  }

  export type PlanMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    priceMonthly: number | null
    billingPeriod: $Enums.BillingPeriod | null
    billingPeriodMultiplier: number | null
    stripePriceId: string | null
    maxStores: number | null
    maxStaff: number | null
    maxCards: number | null
    maxTransactions: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    allowCardOrdering: boolean | null
    cardAllowance: number | null
  }

  export type PlanMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    priceMonthly: number | null
    billingPeriod: $Enums.BillingPeriod | null
    billingPeriodMultiplier: number | null
    stripePriceId: string | null
    maxStores: number | null
    maxStaff: number | null
    maxCards: number | null
    maxTransactions: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    allowCardOrdering: boolean | null
    cardAllowance: number | null
  }

  export type PlanCountAggregateOutputType = {
    id: number
    name: number
    description: number
    priceMonthly: number
    billingPeriod: number
    billingPeriodMultiplier: number
    stripePriceId: number
    features: number
    maxStores: number
    maxStaff: number
    maxCards: number
    maxTransactions: number
    isActive: number
    createdAt: number
    updatedAt: number
    allowCardOrdering: number
    cardAllowance: number
    _all: number
  }


  export type PlanAvgAggregateInputType = {
    priceMonthly?: true
    billingPeriodMultiplier?: true
    maxStores?: true
    maxStaff?: true
    maxCards?: true
    maxTransactions?: true
    cardAllowance?: true
  }

  export type PlanSumAggregateInputType = {
    priceMonthly?: true
    billingPeriodMultiplier?: true
    maxStores?: true
    maxStaff?: true
    maxCards?: true
    maxTransactions?: true
    cardAllowance?: true
  }

  export type PlanMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    priceMonthly?: true
    billingPeriod?: true
    billingPeriodMultiplier?: true
    stripePriceId?: true
    maxStores?: true
    maxStaff?: true
    maxCards?: true
    maxTransactions?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    allowCardOrdering?: true
    cardAllowance?: true
  }

  export type PlanMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    priceMonthly?: true
    billingPeriod?: true
    billingPeriodMultiplier?: true
    stripePriceId?: true
    maxStores?: true
    maxStaff?: true
    maxCards?: true
    maxTransactions?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    allowCardOrdering?: true
    cardAllowance?: true
  }

  export type PlanCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    priceMonthly?: true
    billingPeriod?: true
    billingPeriodMultiplier?: true
    stripePriceId?: true
    features?: true
    maxStores?: true
    maxStaff?: true
    maxCards?: true
    maxTransactions?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    allowCardOrdering?: true
    cardAllowance?: true
    _all?: true
  }

  export type PlanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Plan to aggregate.
     */
    where?: PlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plans to fetch.
     */
    orderBy?: PlanOrderByWithRelationInput | PlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Plans
    **/
    _count?: true | PlanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlanMaxAggregateInputType
  }

  export type GetPlanAggregateType<T extends PlanAggregateArgs> = {
        [P in keyof T & keyof AggregatePlan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlan[P]>
      : GetScalarType<T[P], AggregatePlan[P]>
  }




  export type PlanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanWhereInput
    orderBy?: PlanOrderByWithAggregationInput | PlanOrderByWithAggregationInput[]
    by: PlanScalarFieldEnum[] | PlanScalarFieldEnum
    having?: PlanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlanCountAggregateInputType | true
    _avg?: PlanAvgAggregateInputType
    _sum?: PlanSumAggregateInputType
    _min?: PlanMinAggregateInputType
    _max?: PlanMaxAggregateInputType
  }

  export type PlanGroupByOutputType = {
    id: string
    name: string
    description: string
    priceMonthly: number
    billingPeriod: $Enums.BillingPeriod
    billingPeriodMultiplier: number
    stripePriceId: string
    features: string[]
    maxStores: number
    maxStaff: number
    maxCards: number
    maxTransactions: number
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    allowCardOrdering: boolean
    cardAllowance: number
    _count: PlanCountAggregateOutputType | null
    _avg: PlanAvgAggregateOutputType | null
    _sum: PlanSumAggregateOutputType | null
    _min: PlanMinAggregateOutputType | null
    _max: PlanMaxAggregateOutputType | null
  }

  type GetPlanGroupByPayload<T extends PlanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlanGroupByOutputType[P]>
            : GetScalarType<T[P], PlanGroupByOutputType[P]>
        }
      >
    >


  export type PlanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    priceMonthly?: boolean
    billingPeriod?: boolean
    billingPeriodMultiplier?: boolean
    stripePriceId?: boolean
    features?: boolean
    maxStores?: boolean
    maxStaff?: boolean
    maxCards?: boolean
    maxTransactions?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    allowCardOrdering?: boolean
    cardAllowance?: boolean
    cardLimitTransactions?: boolean | Plan$cardLimitTransactionsArgs<ExtArgs>
    tenants?: boolean | Plan$tenantsArgs<ExtArgs>
    payments?: boolean | Plan$paymentsArgs<ExtArgs>
    subscriptionEvents?: boolean | Plan$subscriptionEventsArgs<ExtArgs>
    previousSubscriptionEvents?: boolean | Plan$previousSubscriptionEventsArgs<ExtArgs>
    _count?: boolean | PlanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plan"]>

  export type PlanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    priceMonthly?: boolean
    billingPeriod?: boolean
    billingPeriodMultiplier?: boolean
    stripePriceId?: boolean
    features?: boolean
    maxStores?: boolean
    maxStaff?: boolean
    maxCards?: boolean
    maxTransactions?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    allowCardOrdering?: boolean
    cardAllowance?: boolean
  }, ExtArgs["result"]["plan"]>

  export type PlanSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    priceMonthly?: boolean
    billingPeriod?: boolean
    billingPeriodMultiplier?: boolean
    stripePriceId?: boolean
    features?: boolean
    maxStores?: boolean
    maxStaff?: boolean
    maxCards?: boolean
    maxTransactions?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    allowCardOrdering?: boolean
    cardAllowance?: boolean
  }

  export type PlanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cardLimitTransactions?: boolean | Plan$cardLimitTransactionsArgs<ExtArgs>
    tenants?: boolean | Plan$tenantsArgs<ExtArgs>
    payments?: boolean | Plan$paymentsArgs<ExtArgs>
    subscriptionEvents?: boolean | Plan$subscriptionEventsArgs<ExtArgs>
    previousSubscriptionEvents?: boolean | Plan$previousSubscriptionEventsArgs<ExtArgs>
    _count?: boolean | PlanCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PlanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PlanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Plan"
    objects: {
      cardLimitTransactions: Prisma.$CardLimitTransactionPayload<ExtArgs>[]
      tenants: Prisma.$TenantPayload<ExtArgs>[]
      payments: Prisma.$PaymentPayload<ExtArgs>[]
      subscriptionEvents: Prisma.$SubscriptionEventPayload<ExtArgs>[]
      previousSubscriptionEvents: Prisma.$SubscriptionEventPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      priceMonthly: number
      billingPeriod: $Enums.BillingPeriod
      billingPeriodMultiplier: number
      stripePriceId: string
      features: string[]
      maxStores: number
      maxStaff: number
      maxCards: number
      maxTransactions: number
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      allowCardOrdering: boolean
      cardAllowance: number
    }, ExtArgs["result"]["plan"]>
    composites: {}
  }

  type PlanGetPayload<S extends boolean | null | undefined | PlanDefaultArgs> = $Result.GetResult<Prisma.$PlanPayload, S>

  type PlanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlanFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlanCountAggregateInputType | true
    }

  export interface PlanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Plan'], meta: { name: 'Plan' } }
    /**
     * Find zero or one Plan that matches the filter.
     * @param {PlanFindUniqueArgs} args - Arguments to find a Plan
     * @example
     * // Get one Plan
     * const plan = await prisma.plan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlanFindUniqueArgs>(args: SelectSubset<T, PlanFindUniqueArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Plan that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PlanFindUniqueOrThrowArgs} args - Arguments to find a Plan
     * @example
     * // Get one Plan
     * const plan = await prisma.plan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlanFindUniqueOrThrowArgs>(args: SelectSubset<T, PlanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Plan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanFindFirstArgs} args - Arguments to find a Plan
     * @example
     * // Get one Plan
     * const plan = await prisma.plan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlanFindFirstArgs>(args?: SelectSubset<T, PlanFindFirstArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Plan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanFindFirstOrThrowArgs} args - Arguments to find a Plan
     * @example
     * // Get one Plan
     * const plan = await prisma.plan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlanFindFirstOrThrowArgs>(args?: SelectSubset<T, PlanFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Plans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Plans
     * const plans = await prisma.plan.findMany()
     * 
     * // Get first 10 Plans
     * const plans = await prisma.plan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const planWithIdOnly = await prisma.plan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlanFindManyArgs>(args?: SelectSubset<T, PlanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Plan.
     * @param {PlanCreateArgs} args - Arguments to create a Plan.
     * @example
     * // Create one Plan
     * const Plan = await prisma.plan.create({
     *   data: {
     *     // ... data to create a Plan
     *   }
     * })
     * 
     */
    create<T extends PlanCreateArgs>(args: SelectSubset<T, PlanCreateArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Plans.
     * @param {PlanCreateManyArgs} args - Arguments to create many Plans.
     * @example
     * // Create many Plans
     * const plan = await prisma.plan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlanCreateManyArgs>(args?: SelectSubset<T, PlanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Plans and returns the data saved in the database.
     * @param {PlanCreateManyAndReturnArgs} args - Arguments to create many Plans.
     * @example
     * // Create many Plans
     * const plan = await prisma.plan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Plans and only return the `id`
     * const planWithIdOnly = await prisma.plan.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlanCreateManyAndReturnArgs>(args?: SelectSubset<T, PlanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Plan.
     * @param {PlanDeleteArgs} args - Arguments to delete one Plan.
     * @example
     * // Delete one Plan
     * const Plan = await prisma.plan.delete({
     *   where: {
     *     // ... filter to delete one Plan
     *   }
     * })
     * 
     */
    delete<T extends PlanDeleteArgs>(args: SelectSubset<T, PlanDeleteArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Plan.
     * @param {PlanUpdateArgs} args - Arguments to update one Plan.
     * @example
     * // Update one Plan
     * const plan = await prisma.plan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlanUpdateArgs>(args: SelectSubset<T, PlanUpdateArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Plans.
     * @param {PlanDeleteManyArgs} args - Arguments to filter Plans to delete.
     * @example
     * // Delete a few Plans
     * const { count } = await prisma.plan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlanDeleteManyArgs>(args?: SelectSubset<T, PlanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Plans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Plans
     * const plan = await prisma.plan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlanUpdateManyArgs>(args: SelectSubset<T, PlanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Plan.
     * @param {PlanUpsertArgs} args - Arguments to update or create a Plan.
     * @example
     * // Update or create a Plan
     * const plan = await prisma.plan.upsert({
     *   create: {
     *     // ... data to create a Plan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Plan we want to update
     *   }
     * })
     */
    upsert<T extends PlanUpsertArgs>(args: SelectSubset<T, PlanUpsertArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Plans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanCountArgs} args - Arguments to filter Plans to count.
     * @example
     * // Count the number of Plans
     * const count = await prisma.plan.count({
     *   where: {
     *     // ... the filter for the Plans we want to count
     *   }
     * })
    **/
    count<T extends PlanCountArgs>(
      args?: Subset<T, PlanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Plan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlanAggregateArgs>(args: Subset<T, PlanAggregateArgs>): Prisma.PrismaPromise<GetPlanAggregateType<T>>

    /**
     * Group by Plan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlanGroupByArgs['orderBy'] }
        : { orderBy?: PlanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Plan model
   */
  readonly fields: PlanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Plan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cardLimitTransactions<T extends Plan$cardLimitTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, Plan$cardLimitTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardLimitTransactionPayload<ExtArgs>, T, "findMany"> | Null>
    tenants<T extends Plan$tenantsArgs<ExtArgs> = {}>(args?: Subset<T, Plan$tenantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findMany"> | Null>
    payments<T extends Plan$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, Plan$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany"> | Null>
    subscriptionEvents<T extends Plan$subscriptionEventsArgs<ExtArgs> = {}>(args?: Subset<T, Plan$subscriptionEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionEventPayload<ExtArgs>, T, "findMany"> | Null>
    previousSubscriptionEvents<T extends Plan$previousSubscriptionEventsArgs<ExtArgs> = {}>(args?: Subset<T, Plan$previousSubscriptionEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionEventPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Plan model
   */ 
  interface PlanFieldRefs {
    readonly id: FieldRef<"Plan", 'String'>
    readonly name: FieldRef<"Plan", 'String'>
    readonly description: FieldRef<"Plan", 'String'>
    readonly priceMonthly: FieldRef<"Plan", 'Int'>
    readonly billingPeriod: FieldRef<"Plan", 'BillingPeriod'>
    readonly billingPeriodMultiplier: FieldRef<"Plan", 'Int'>
    readonly stripePriceId: FieldRef<"Plan", 'String'>
    readonly features: FieldRef<"Plan", 'String[]'>
    readonly maxStores: FieldRef<"Plan", 'Int'>
    readonly maxStaff: FieldRef<"Plan", 'Int'>
    readonly maxCards: FieldRef<"Plan", 'Int'>
    readonly maxTransactions: FieldRef<"Plan", 'Int'>
    readonly isActive: FieldRef<"Plan", 'Boolean'>
    readonly createdAt: FieldRef<"Plan", 'DateTime'>
    readonly updatedAt: FieldRef<"Plan", 'DateTime'>
    readonly allowCardOrdering: FieldRef<"Plan", 'Boolean'>
    readonly cardAllowance: FieldRef<"Plan", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Plan findUnique
   */
  export type PlanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter, which Plan to fetch.
     */
    where: PlanWhereUniqueInput
  }

  /**
   * Plan findUniqueOrThrow
   */
  export type PlanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter, which Plan to fetch.
     */
    where: PlanWhereUniqueInput
  }

  /**
   * Plan findFirst
   */
  export type PlanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter, which Plan to fetch.
     */
    where?: PlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plans to fetch.
     */
    orderBy?: PlanOrderByWithRelationInput | PlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Plans.
     */
    cursor?: PlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Plans.
     */
    distinct?: PlanScalarFieldEnum | PlanScalarFieldEnum[]
  }

  /**
   * Plan findFirstOrThrow
   */
  export type PlanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter, which Plan to fetch.
     */
    where?: PlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plans to fetch.
     */
    orderBy?: PlanOrderByWithRelationInput | PlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Plans.
     */
    cursor?: PlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Plans.
     */
    distinct?: PlanScalarFieldEnum | PlanScalarFieldEnum[]
  }

  /**
   * Plan findMany
   */
  export type PlanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter, which Plans to fetch.
     */
    where?: PlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plans to fetch.
     */
    orderBy?: PlanOrderByWithRelationInput | PlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Plans.
     */
    cursor?: PlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plans.
     */
    skip?: number
    distinct?: PlanScalarFieldEnum | PlanScalarFieldEnum[]
  }

  /**
   * Plan create
   */
  export type PlanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * The data needed to create a Plan.
     */
    data: XOR<PlanCreateInput, PlanUncheckedCreateInput>
  }

  /**
   * Plan createMany
   */
  export type PlanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Plans.
     */
    data: PlanCreateManyInput | PlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Plan createManyAndReturn
   */
  export type PlanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Plans.
     */
    data: PlanCreateManyInput | PlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Plan update
   */
  export type PlanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * The data needed to update a Plan.
     */
    data: XOR<PlanUpdateInput, PlanUncheckedUpdateInput>
    /**
     * Choose, which Plan to update.
     */
    where: PlanWhereUniqueInput
  }

  /**
   * Plan updateMany
   */
  export type PlanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Plans.
     */
    data: XOR<PlanUpdateManyMutationInput, PlanUncheckedUpdateManyInput>
    /**
     * Filter which Plans to update
     */
    where?: PlanWhereInput
  }

  /**
   * Plan upsert
   */
  export type PlanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * The filter to search for the Plan to update in case it exists.
     */
    where: PlanWhereUniqueInput
    /**
     * In case the Plan found by the `where` argument doesn't exist, create a new Plan with this data.
     */
    create: XOR<PlanCreateInput, PlanUncheckedCreateInput>
    /**
     * In case the Plan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlanUpdateInput, PlanUncheckedUpdateInput>
  }

  /**
   * Plan delete
   */
  export type PlanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter which Plan to delete.
     */
    where: PlanWhereUniqueInput
  }

  /**
   * Plan deleteMany
   */
  export type PlanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Plans to delete
     */
    where?: PlanWhereInput
  }

  /**
   * Plan.cardLimitTransactions
   */
  export type Plan$cardLimitTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardLimitTransaction
     */
    select?: CardLimitTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardLimitTransactionInclude<ExtArgs> | null
    where?: CardLimitTransactionWhereInput
    orderBy?: CardLimitTransactionOrderByWithRelationInput | CardLimitTransactionOrderByWithRelationInput[]
    cursor?: CardLimitTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CardLimitTransactionScalarFieldEnum | CardLimitTransactionScalarFieldEnum[]
  }

  /**
   * Plan.tenants
   */
  export type Plan$tenantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    where?: TenantWhereInput
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    cursor?: TenantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Plan.payments
   */
  export type Plan$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Plan.subscriptionEvents
   */
  export type Plan$subscriptionEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionEvent
     */
    select?: SubscriptionEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionEventInclude<ExtArgs> | null
    where?: SubscriptionEventWhereInput
    orderBy?: SubscriptionEventOrderByWithRelationInput | SubscriptionEventOrderByWithRelationInput[]
    cursor?: SubscriptionEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubscriptionEventScalarFieldEnum | SubscriptionEventScalarFieldEnum[]
  }

  /**
   * Plan.previousSubscriptionEvents
   */
  export type Plan$previousSubscriptionEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionEvent
     */
    select?: SubscriptionEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionEventInclude<ExtArgs> | null
    where?: SubscriptionEventWhereInput
    orderBy?: SubscriptionEventOrderByWithRelationInput | SubscriptionEventOrderByWithRelationInput[]
    cursor?: SubscriptionEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubscriptionEventScalarFieldEnum | SubscriptionEventScalarFieldEnum[]
  }

  /**
   * Plan without action
   */
  export type PlanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
  }


  /**
   * Model CardLimitTransaction
   */

  export type AggregateCardLimitTransaction = {
    _count: CardLimitTransactionCountAggregateOutputType | null
    _avg: CardLimitTransactionAvgAggregateOutputType | null
    _sum: CardLimitTransactionSumAggregateOutputType | null
    _min: CardLimitTransactionMinAggregateOutputType | null
    _max: CardLimitTransactionMaxAggregateOutputType | null
  }

  export type CardLimitTransactionAvgAggregateOutputType = {
    amount: number | null
    previousBalance: number | null
    newBalance: number | null
  }

  export type CardLimitTransactionSumAggregateOutputType = {
    amount: number | null
    previousBalance: number | null
    newBalance: number | null
  }

  export type CardLimitTransactionMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    type: $Enums.CardLimitTransactionType | null
    source: $Enums.CardLimitTransactionSource | null
    amount: number | null
    previousBalance: number | null
    newBalance: number | null
    description: string | null
    relatedOrderId: string | null
    relatedPlanId: string | null
    createdAt: Date | null
    createdBy: string | null
  }

  export type CardLimitTransactionMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    type: $Enums.CardLimitTransactionType | null
    source: $Enums.CardLimitTransactionSource | null
    amount: number | null
    previousBalance: number | null
    newBalance: number | null
    description: string | null
    relatedOrderId: string | null
    relatedPlanId: string | null
    createdAt: Date | null
    createdBy: string | null
  }

  export type CardLimitTransactionCountAggregateOutputType = {
    id: number
    tenantId: number
    type: number
    source: number
    amount: number
    previousBalance: number
    newBalance: number
    description: number
    relatedOrderId: number
    relatedPlanId: number
    createdAt: number
    createdBy: number
    _all: number
  }


  export type CardLimitTransactionAvgAggregateInputType = {
    amount?: true
    previousBalance?: true
    newBalance?: true
  }

  export type CardLimitTransactionSumAggregateInputType = {
    amount?: true
    previousBalance?: true
    newBalance?: true
  }

  export type CardLimitTransactionMinAggregateInputType = {
    id?: true
    tenantId?: true
    type?: true
    source?: true
    amount?: true
    previousBalance?: true
    newBalance?: true
    description?: true
    relatedOrderId?: true
    relatedPlanId?: true
    createdAt?: true
    createdBy?: true
  }

  export type CardLimitTransactionMaxAggregateInputType = {
    id?: true
    tenantId?: true
    type?: true
    source?: true
    amount?: true
    previousBalance?: true
    newBalance?: true
    description?: true
    relatedOrderId?: true
    relatedPlanId?: true
    createdAt?: true
    createdBy?: true
  }

  export type CardLimitTransactionCountAggregateInputType = {
    id?: true
    tenantId?: true
    type?: true
    source?: true
    amount?: true
    previousBalance?: true
    newBalance?: true
    description?: true
    relatedOrderId?: true
    relatedPlanId?: true
    createdAt?: true
    createdBy?: true
    _all?: true
  }

  export type CardLimitTransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CardLimitTransaction to aggregate.
     */
    where?: CardLimitTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardLimitTransactions to fetch.
     */
    orderBy?: CardLimitTransactionOrderByWithRelationInput | CardLimitTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CardLimitTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardLimitTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardLimitTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CardLimitTransactions
    **/
    _count?: true | CardLimitTransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CardLimitTransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CardLimitTransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CardLimitTransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CardLimitTransactionMaxAggregateInputType
  }

  export type GetCardLimitTransactionAggregateType<T extends CardLimitTransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateCardLimitTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCardLimitTransaction[P]>
      : GetScalarType<T[P], AggregateCardLimitTransaction[P]>
  }




  export type CardLimitTransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardLimitTransactionWhereInput
    orderBy?: CardLimitTransactionOrderByWithAggregationInput | CardLimitTransactionOrderByWithAggregationInput[]
    by: CardLimitTransactionScalarFieldEnum[] | CardLimitTransactionScalarFieldEnum
    having?: CardLimitTransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CardLimitTransactionCountAggregateInputType | true
    _avg?: CardLimitTransactionAvgAggregateInputType
    _sum?: CardLimitTransactionSumAggregateInputType
    _min?: CardLimitTransactionMinAggregateInputType
    _max?: CardLimitTransactionMaxAggregateInputType
  }

  export type CardLimitTransactionGroupByOutputType = {
    id: string
    tenantId: string
    type: $Enums.CardLimitTransactionType
    source: $Enums.CardLimitTransactionSource
    amount: number
    previousBalance: number
    newBalance: number
    description: string | null
    relatedOrderId: string | null
    relatedPlanId: string | null
    createdAt: Date
    createdBy: string | null
    _count: CardLimitTransactionCountAggregateOutputType | null
    _avg: CardLimitTransactionAvgAggregateOutputType | null
    _sum: CardLimitTransactionSumAggregateOutputType | null
    _min: CardLimitTransactionMinAggregateOutputType | null
    _max: CardLimitTransactionMaxAggregateOutputType | null
  }

  type GetCardLimitTransactionGroupByPayload<T extends CardLimitTransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CardLimitTransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CardLimitTransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CardLimitTransactionGroupByOutputType[P]>
            : GetScalarType<T[P], CardLimitTransactionGroupByOutputType[P]>
        }
      >
    >


  export type CardLimitTransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    type?: boolean
    source?: boolean
    amount?: boolean
    previousBalance?: boolean
    newBalance?: boolean
    description?: boolean
    relatedOrderId?: boolean
    relatedPlanId?: boolean
    createdAt?: boolean
    createdBy?: boolean
    relatedOrder?: boolean | CardLimitTransaction$relatedOrderArgs<ExtArgs>
    relatedPlan?: boolean | CardLimitTransaction$relatedPlanArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cardLimitTransaction"]>

  export type CardLimitTransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    type?: boolean
    source?: boolean
    amount?: boolean
    previousBalance?: boolean
    newBalance?: boolean
    description?: boolean
    relatedOrderId?: boolean
    relatedPlanId?: boolean
    createdAt?: boolean
    createdBy?: boolean
    relatedOrder?: boolean | CardLimitTransaction$relatedOrderArgs<ExtArgs>
    relatedPlan?: boolean | CardLimitTransaction$relatedPlanArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cardLimitTransaction"]>

  export type CardLimitTransactionSelectScalar = {
    id?: boolean
    tenantId?: boolean
    type?: boolean
    source?: boolean
    amount?: boolean
    previousBalance?: boolean
    newBalance?: boolean
    description?: boolean
    relatedOrderId?: boolean
    relatedPlanId?: boolean
    createdAt?: boolean
    createdBy?: boolean
  }

  export type CardLimitTransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    relatedOrder?: boolean | CardLimitTransaction$relatedOrderArgs<ExtArgs>
    relatedPlan?: boolean | CardLimitTransaction$relatedPlanArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type CardLimitTransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    relatedOrder?: boolean | CardLimitTransaction$relatedOrderArgs<ExtArgs>
    relatedPlan?: boolean | CardLimitTransaction$relatedPlanArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $CardLimitTransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CardLimitTransaction"
    objects: {
      relatedOrder: Prisma.$CardOrderPayload<ExtArgs> | null
      relatedPlan: Prisma.$PlanPayload<ExtArgs> | null
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      type: $Enums.CardLimitTransactionType
      source: $Enums.CardLimitTransactionSource
      amount: number
      previousBalance: number
      newBalance: number
      description: string | null
      relatedOrderId: string | null
      relatedPlanId: string | null
      createdAt: Date
      createdBy: string | null
    }, ExtArgs["result"]["cardLimitTransaction"]>
    composites: {}
  }

  type CardLimitTransactionGetPayload<S extends boolean | null | undefined | CardLimitTransactionDefaultArgs> = $Result.GetResult<Prisma.$CardLimitTransactionPayload, S>

  type CardLimitTransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CardLimitTransactionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CardLimitTransactionCountAggregateInputType | true
    }

  export interface CardLimitTransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CardLimitTransaction'], meta: { name: 'CardLimitTransaction' } }
    /**
     * Find zero or one CardLimitTransaction that matches the filter.
     * @param {CardLimitTransactionFindUniqueArgs} args - Arguments to find a CardLimitTransaction
     * @example
     * // Get one CardLimitTransaction
     * const cardLimitTransaction = await prisma.cardLimitTransaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CardLimitTransactionFindUniqueArgs>(args: SelectSubset<T, CardLimitTransactionFindUniqueArgs<ExtArgs>>): Prisma__CardLimitTransactionClient<$Result.GetResult<Prisma.$CardLimitTransactionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CardLimitTransaction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CardLimitTransactionFindUniqueOrThrowArgs} args - Arguments to find a CardLimitTransaction
     * @example
     * // Get one CardLimitTransaction
     * const cardLimitTransaction = await prisma.cardLimitTransaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CardLimitTransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, CardLimitTransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CardLimitTransactionClient<$Result.GetResult<Prisma.$CardLimitTransactionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CardLimitTransaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardLimitTransactionFindFirstArgs} args - Arguments to find a CardLimitTransaction
     * @example
     * // Get one CardLimitTransaction
     * const cardLimitTransaction = await prisma.cardLimitTransaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CardLimitTransactionFindFirstArgs>(args?: SelectSubset<T, CardLimitTransactionFindFirstArgs<ExtArgs>>): Prisma__CardLimitTransactionClient<$Result.GetResult<Prisma.$CardLimitTransactionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CardLimitTransaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardLimitTransactionFindFirstOrThrowArgs} args - Arguments to find a CardLimitTransaction
     * @example
     * // Get one CardLimitTransaction
     * const cardLimitTransaction = await prisma.cardLimitTransaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CardLimitTransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, CardLimitTransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__CardLimitTransactionClient<$Result.GetResult<Prisma.$CardLimitTransactionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CardLimitTransactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardLimitTransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CardLimitTransactions
     * const cardLimitTransactions = await prisma.cardLimitTransaction.findMany()
     * 
     * // Get first 10 CardLimitTransactions
     * const cardLimitTransactions = await prisma.cardLimitTransaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cardLimitTransactionWithIdOnly = await prisma.cardLimitTransaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CardLimitTransactionFindManyArgs>(args?: SelectSubset<T, CardLimitTransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardLimitTransactionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CardLimitTransaction.
     * @param {CardLimitTransactionCreateArgs} args - Arguments to create a CardLimitTransaction.
     * @example
     * // Create one CardLimitTransaction
     * const CardLimitTransaction = await prisma.cardLimitTransaction.create({
     *   data: {
     *     // ... data to create a CardLimitTransaction
     *   }
     * })
     * 
     */
    create<T extends CardLimitTransactionCreateArgs>(args: SelectSubset<T, CardLimitTransactionCreateArgs<ExtArgs>>): Prisma__CardLimitTransactionClient<$Result.GetResult<Prisma.$CardLimitTransactionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CardLimitTransactions.
     * @param {CardLimitTransactionCreateManyArgs} args - Arguments to create many CardLimitTransactions.
     * @example
     * // Create many CardLimitTransactions
     * const cardLimitTransaction = await prisma.cardLimitTransaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CardLimitTransactionCreateManyArgs>(args?: SelectSubset<T, CardLimitTransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CardLimitTransactions and returns the data saved in the database.
     * @param {CardLimitTransactionCreateManyAndReturnArgs} args - Arguments to create many CardLimitTransactions.
     * @example
     * // Create many CardLimitTransactions
     * const cardLimitTransaction = await prisma.cardLimitTransaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CardLimitTransactions and only return the `id`
     * const cardLimitTransactionWithIdOnly = await prisma.cardLimitTransaction.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CardLimitTransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, CardLimitTransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardLimitTransactionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CardLimitTransaction.
     * @param {CardLimitTransactionDeleteArgs} args - Arguments to delete one CardLimitTransaction.
     * @example
     * // Delete one CardLimitTransaction
     * const CardLimitTransaction = await prisma.cardLimitTransaction.delete({
     *   where: {
     *     // ... filter to delete one CardLimitTransaction
     *   }
     * })
     * 
     */
    delete<T extends CardLimitTransactionDeleteArgs>(args: SelectSubset<T, CardLimitTransactionDeleteArgs<ExtArgs>>): Prisma__CardLimitTransactionClient<$Result.GetResult<Prisma.$CardLimitTransactionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CardLimitTransaction.
     * @param {CardLimitTransactionUpdateArgs} args - Arguments to update one CardLimitTransaction.
     * @example
     * // Update one CardLimitTransaction
     * const cardLimitTransaction = await prisma.cardLimitTransaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CardLimitTransactionUpdateArgs>(args: SelectSubset<T, CardLimitTransactionUpdateArgs<ExtArgs>>): Prisma__CardLimitTransactionClient<$Result.GetResult<Prisma.$CardLimitTransactionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CardLimitTransactions.
     * @param {CardLimitTransactionDeleteManyArgs} args - Arguments to filter CardLimitTransactions to delete.
     * @example
     * // Delete a few CardLimitTransactions
     * const { count } = await prisma.cardLimitTransaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CardLimitTransactionDeleteManyArgs>(args?: SelectSubset<T, CardLimitTransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CardLimitTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardLimitTransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CardLimitTransactions
     * const cardLimitTransaction = await prisma.cardLimitTransaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CardLimitTransactionUpdateManyArgs>(args: SelectSubset<T, CardLimitTransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CardLimitTransaction.
     * @param {CardLimitTransactionUpsertArgs} args - Arguments to update or create a CardLimitTransaction.
     * @example
     * // Update or create a CardLimitTransaction
     * const cardLimitTransaction = await prisma.cardLimitTransaction.upsert({
     *   create: {
     *     // ... data to create a CardLimitTransaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CardLimitTransaction we want to update
     *   }
     * })
     */
    upsert<T extends CardLimitTransactionUpsertArgs>(args: SelectSubset<T, CardLimitTransactionUpsertArgs<ExtArgs>>): Prisma__CardLimitTransactionClient<$Result.GetResult<Prisma.$CardLimitTransactionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CardLimitTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardLimitTransactionCountArgs} args - Arguments to filter CardLimitTransactions to count.
     * @example
     * // Count the number of CardLimitTransactions
     * const count = await prisma.cardLimitTransaction.count({
     *   where: {
     *     // ... the filter for the CardLimitTransactions we want to count
     *   }
     * })
    **/
    count<T extends CardLimitTransactionCountArgs>(
      args?: Subset<T, CardLimitTransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CardLimitTransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CardLimitTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardLimitTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CardLimitTransactionAggregateArgs>(args: Subset<T, CardLimitTransactionAggregateArgs>): Prisma.PrismaPromise<GetCardLimitTransactionAggregateType<T>>

    /**
     * Group by CardLimitTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardLimitTransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CardLimitTransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CardLimitTransactionGroupByArgs['orderBy'] }
        : { orderBy?: CardLimitTransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CardLimitTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCardLimitTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CardLimitTransaction model
   */
  readonly fields: CardLimitTransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CardLimitTransaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CardLimitTransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    relatedOrder<T extends CardLimitTransaction$relatedOrderArgs<ExtArgs> = {}>(args?: Subset<T, CardLimitTransaction$relatedOrderArgs<ExtArgs>>): Prisma__CardOrderClient<$Result.GetResult<Prisma.$CardOrderPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    relatedPlan<T extends CardLimitTransaction$relatedPlanArgs<ExtArgs> = {}>(args?: Subset<T, CardLimitTransaction$relatedPlanArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CardLimitTransaction model
   */ 
  interface CardLimitTransactionFieldRefs {
    readonly id: FieldRef<"CardLimitTransaction", 'String'>
    readonly tenantId: FieldRef<"CardLimitTransaction", 'String'>
    readonly type: FieldRef<"CardLimitTransaction", 'CardLimitTransactionType'>
    readonly source: FieldRef<"CardLimitTransaction", 'CardLimitTransactionSource'>
    readonly amount: FieldRef<"CardLimitTransaction", 'Int'>
    readonly previousBalance: FieldRef<"CardLimitTransaction", 'Int'>
    readonly newBalance: FieldRef<"CardLimitTransaction", 'Int'>
    readonly description: FieldRef<"CardLimitTransaction", 'String'>
    readonly relatedOrderId: FieldRef<"CardLimitTransaction", 'String'>
    readonly relatedPlanId: FieldRef<"CardLimitTransaction", 'String'>
    readonly createdAt: FieldRef<"CardLimitTransaction", 'DateTime'>
    readonly createdBy: FieldRef<"CardLimitTransaction", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CardLimitTransaction findUnique
   */
  export type CardLimitTransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardLimitTransaction
     */
    select?: CardLimitTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardLimitTransactionInclude<ExtArgs> | null
    /**
     * Filter, which CardLimitTransaction to fetch.
     */
    where: CardLimitTransactionWhereUniqueInput
  }

  /**
   * CardLimitTransaction findUniqueOrThrow
   */
  export type CardLimitTransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardLimitTransaction
     */
    select?: CardLimitTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardLimitTransactionInclude<ExtArgs> | null
    /**
     * Filter, which CardLimitTransaction to fetch.
     */
    where: CardLimitTransactionWhereUniqueInput
  }

  /**
   * CardLimitTransaction findFirst
   */
  export type CardLimitTransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardLimitTransaction
     */
    select?: CardLimitTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardLimitTransactionInclude<ExtArgs> | null
    /**
     * Filter, which CardLimitTransaction to fetch.
     */
    where?: CardLimitTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardLimitTransactions to fetch.
     */
    orderBy?: CardLimitTransactionOrderByWithRelationInput | CardLimitTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CardLimitTransactions.
     */
    cursor?: CardLimitTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardLimitTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardLimitTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CardLimitTransactions.
     */
    distinct?: CardLimitTransactionScalarFieldEnum | CardLimitTransactionScalarFieldEnum[]
  }

  /**
   * CardLimitTransaction findFirstOrThrow
   */
  export type CardLimitTransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardLimitTransaction
     */
    select?: CardLimitTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardLimitTransactionInclude<ExtArgs> | null
    /**
     * Filter, which CardLimitTransaction to fetch.
     */
    where?: CardLimitTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardLimitTransactions to fetch.
     */
    orderBy?: CardLimitTransactionOrderByWithRelationInput | CardLimitTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CardLimitTransactions.
     */
    cursor?: CardLimitTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardLimitTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardLimitTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CardLimitTransactions.
     */
    distinct?: CardLimitTransactionScalarFieldEnum | CardLimitTransactionScalarFieldEnum[]
  }

  /**
   * CardLimitTransaction findMany
   */
  export type CardLimitTransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardLimitTransaction
     */
    select?: CardLimitTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardLimitTransactionInclude<ExtArgs> | null
    /**
     * Filter, which CardLimitTransactions to fetch.
     */
    where?: CardLimitTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardLimitTransactions to fetch.
     */
    orderBy?: CardLimitTransactionOrderByWithRelationInput | CardLimitTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CardLimitTransactions.
     */
    cursor?: CardLimitTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardLimitTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardLimitTransactions.
     */
    skip?: number
    distinct?: CardLimitTransactionScalarFieldEnum | CardLimitTransactionScalarFieldEnum[]
  }

  /**
   * CardLimitTransaction create
   */
  export type CardLimitTransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardLimitTransaction
     */
    select?: CardLimitTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardLimitTransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a CardLimitTransaction.
     */
    data: XOR<CardLimitTransactionCreateInput, CardLimitTransactionUncheckedCreateInput>
  }

  /**
   * CardLimitTransaction createMany
   */
  export type CardLimitTransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CardLimitTransactions.
     */
    data: CardLimitTransactionCreateManyInput | CardLimitTransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CardLimitTransaction createManyAndReturn
   */
  export type CardLimitTransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardLimitTransaction
     */
    select?: CardLimitTransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CardLimitTransactions.
     */
    data: CardLimitTransactionCreateManyInput | CardLimitTransactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardLimitTransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CardLimitTransaction update
   */
  export type CardLimitTransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardLimitTransaction
     */
    select?: CardLimitTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardLimitTransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a CardLimitTransaction.
     */
    data: XOR<CardLimitTransactionUpdateInput, CardLimitTransactionUncheckedUpdateInput>
    /**
     * Choose, which CardLimitTransaction to update.
     */
    where: CardLimitTransactionWhereUniqueInput
  }

  /**
   * CardLimitTransaction updateMany
   */
  export type CardLimitTransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CardLimitTransactions.
     */
    data: XOR<CardLimitTransactionUpdateManyMutationInput, CardLimitTransactionUncheckedUpdateManyInput>
    /**
     * Filter which CardLimitTransactions to update
     */
    where?: CardLimitTransactionWhereInput
  }

  /**
   * CardLimitTransaction upsert
   */
  export type CardLimitTransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardLimitTransaction
     */
    select?: CardLimitTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardLimitTransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the CardLimitTransaction to update in case it exists.
     */
    where: CardLimitTransactionWhereUniqueInput
    /**
     * In case the CardLimitTransaction found by the `where` argument doesn't exist, create a new CardLimitTransaction with this data.
     */
    create: XOR<CardLimitTransactionCreateInput, CardLimitTransactionUncheckedCreateInput>
    /**
     * In case the CardLimitTransaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CardLimitTransactionUpdateInput, CardLimitTransactionUncheckedUpdateInput>
  }

  /**
   * CardLimitTransaction delete
   */
  export type CardLimitTransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardLimitTransaction
     */
    select?: CardLimitTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardLimitTransactionInclude<ExtArgs> | null
    /**
     * Filter which CardLimitTransaction to delete.
     */
    where: CardLimitTransactionWhereUniqueInput
  }

  /**
   * CardLimitTransaction deleteMany
   */
  export type CardLimitTransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CardLimitTransactions to delete
     */
    where?: CardLimitTransactionWhereInput
  }

  /**
   * CardLimitTransaction.relatedOrder
   */
  export type CardLimitTransaction$relatedOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardOrder
     */
    select?: CardOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardOrderInclude<ExtArgs> | null
    where?: CardOrderWhereInput
  }

  /**
   * CardLimitTransaction.relatedPlan
   */
  export type CardLimitTransaction$relatedPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    where?: PlanWhereInput
  }

  /**
   * CardLimitTransaction without action
   */
  export type CardLimitTransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardLimitTransaction
     */
    select?: CardLimitTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardLimitTransactionInclude<ExtArgs> | null
  }


  /**
   * Model Payment
   */

  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    amount: number | null
  }

  export type PaymentSumAggregateOutputType = {
    amount: number | null
  }

  export type PaymentMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    planId: string | null
    stripeSubscriptionId: string | null
    stripeInvoiceId: string | null
    stripePaymentIntentId: string | null
    amount: number | null
    currency: string | null
    status: string | null
    description: string | null
    metadata: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    planId: string | null
    stripeSubscriptionId: string | null
    stripeInvoiceId: string | null
    stripePaymentIntentId: string | null
    amount: number | null
    currency: string | null
    status: string | null
    description: string | null
    metadata: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    tenantId: number
    planId: number
    stripeSubscriptionId: number
    stripeInvoiceId: number
    stripePaymentIntentId: number
    amount: number
    currency: number
    status: number
    description: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    amount?: true
  }

  export type PaymentSumAggregateInputType = {
    amount?: true
  }

  export type PaymentMinAggregateInputType = {
    id?: true
    tenantId?: true
    planId?: true
    stripeSubscriptionId?: true
    stripeInvoiceId?: true
    stripePaymentIntentId?: true
    amount?: true
    currency?: true
    status?: true
    description?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    tenantId?: true
    planId?: true
    stripeSubscriptionId?: true
    stripeInvoiceId?: true
    stripePaymentIntentId?: true
    amount?: true
    currency?: true
    status?: true
    description?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    tenantId?: true
    planId?: true
    stripeSubscriptionId?: true
    stripeInvoiceId?: true
    stripePaymentIntentId?: true
    amount?: true
    currency?: true
    status?: true
    description?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payment to aggregate.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type PaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithAggregationInput | PaymentOrderByWithAggregationInput[]
    by: PaymentScalarFieldEnum[] | PaymentScalarFieldEnum
    having?: PaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }

  export type PaymentGroupByOutputType = {
    id: string
    tenantId: string
    planId: string
    stripeSubscriptionId: string | null
    stripeInvoiceId: string | null
    stripePaymentIntentId: string | null
    amount: number
    currency: string
    status: string
    description: string | null
    metadata: string | null
    createdAt: Date
    updatedAt: Date
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends PaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type PaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    planId?: boolean
    stripeSubscriptionId?: boolean
    stripeInvoiceId?: boolean
    stripePaymentIntentId?: boolean
    amount?: boolean
    currency?: boolean
    status?: boolean
    description?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    plan?: boolean | PlanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    planId?: boolean
    stripeSubscriptionId?: boolean
    stripeInvoiceId?: boolean
    stripePaymentIntentId?: boolean
    amount?: boolean
    currency?: boolean
    status?: boolean
    description?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    plan?: boolean | PlanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectScalar = {
    id?: boolean
    tenantId?: boolean
    planId?: boolean
    stripeSubscriptionId?: boolean
    stripeInvoiceId?: boolean
    stripePaymentIntentId?: boolean
    amount?: boolean
    currency?: boolean
    status?: boolean
    description?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    plan?: boolean | PlanDefaultArgs<ExtArgs>
  }
  export type PaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    plan?: boolean | PlanDefaultArgs<ExtArgs>
  }

  export type $PaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Payment"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
      plan: Prisma.$PlanPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      planId: string
      stripeSubscriptionId: string | null
      stripeInvoiceId: string | null
      stripePaymentIntentId: string | null
      amount: number
      currency: string
      status: string
      description: string | null
      metadata: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["payment"]>
    composites: {}
  }

  type PaymentGetPayload<S extends boolean | null | undefined | PaymentDefaultArgs> = $Result.GetResult<Prisma.$PaymentPayload, S>

  type PaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PaymentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PaymentCountAggregateInputType | true
    }

  export interface PaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Payment'], meta: { name: 'Payment' } }
    /**
     * Find zero or one Payment that matches the filter.
     * @param {PaymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentFindUniqueArgs>(args: SelectSubset<T, PaymentFindUniqueArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Payment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PaymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentFindFirstArgs>(args?: SelectSubset<T, PaymentFindFirstArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Payment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentFindManyArgs>(args?: SelectSubset<T, PaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Payment.
     * @param {PaymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
     */
    create<T extends PaymentCreateArgs>(args: SelectSubset<T, PaymentCreateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Payments.
     * @param {PaymentCreateManyArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentCreateManyArgs>(args?: SelectSubset<T, PaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Payments and returns the data saved in the database.
     * @param {PaymentCreateManyAndReturnArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Payment.
     * @param {PaymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
     */
    delete<T extends PaymentDeleteArgs>(args: SelectSubset<T, PaymentDeleteArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Payment.
     * @param {PaymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentUpdateArgs>(args: SelectSubset<T, PaymentUpdateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Payments.
     * @param {PaymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentDeleteManyArgs>(args?: SelectSubset<T, PaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentUpdateManyArgs>(args: SelectSubset<T, PaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Payment.
     * @param {PaymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
     */
    upsert<T extends PaymentUpsertArgs>(args: SelectSubset<T, PaymentUpsertArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends PaymentCountArgs>(
      args?: Subset<T, PaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): Prisma.PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentGroupByArgs['orderBy'] }
        : { orderBy?: PaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Payment model
   */
  readonly fields: PaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    plan<T extends PlanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlanDefaultArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Payment model
   */ 
  interface PaymentFieldRefs {
    readonly id: FieldRef<"Payment", 'String'>
    readonly tenantId: FieldRef<"Payment", 'String'>
    readonly planId: FieldRef<"Payment", 'String'>
    readonly stripeSubscriptionId: FieldRef<"Payment", 'String'>
    readonly stripeInvoiceId: FieldRef<"Payment", 'String'>
    readonly stripePaymentIntentId: FieldRef<"Payment", 'String'>
    readonly amount: FieldRef<"Payment", 'Int'>
    readonly currency: FieldRef<"Payment", 'String'>
    readonly status: FieldRef<"Payment", 'String'>
    readonly description: FieldRef<"Payment", 'String'>
    readonly metadata: FieldRef<"Payment", 'String'>
    readonly createdAt: FieldRef<"Payment", 'DateTime'>
    readonly updatedAt: FieldRef<"Payment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Payment findUnique
   */
  export type PaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findUniqueOrThrow
   */
  export type PaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findFirst
   */
  export type PaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findFirstOrThrow
   */
  export type PaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findMany
   */
  export type PaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payments to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment create
   */
  export type PaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a Payment.
     */
    data: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
  }

  /**
   * Payment createMany
   */
  export type PaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Payment createManyAndReturn
   */
  export type PaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment update
   */
  export type PaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a Payment.
     */
    data: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
    /**
     * Choose, which Payment to update.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment updateMany
   */
  export type PaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
  }

  /**
   * Payment upsert
   */
  export type PaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the Payment to update in case it exists.
     */
    where: PaymentWhereUniqueInput
    /**
     * In case the Payment found by the `where` argument doesn't exist, create a new Payment with this data.
     */
    create: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
    /**
     * In case the Payment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
  }

  /**
   * Payment delete
   */
  export type PaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter which Payment to delete.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment deleteMany
   */
  export type PaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payments to delete
     */
    where?: PaymentWhereInput
  }

  /**
   * Payment without action
   */
  export type PaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
  }


  /**
   * Model SubscriptionEvent
   */

  export type AggregateSubscriptionEvent = {
    _count: SubscriptionEventCountAggregateOutputType | null
    _min: SubscriptionEventMinAggregateOutputType | null
    _max: SubscriptionEventMaxAggregateOutputType | null
  }

  export type SubscriptionEventMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    planId: string | null
    eventType: string | null
    previousPlanId: string | null
    stripeSubscriptionId: string | null
    metadata: string | null
    createdAt: Date | null
  }

  export type SubscriptionEventMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    planId: string | null
    eventType: string | null
    previousPlanId: string | null
    stripeSubscriptionId: string | null
    metadata: string | null
    createdAt: Date | null
  }

  export type SubscriptionEventCountAggregateOutputType = {
    id: number
    tenantId: number
    planId: number
    eventType: number
    previousPlanId: number
    stripeSubscriptionId: number
    metadata: number
    createdAt: number
    _all: number
  }


  export type SubscriptionEventMinAggregateInputType = {
    id?: true
    tenantId?: true
    planId?: true
    eventType?: true
    previousPlanId?: true
    stripeSubscriptionId?: true
    metadata?: true
    createdAt?: true
  }

  export type SubscriptionEventMaxAggregateInputType = {
    id?: true
    tenantId?: true
    planId?: true
    eventType?: true
    previousPlanId?: true
    stripeSubscriptionId?: true
    metadata?: true
    createdAt?: true
  }

  export type SubscriptionEventCountAggregateInputType = {
    id?: true
    tenantId?: true
    planId?: true
    eventType?: true
    previousPlanId?: true
    stripeSubscriptionId?: true
    metadata?: true
    createdAt?: true
    _all?: true
  }

  export type SubscriptionEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubscriptionEvent to aggregate.
     */
    where?: SubscriptionEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubscriptionEvents to fetch.
     */
    orderBy?: SubscriptionEventOrderByWithRelationInput | SubscriptionEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubscriptionEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubscriptionEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubscriptionEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SubscriptionEvents
    **/
    _count?: true | SubscriptionEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubscriptionEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubscriptionEventMaxAggregateInputType
  }

  export type GetSubscriptionEventAggregateType<T extends SubscriptionEventAggregateArgs> = {
        [P in keyof T & keyof AggregateSubscriptionEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubscriptionEvent[P]>
      : GetScalarType<T[P], AggregateSubscriptionEvent[P]>
  }




  export type SubscriptionEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionEventWhereInput
    orderBy?: SubscriptionEventOrderByWithAggregationInput | SubscriptionEventOrderByWithAggregationInput[]
    by: SubscriptionEventScalarFieldEnum[] | SubscriptionEventScalarFieldEnum
    having?: SubscriptionEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubscriptionEventCountAggregateInputType | true
    _min?: SubscriptionEventMinAggregateInputType
    _max?: SubscriptionEventMaxAggregateInputType
  }

  export type SubscriptionEventGroupByOutputType = {
    id: string
    tenantId: string
    planId: string
    eventType: string
    previousPlanId: string | null
    stripeSubscriptionId: string | null
    metadata: string | null
    createdAt: Date
    _count: SubscriptionEventCountAggregateOutputType | null
    _min: SubscriptionEventMinAggregateOutputType | null
    _max: SubscriptionEventMaxAggregateOutputType | null
  }

  type GetSubscriptionEventGroupByPayload<T extends SubscriptionEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubscriptionEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubscriptionEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubscriptionEventGroupByOutputType[P]>
            : GetScalarType<T[P], SubscriptionEventGroupByOutputType[P]>
        }
      >
    >


  export type SubscriptionEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    planId?: boolean
    eventType?: boolean
    previousPlanId?: boolean
    stripeSubscriptionId?: boolean
    metadata?: boolean
    createdAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    plan?: boolean | PlanDefaultArgs<ExtArgs>
    previousPlan?: boolean | SubscriptionEvent$previousPlanArgs<ExtArgs>
  }, ExtArgs["result"]["subscriptionEvent"]>

  export type SubscriptionEventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    planId?: boolean
    eventType?: boolean
    previousPlanId?: boolean
    stripeSubscriptionId?: boolean
    metadata?: boolean
    createdAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    plan?: boolean | PlanDefaultArgs<ExtArgs>
    previousPlan?: boolean | SubscriptionEvent$previousPlanArgs<ExtArgs>
  }, ExtArgs["result"]["subscriptionEvent"]>

  export type SubscriptionEventSelectScalar = {
    id?: boolean
    tenantId?: boolean
    planId?: boolean
    eventType?: boolean
    previousPlanId?: boolean
    stripeSubscriptionId?: boolean
    metadata?: boolean
    createdAt?: boolean
  }

  export type SubscriptionEventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    plan?: boolean | PlanDefaultArgs<ExtArgs>
    previousPlan?: boolean | SubscriptionEvent$previousPlanArgs<ExtArgs>
  }
  export type SubscriptionEventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    plan?: boolean | PlanDefaultArgs<ExtArgs>
    previousPlan?: boolean | SubscriptionEvent$previousPlanArgs<ExtArgs>
  }

  export type $SubscriptionEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SubscriptionEvent"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
      plan: Prisma.$PlanPayload<ExtArgs>
      previousPlan: Prisma.$PlanPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      planId: string
      eventType: string
      previousPlanId: string | null
      stripeSubscriptionId: string | null
      metadata: string | null
      createdAt: Date
    }, ExtArgs["result"]["subscriptionEvent"]>
    composites: {}
  }

  type SubscriptionEventGetPayload<S extends boolean | null | undefined | SubscriptionEventDefaultArgs> = $Result.GetResult<Prisma.$SubscriptionEventPayload, S>

  type SubscriptionEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SubscriptionEventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SubscriptionEventCountAggregateInputType | true
    }

  export interface SubscriptionEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SubscriptionEvent'], meta: { name: 'SubscriptionEvent' } }
    /**
     * Find zero or one SubscriptionEvent that matches the filter.
     * @param {SubscriptionEventFindUniqueArgs} args - Arguments to find a SubscriptionEvent
     * @example
     * // Get one SubscriptionEvent
     * const subscriptionEvent = await prisma.subscriptionEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubscriptionEventFindUniqueArgs>(args: SelectSubset<T, SubscriptionEventFindUniqueArgs<ExtArgs>>): Prisma__SubscriptionEventClient<$Result.GetResult<Prisma.$SubscriptionEventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SubscriptionEvent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SubscriptionEventFindUniqueOrThrowArgs} args - Arguments to find a SubscriptionEvent
     * @example
     * // Get one SubscriptionEvent
     * const subscriptionEvent = await prisma.subscriptionEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubscriptionEventFindUniqueOrThrowArgs>(args: SelectSubset<T, SubscriptionEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubscriptionEventClient<$Result.GetResult<Prisma.$SubscriptionEventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SubscriptionEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionEventFindFirstArgs} args - Arguments to find a SubscriptionEvent
     * @example
     * // Get one SubscriptionEvent
     * const subscriptionEvent = await prisma.subscriptionEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubscriptionEventFindFirstArgs>(args?: SelectSubset<T, SubscriptionEventFindFirstArgs<ExtArgs>>): Prisma__SubscriptionEventClient<$Result.GetResult<Prisma.$SubscriptionEventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SubscriptionEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionEventFindFirstOrThrowArgs} args - Arguments to find a SubscriptionEvent
     * @example
     * // Get one SubscriptionEvent
     * const subscriptionEvent = await prisma.subscriptionEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubscriptionEventFindFirstOrThrowArgs>(args?: SelectSubset<T, SubscriptionEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubscriptionEventClient<$Result.GetResult<Prisma.$SubscriptionEventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SubscriptionEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SubscriptionEvents
     * const subscriptionEvents = await prisma.subscriptionEvent.findMany()
     * 
     * // Get first 10 SubscriptionEvents
     * const subscriptionEvents = await prisma.subscriptionEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subscriptionEventWithIdOnly = await prisma.subscriptionEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubscriptionEventFindManyArgs>(args?: SelectSubset<T, SubscriptionEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionEventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SubscriptionEvent.
     * @param {SubscriptionEventCreateArgs} args - Arguments to create a SubscriptionEvent.
     * @example
     * // Create one SubscriptionEvent
     * const SubscriptionEvent = await prisma.subscriptionEvent.create({
     *   data: {
     *     // ... data to create a SubscriptionEvent
     *   }
     * })
     * 
     */
    create<T extends SubscriptionEventCreateArgs>(args: SelectSubset<T, SubscriptionEventCreateArgs<ExtArgs>>): Prisma__SubscriptionEventClient<$Result.GetResult<Prisma.$SubscriptionEventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SubscriptionEvents.
     * @param {SubscriptionEventCreateManyArgs} args - Arguments to create many SubscriptionEvents.
     * @example
     * // Create many SubscriptionEvents
     * const subscriptionEvent = await prisma.subscriptionEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubscriptionEventCreateManyArgs>(args?: SelectSubset<T, SubscriptionEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SubscriptionEvents and returns the data saved in the database.
     * @param {SubscriptionEventCreateManyAndReturnArgs} args - Arguments to create many SubscriptionEvents.
     * @example
     * // Create many SubscriptionEvents
     * const subscriptionEvent = await prisma.subscriptionEvent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SubscriptionEvents and only return the `id`
     * const subscriptionEventWithIdOnly = await prisma.subscriptionEvent.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubscriptionEventCreateManyAndReturnArgs>(args?: SelectSubset<T, SubscriptionEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionEventPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SubscriptionEvent.
     * @param {SubscriptionEventDeleteArgs} args - Arguments to delete one SubscriptionEvent.
     * @example
     * // Delete one SubscriptionEvent
     * const SubscriptionEvent = await prisma.subscriptionEvent.delete({
     *   where: {
     *     // ... filter to delete one SubscriptionEvent
     *   }
     * })
     * 
     */
    delete<T extends SubscriptionEventDeleteArgs>(args: SelectSubset<T, SubscriptionEventDeleteArgs<ExtArgs>>): Prisma__SubscriptionEventClient<$Result.GetResult<Prisma.$SubscriptionEventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SubscriptionEvent.
     * @param {SubscriptionEventUpdateArgs} args - Arguments to update one SubscriptionEvent.
     * @example
     * // Update one SubscriptionEvent
     * const subscriptionEvent = await prisma.subscriptionEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubscriptionEventUpdateArgs>(args: SelectSubset<T, SubscriptionEventUpdateArgs<ExtArgs>>): Prisma__SubscriptionEventClient<$Result.GetResult<Prisma.$SubscriptionEventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SubscriptionEvents.
     * @param {SubscriptionEventDeleteManyArgs} args - Arguments to filter SubscriptionEvents to delete.
     * @example
     * // Delete a few SubscriptionEvents
     * const { count } = await prisma.subscriptionEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubscriptionEventDeleteManyArgs>(args?: SelectSubset<T, SubscriptionEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubscriptionEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SubscriptionEvents
     * const subscriptionEvent = await prisma.subscriptionEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubscriptionEventUpdateManyArgs>(args: SelectSubset<T, SubscriptionEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SubscriptionEvent.
     * @param {SubscriptionEventUpsertArgs} args - Arguments to update or create a SubscriptionEvent.
     * @example
     * // Update or create a SubscriptionEvent
     * const subscriptionEvent = await prisma.subscriptionEvent.upsert({
     *   create: {
     *     // ... data to create a SubscriptionEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SubscriptionEvent we want to update
     *   }
     * })
     */
    upsert<T extends SubscriptionEventUpsertArgs>(args: SelectSubset<T, SubscriptionEventUpsertArgs<ExtArgs>>): Prisma__SubscriptionEventClient<$Result.GetResult<Prisma.$SubscriptionEventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SubscriptionEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionEventCountArgs} args - Arguments to filter SubscriptionEvents to count.
     * @example
     * // Count the number of SubscriptionEvents
     * const count = await prisma.subscriptionEvent.count({
     *   where: {
     *     // ... the filter for the SubscriptionEvents we want to count
     *   }
     * })
    **/
    count<T extends SubscriptionEventCountArgs>(
      args?: Subset<T, SubscriptionEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubscriptionEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SubscriptionEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubscriptionEventAggregateArgs>(args: Subset<T, SubscriptionEventAggregateArgs>): Prisma.PrismaPromise<GetSubscriptionEventAggregateType<T>>

    /**
     * Group by SubscriptionEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubscriptionEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubscriptionEventGroupByArgs['orderBy'] }
        : { orderBy?: SubscriptionEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubscriptionEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubscriptionEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SubscriptionEvent model
   */
  readonly fields: SubscriptionEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SubscriptionEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubscriptionEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    plan<T extends PlanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlanDefaultArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    previousPlan<T extends SubscriptionEvent$previousPlanArgs<ExtArgs> = {}>(args?: Subset<T, SubscriptionEvent$previousPlanArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SubscriptionEvent model
   */ 
  interface SubscriptionEventFieldRefs {
    readonly id: FieldRef<"SubscriptionEvent", 'String'>
    readonly tenantId: FieldRef<"SubscriptionEvent", 'String'>
    readonly planId: FieldRef<"SubscriptionEvent", 'String'>
    readonly eventType: FieldRef<"SubscriptionEvent", 'String'>
    readonly previousPlanId: FieldRef<"SubscriptionEvent", 'String'>
    readonly stripeSubscriptionId: FieldRef<"SubscriptionEvent", 'String'>
    readonly metadata: FieldRef<"SubscriptionEvent", 'String'>
    readonly createdAt: FieldRef<"SubscriptionEvent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SubscriptionEvent findUnique
   */
  export type SubscriptionEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionEvent
     */
    select?: SubscriptionEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionEventInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionEvent to fetch.
     */
    where: SubscriptionEventWhereUniqueInput
  }

  /**
   * SubscriptionEvent findUniqueOrThrow
   */
  export type SubscriptionEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionEvent
     */
    select?: SubscriptionEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionEventInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionEvent to fetch.
     */
    where: SubscriptionEventWhereUniqueInput
  }

  /**
   * SubscriptionEvent findFirst
   */
  export type SubscriptionEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionEvent
     */
    select?: SubscriptionEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionEventInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionEvent to fetch.
     */
    where?: SubscriptionEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubscriptionEvents to fetch.
     */
    orderBy?: SubscriptionEventOrderByWithRelationInput | SubscriptionEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubscriptionEvents.
     */
    cursor?: SubscriptionEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubscriptionEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubscriptionEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubscriptionEvents.
     */
    distinct?: SubscriptionEventScalarFieldEnum | SubscriptionEventScalarFieldEnum[]
  }

  /**
   * SubscriptionEvent findFirstOrThrow
   */
  export type SubscriptionEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionEvent
     */
    select?: SubscriptionEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionEventInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionEvent to fetch.
     */
    where?: SubscriptionEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubscriptionEvents to fetch.
     */
    orderBy?: SubscriptionEventOrderByWithRelationInput | SubscriptionEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubscriptionEvents.
     */
    cursor?: SubscriptionEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubscriptionEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubscriptionEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubscriptionEvents.
     */
    distinct?: SubscriptionEventScalarFieldEnum | SubscriptionEventScalarFieldEnum[]
  }

  /**
   * SubscriptionEvent findMany
   */
  export type SubscriptionEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionEvent
     */
    select?: SubscriptionEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionEventInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionEvents to fetch.
     */
    where?: SubscriptionEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubscriptionEvents to fetch.
     */
    orderBy?: SubscriptionEventOrderByWithRelationInput | SubscriptionEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SubscriptionEvents.
     */
    cursor?: SubscriptionEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubscriptionEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubscriptionEvents.
     */
    skip?: number
    distinct?: SubscriptionEventScalarFieldEnum | SubscriptionEventScalarFieldEnum[]
  }

  /**
   * SubscriptionEvent create
   */
  export type SubscriptionEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionEvent
     */
    select?: SubscriptionEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionEventInclude<ExtArgs> | null
    /**
     * The data needed to create a SubscriptionEvent.
     */
    data: XOR<SubscriptionEventCreateInput, SubscriptionEventUncheckedCreateInput>
  }

  /**
   * SubscriptionEvent createMany
   */
  export type SubscriptionEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SubscriptionEvents.
     */
    data: SubscriptionEventCreateManyInput | SubscriptionEventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SubscriptionEvent createManyAndReturn
   */
  export type SubscriptionEventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionEvent
     */
    select?: SubscriptionEventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SubscriptionEvents.
     */
    data: SubscriptionEventCreateManyInput | SubscriptionEventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionEventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SubscriptionEvent update
   */
  export type SubscriptionEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionEvent
     */
    select?: SubscriptionEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionEventInclude<ExtArgs> | null
    /**
     * The data needed to update a SubscriptionEvent.
     */
    data: XOR<SubscriptionEventUpdateInput, SubscriptionEventUncheckedUpdateInput>
    /**
     * Choose, which SubscriptionEvent to update.
     */
    where: SubscriptionEventWhereUniqueInput
  }

  /**
   * SubscriptionEvent updateMany
   */
  export type SubscriptionEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SubscriptionEvents.
     */
    data: XOR<SubscriptionEventUpdateManyMutationInput, SubscriptionEventUncheckedUpdateManyInput>
    /**
     * Filter which SubscriptionEvents to update
     */
    where?: SubscriptionEventWhereInput
  }

  /**
   * SubscriptionEvent upsert
   */
  export type SubscriptionEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionEvent
     */
    select?: SubscriptionEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionEventInclude<ExtArgs> | null
    /**
     * The filter to search for the SubscriptionEvent to update in case it exists.
     */
    where: SubscriptionEventWhereUniqueInput
    /**
     * In case the SubscriptionEvent found by the `where` argument doesn't exist, create a new SubscriptionEvent with this data.
     */
    create: XOR<SubscriptionEventCreateInput, SubscriptionEventUncheckedCreateInput>
    /**
     * In case the SubscriptionEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubscriptionEventUpdateInput, SubscriptionEventUncheckedUpdateInput>
  }

  /**
   * SubscriptionEvent delete
   */
  export type SubscriptionEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionEvent
     */
    select?: SubscriptionEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionEventInclude<ExtArgs> | null
    /**
     * Filter which SubscriptionEvent to delete.
     */
    where: SubscriptionEventWhereUniqueInput
  }

  /**
   * SubscriptionEvent deleteMany
   */
  export type SubscriptionEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubscriptionEvents to delete
     */
    where?: SubscriptionEventWhereInput
  }

  /**
   * SubscriptionEvent.previousPlan
   */
  export type SubscriptionEvent$previousPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    where?: PlanWhereInput
  }

  /**
   * SubscriptionEvent without action
   */
  export type SubscriptionEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionEvent
     */
    select?: SubscriptionEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionEventInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TenantScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    graceEndsAt: 'graceEndsAt',
    planId: 'planId',
    slug: 'slug',
    stripeCustomerId: 'stripeCustomerId',
    stripeSubscriptionId: 'stripeSubscriptionId',
    subscriptionStatus: 'subscriptionStatus',
    trialEndsAt: 'trialEndsAt',
    freeTrialActivations: 'freeTrialActivations',
    freeTrialCardsCreated: 'freeTrialCardsCreated',
    freeTrialLimit: 'freeTrialLimit',
    trialExpiredNotified: 'trialExpiredNotified',
    currentCardBalance: 'currentCardBalance',
    subscriptionCardLimit: 'subscriptionCardLimit',
    subscriptionCardsUsed: 'subscriptionCardsUsed',
    totalCardAllowance: 'totalCardAllowance'
  };

  export type TenantScalarFieldEnum = (typeof TenantScalarFieldEnum)[keyof typeof TenantScalarFieldEnum]


  export const StoreScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    name: 'name',
    address: 'address',
    active: 'active',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StoreScalarFieldEnum = (typeof StoreScalarFieldEnum)[keyof typeof StoreScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    email: 'email',
    passwordHash: 'passwordHash',
    role: 'role',
    storeId: 'storeId',
    firstName: 'firstName',
    lastName: 'lastName',
    active: 'active',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    lastLogin: 'lastLogin'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CustomerScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    firstName: 'firstName',
    lastName: 'lastName',
    phone: 'phone',
    email: 'email',
    tier: 'tier',
    totalSpend: 'totalSpend',
    active: 'active',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const CardScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    cardUid: 'cardUid',
    customerId: 'customerId',
    activatedAt: 'activatedAt',
    storeId: 'storeId',
    status: 'status',
    qrUrl: 'qrUrl',
    balanceCents: 'balanceCents',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CardScalarFieldEnum = (typeof CardScalarFieldEnum)[keyof typeof CardScalarFieldEnum]


  export const TransactionScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    storeId: 'storeId',
    cardId: 'cardId',
    customerId: 'customerId',
    cashierId: 'cashierId',
    type: 'type',
    category: 'category',
    amountCents: 'amountCents',
    cashbackCents: 'cashbackCents',
    beforeBalanceCents: 'beforeBalanceCents',
    afterBalanceCents: 'afterBalanceCents',
    note: 'note',
    sourceIp: 'sourceIp',
    createdAt: 'createdAt'
  };

  export type TransactionScalarFieldEnum = (typeof TransactionScalarFieldEnum)[keyof typeof TransactionScalarFieldEnum]


  export const TierRuleScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    tier: 'tier',
    name: 'name',
    minTotalSpendCents: 'minTotalSpendCents',
    baseRateBps: 'baseRateBps',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TierRuleScalarFieldEnum = (typeof TierRuleScalarFieldEnum)[keyof typeof TierRuleScalarFieldEnum]


  export const CashbackRuleScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    category: 'category',
    baseRateBps: 'baseRateBps',
    startAt: 'startAt',
    endAt: 'endAt',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CashbackRuleScalarFieldEnum = (typeof CashbackRuleScalarFieldEnum)[keyof typeof CashbackRuleScalarFieldEnum]


  export const OfferScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    name: 'name',
    description: 'description',
    rateMultiplierBps: 'rateMultiplierBps',
    startAt: 'startAt',
    endAt: 'endAt',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OfferScalarFieldEnum = (typeof OfferScalarFieldEnum)[keyof typeof OfferScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    customerId: 'customerId',
    channel: 'channel',
    template: 'template',
    payload: 'payload',
    status: 'status',
    error: 'error',
    createdAt: 'createdAt',
    sentAt: 'sentAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const CardOrderScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    cardType: 'cardType',
    quantity: 'quantity',
    unitPrice: 'unitPrice',
    totalPrice: 'totalPrice',
    status: 'status',
    storeName: 'storeName',
    storePhone: 'storePhone',
    storeAddress: 'storeAddress',
    customDesign: 'customDesign',
    shippingAddress: 'shippingAddress',
    trackingNumber: 'trackingNumber',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    shippedAt: 'shippedAt',
    deliveredAt: 'deliveredAt',
    approvedAt: 'approvedAt',
    approvedBy: 'approvedBy',
    deductFromBalance: 'deductFromBalance',
    paidAt: 'paidAt',
    sourceType: 'sourceType',
    stripePaymentId: 'stripePaymentId',
    stripeSessionId: 'stripeSessionId'
  };

  export type CardOrderScalarFieldEnum = (typeof CardOrderScalarFieldEnum)[keyof typeof CardOrderScalarFieldEnum]


  export const PlanScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    priceMonthly: 'priceMonthly',
    billingPeriod: 'billingPeriod',
    billingPeriodMultiplier: 'billingPeriodMultiplier',
    stripePriceId: 'stripePriceId',
    features: 'features',
    maxStores: 'maxStores',
    maxStaff: 'maxStaff',
    maxCards: 'maxCards',
    maxTransactions: 'maxTransactions',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    allowCardOrdering: 'allowCardOrdering',
    cardAllowance: 'cardAllowance'
  };

  export type PlanScalarFieldEnum = (typeof PlanScalarFieldEnum)[keyof typeof PlanScalarFieldEnum]


  export const CardLimitTransactionScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    type: 'type',
    source: 'source',
    amount: 'amount',
    previousBalance: 'previousBalance',
    newBalance: 'newBalance',
    description: 'description',
    relatedOrderId: 'relatedOrderId',
    relatedPlanId: 'relatedPlanId',
    createdAt: 'createdAt',
    createdBy: 'createdBy'
  };

  export type CardLimitTransactionScalarFieldEnum = (typeof CardLimitTransactionScalarFieldEnum)[keyof typeof CardLimitTransactionScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    planId: 'planId',
    stripeSubscriptionId: 'stripeSubscriptionId',
    stripeInvoiceId: 'stripeInvoiceId',
    stripePaymentIntentId: 'stripePaymentIntentId',
    amount: 'amount',
    currency: 'currency',
    status: 'status',
    description: 'description',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const SubscriptionEventScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    planId: 'planId',
    eventType: 'eventType',
    previousPlanId: 'previousPlanId',
    stripeSubscriptionId: 'stripeSubscriptionId',
    metadata: 'metadata',
    createdAt: 'createdAt'
  };

  export type SubscriptionEventScalarFieldEnum = (typeof SubscriptionEventScalarFieldEnum)[keyof typeof SubscriptionEventScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'SubscriptionStatus'
   */
  export type EnumSubscriptionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SubscriptionStatus'>
    


  /**
   * Reference to a field of type 'SubscriptionStatus[]'
   */
  export type ListEnumSubscriptionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SubscriptionStatus[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Tier'
   */
  export type EnumTierFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Tier'>
    


  /**
   * Reference to a field of type 'Tier[]'
   */
  export type ListEnumTierFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Tier[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'CardStatus'
   */
  export type EnumCardStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CardStatus'>
    


  /**
   * Reference to a field of type 'CardStatus[]'
   */
  export type ListEnumCardStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CardStatus[]'>
    


  /**
   * Reference to a field of type 'TxType'
   */
  export type EnumTxTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TxType'>
    


  /**
   * Reference to a field of type 'TxType[]'
   */
  export type ListEnumTxTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TxType[]'>
    


  /**
   * Reference to a field of type 'TxCategory'
   */
  export type EnumTxCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TxCategory'>
    


  /**
   * Reference to a field of type 'TxCategory[]'
   */
  export type ListEnumTxCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TxCategory[]'>
    


  /**
   * Reference to a field of type 'NotifChannel'
   */
  export type EnumNotifChannelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotifChannel'>
    


  /**
   * Reference to a field of type 'NotifChannel[]'
   */
  export type ListEnumNotifChannelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotifChannel[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'NotifStatus'
   */
  export type EnumNotifStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotifStatus'>
    


  /**
   * Reference to a field of type 'NotifStatus[]'
   */
  export type ListEnumNotifStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotifStatus[]'>
    


  /**
   * Reference to a field of type 'CardType'
   */
  export type EnumCardTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CardType'>
    


  /**
   * Reference to a field of type 'CardType[]'
   */
  export type ListEnumCardTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CardType[]'>
    


  /**
   * Reference to a field of type 'OrderStatus'
   */
  export type EnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus'>
    


  /**
   * Reference to a field of type 'OrderStatus[]'
   */
  export type ListEnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus[]'>
    


  /**
   * Reference to a field of type 'OrderSourceType'
   */
  export type EnumOrderSourceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderSourceType'>
    


  /**
   * Reference to a field of type 'OrderSourceType[]'
   */
  export type ListEnumOrderSourceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderSourceType[]'>
    


  /**
   * Reference to a field of type 'BillingPeriod'
   */
  export type EnumBillingPeriodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BillingPeriod'>
    


  /**
   * Reference to a field of type 'BillingPeriod[]'
   */
  export type ListEnumBillingPeriodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BillingPeriod[]'>
    


  /**
   * Reference to a field of type 'CardLimitTransactionType'
   */
  export type EnumCardLimitTransactionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CardLimitTransactionType'>
    


  /**
   * Reference to a field of type 'CardLimitTransactionType[]'
   */
  export type ListEnumCardLimitTransactionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CardLimitTransactionType[]'>
    


  /**
   * Reference to a field of type 'CardLimitTransactionSource'
   */
  export type EnumCardLimitTransactionSourceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CardLimitTransactionSource'>
    


  /**
   * Reference to a field of type 'CardLimitTransactionSource[]'
   */
  export type ListEnumCardLimitTransactionSourceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CardLimitTransactionSource[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type TenantWhereInput = {
    AND?: TenantWhereInput | TenantWhereInput[]
    OR?: TenantWhereInput[]
    NOT?: TenantWhereInput | TenantWhereInput[]
    id?: StringFilter<"Tenant"> | string
    name?: StringNullableFilter<"Tenant"> | string | null
    createdAt?: DateTimeFilter<"Tenant"> | Date | string
    updatedAt?: DateTimeFilter<"Tenant"> | Date | string
    graceEndsAt?: DateTimeNullableFilter<"Tenant"> | Date | string | null
    planId?: StringNullableFilter<"Tenant"> | string | null
    slug?: StringFilter<"Tenant"> | string
    stripeCustomerId?: StringNullableFilter<"Tenant"> | string | null
    stripeSubscriptionId?: StringNullableFilter<"Tenant"> | string | null
    subscriptionStatus?: EnumSubscriptionStatusFilter<"Tenant"> | $Enums.SubscriptionStatus
    trialEndsAt?: DateTimeNullableFilter<"Tenant"> | Date | string | null
    freeTrialActivations?: IntFilter<"Tenant"> | number
    freeTrialCardsCreated?: IntFilter<"Tenant"> | number
    freeTrialLimit?: IntFilter<"Tenant"> | number
    trialExpiredNotified?: BoolFilter<"Tenant"> | boolean
    currentCardBalance?: IntFilter<"Tenant"> | number
    subscriptionCardLimit?: IntFilter<"Tenant"> | number
    subscriptionCardsUsed?: IntFilter<"Tenant"> | number
    totalCardAllowance?: IntFilter<"Tenant"> | number
    cardLimitTransactions?: CardLimitTransactionListRelationFilter
    cardOrders?: CardOrderListRelationFilter
    cards?: CardListRelationFilter
    cashbackRules?: CashbackRuleListRelationFilter
    customers?: CustomerListRelationFilter
    notifications?: NotificationListRelationFilter
    offers?: OfferListRelationFilter
    stores?: StoreListRelationFilter
    plan?: XOR<PlanNullableRelationFilter, PlanWhereInput> | null
    tierRules?: TierRuleListRelationFilter
    transactions?: TransactionListRelationFilter
    users?: UserListRelationFilter
    payments?: PaymentListRelationFilter
    subscriptionEvents?: SubscriptionEventListRelationFilter
  }

  export type TenantOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    graceEndsAt?: SortOrderInput | SortOrder
    planId?: SortOrderInput | SortOrder
    slug?: SortOrder
    stripeCustomerId?: SortOrderInput | SortOrder
    stripeSubscriptionId?: SortOrderInput | SortOrder
    subscriptionStatus?: SortOrder
    trialEndsAt?: SortOrderInput | SortOrder
    freeTrialActivations?: SortOrder
    freeTrialCardsCreated?: SortOrder
    freeTrialLimit?: SortOrder
    trialExpiredNotified?: SortOrder
    currentCardBalance?: SortOrder
    subscriptionCardLimit?: SortOrder
    subscriptionCardsUsed?: SortOrder
    totalCardAllowance?: SortOrder
    cardLimitTransactions?: CardLimitTransactionOrderByRelationAggregateInput
    cardOrders?: CardOrderOrderByRelationAggregateInput
    cards?: CardOrderByRelationAggregateInput
    cashbackRules?: CashbackRuleOrderByRelationAggregateInput
    customers?: CustomerOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    offers?: OfferOrderByRelationAggregateInput
    stores?: StoreOrderByRelationAggregateInput
    plan?: PlanOrderByWithRelationInput
    tierRules?: TierRuleOrderByRelationAggregateInput
    transactions?: TransactionOrderByRelationAggregateInput
    users?: UserOrderByRelationAggregateInput
    payments?: PaymentOrderByRelationAggregateInput
    subscriptionEvents?: SubscriptionEventOrderByRelationAggregateInput
  }

  export type TenantWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: TenantWhereInput | TenantWhereInput[]
    OR?: TenantWhereInput[]
    NOT?: TenantWhereInput | TenantWhereInput[]
    name?: StringNullableFilter<"Tenant"> | string | null
    createdAt?: DateTimeFilter<"Tenant"> | Date | string
    updatedAt?: DateTimeFilter<"Tenant"> | Date | string
    graceEndsAt?: DateTimeNullableFilter<"Tenant"> | Date | string | null
    planId?: StringNullableFilter<"Tenant"> | string | null
    stripeCustomerId?: StringNullableFilter<"Tenant"> | string | null
    stripeSubscriptionId?: StringNullableFilter<"Tenant"> | string | null
    subscriptionStatus?: EnumSubscriptionStatusFilter<"Tenant"> | $Enums.SubscriptionStatus
    trialEndsAt?: DateTimeNullableFilter<"Tenant"> | Date | string | null
    freeTrialActivations?: IntFilter<"Tenant"> | number
    freeTrialCardsCreated?: IntFilter<"Tenant"> | number
    freeTrialLimit?: IntFilter<"Tenant"> | number
    trialExpiredNotified?: BoolFilter<"Tenant"> | boolean
    currentCardBalance?: IntFilter<"Tenant"> | number
    subscriptionCardLimit?: IntFilter<"Tenant"> | number
    subscriptionCardsUsed?: IntFilter<"Tenant"> | number
    totalCardAllowance?: IntFilter<"Tenant"> | number
    cardLimitTransactions?: CardLimitTransactionListRelationFilter
    cardOrders?: CardOrderListRelationFilter
    cards?: CardListRelationFilter
    cashbackRules?: CashbackRuleListRelationFilter
    customers?: CustomerListRelationFilter
    notifications?: NotificationListRelationFilter
    offers?: OfferListRelationFilter
    stores?: StoreListRelationFilter
    plan?: XOR<PlanNullableRelationFilter, PlanWhereInput> | null
    tierRules?: TierRuleListRelationFilter
    transactions?: TransactionListRelationFilter
    users?: UserListRelationFilter
    payments?: PaymentListRelationFilter
    subscriptionEvents?: SubscriptionEventListRelationFilter
  }, "id" | "slug">

  export type TenantOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    graceEndsAt?: SortOrderInput | SortOrder
    planId?: SortOrderInput | SortOrder
    slug?: SortOrder
    stripeCustomerId?: SortOrderInput | SortOrder
    stripeSubscriptionId?: SortOrderInput | SortOrder
    subscriptionStatus?: SortOrder
    trialEndsAt?: SortOrderInput | SortOrder
    freeTrialActivations?: SortOrder
    freeTrialCardsCreated?: SortOrder
    freeTrialLimit?: SortOrder
    trialExpiredNotified?: SortOrder
    currentCardBalance?: SortOrder
    subscriptionCardLimit?: SortOrder
    subscriptionCardsUsed?: SortOrder
    totalCardAllowance?: SortOrder
    _count?: TenantCountOrderByAggregateInput
    _avg?: TenantAvgOrderByAggregateInput
    _max?: TenantMaxOrderByAggregateInput
    _min?: TenantMinOrderByAggregateInput
    _sum?: TenantSumOrderByAggregateInput
  }

  export type TenantScalarWhereWithAggregatesInput = {
    AND?: TenantScalarWhereWithAggregatesInput | TenantScalarWhereWithAggregatesInput[]
    OR?: TenantScalarWhereWithAggregatesInput[]
    NOT?: TenantScalarWhereWithAggregatesInput | TenantScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Tenant"> | string
    name?: StringNullableWithAggregatesFilter<"Tenant"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Tenant"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Tenant"> | Date | string
    graceEndsAt?: DateTimeNullableWithAggregatesFilter<"Tenant"> | Date | string | null
    planId?: StringNullableWithAggregatesFilter<"Tenant"> | string | null
    slug?: StringWithAggregatesFilter<"Tenant"> | string
    stripeCustomerId?: StringNullableWithAggregatesFilter<"Tenant"> | string | null
    stripeSubscriptionId?: StringNullableWithAggregatesFilter<"Tenant"> | string | null
    subscriptionStatus?: EnumSubscriptionStatusWithAggregatesFilter<"Tenant"> | $Enums.SubscriptionStatus
    trialEndsAt?: DateTimeNullableWithAggregatesFilter<"Tenant"> | Date | string | null
    freeTrialActivations?: IntWithAggregatesFilter<"Tenant"> | number
    freeTrialCardsCreated?: IntWithAggregatesFilter<"Tenant"> | number
    freeTrialLimit?: IntWithAggregatesFilter<"Tenant"> | number
    trialExpiredNotified?: BoolWithAggregatesFilter<"Tenant"> | boolean
    currentCardBalance?: IntWithAggregatesFilter<"Tenant"> | number
    subscriptionCardLimit?: IntWithAggregatesFilter<"Tenant"> | number
    subscriptionCardsUsed?: IntWithAggregatesFilter<"Tenant"> | number
    totalCardAllowance?: IntWithAggregatesFilter<"Tenant"> | number
  }

  export type StoreWhereInput = {
    AND?: StoreWhereInput | StoreWhereInput[]
    OR?: StoreWhereInput[]
    NOT?: StoreWhereInput | StoreWhereInput[]
    id?: StringFilter<"Store"> | string
    tenantId?: StringFilter<"Store"> | string
    name?: StringFilter<"Store"> | string
    address?: StringNullableFilter<"Store"> | string | null
    active?: BoolFilter<"Store"> | boolean
    createdAt?: DateTimeFilter<"Store"> | Date | string
    updatedAt?: DateTimeFilter<"Store"> | Date | string
    cards?: CardListRelationFilter
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    transactions?: TransactionListRelationFilter
    users?: UserListRelationFilter
  }

  export type StoreOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrder
    address?: SortOrderInput | SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    cards?: CardOrderByRelationAggregateInput
    tenant?: TenantOrderByWithRelationInput
    transactions?: TransactionOrderByRelationAggregateInput
    users?: UserOrderByRelationAggregateInput
  }

  export type StoreWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StoreWhereInput | StoreWhereInput[]
    OR?: StoreWhereInput[]
    NOT?: StoreWhereInput | StoreWhereInput[]
    tenantId?: StringFilter<"Store"> | string
    name?: StringFilter<"Store"> | string
    address?: StringNullableFilter<"Store"> | string | null
    active?: BoolFilter<"Store"> | boolean
    createdAt?: DateTimeFilter<"Store"> | Date | string
    updatedAt?: DateTimeFilter<"Store"> | Date | string
    cards?: CardListRelationFilter
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    transactions?: TransactionListRelationFilter
    users?: UserListRelationFilter
  }, "id">

  export type StoreOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrder
    address?: SortOrderInput | SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StoreCountOrderByAggregateInput
    _max?: StoreMaxOrderByAggregateInput
    _min?: StoreMinOrderByAggregateInput
  }

  export type StoreScalarWhereWithAggregatesInput = {
    AND?: StoreScalarWhereWithAggregatesInput | StoreScalarWhereWithAggregatesInput[]
    OR?: StoreScalarWhereWithAggregatesInput[]
    NOT?: StoreScalarWhereWithAggregatesInput | StoreScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Store"> | string
    tenantId?: StringWithAggregatesFilter<"Store"> | string
    name?: StringWithAggregatesFilter<"Store"> | string
    address?: StringNullableWithAggregatesFilter<"Store"> | string | null
    active?: BoolWithAggregatesFilter<"Store"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Store"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Store"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    tenantId?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    storeId?: StringNullableFilter<"User"> | string | null
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    active?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    transactionsProcessed?: TransactionListRelationFilter
    store?: XOR<StoreNullableRelationFilter, StoreWhereInput> | null
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    storeId?: SortOrderInput | SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    transactionsProcessed?: TransactionOrderByRelationAggregateInput
    store?: StoreOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    tenantId?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    storeId?: StringNullableFilter<"User"> | string | null
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    active?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    transactionsProcessed?: TransactionListRelationFilter
    store?: XOR<StoreNullableRelationFilter, StoreWhereInput> | null
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    storeId?: SortOrderInput | SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    tenantId?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    storeId?: StringNullableWithAggregatesFilter<"User"> | string | null
    firstName?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    active?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    lastLogin?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type CustomerWhereInput = {
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    id?: StringFilter<"Customer"> | string
    tenantId?: StringFilter<"Customer"> | string
    firstName?: StringFilter<"Customer"> | string
    lastName?: StringFilter<"Customer"> | string
    phone?: StringNullableFilter<"Customer"> | string | null
    email?: StringNullableFilter<"Customer"> | string | null
    tier?: EnumTierFilter<"Customer"> | $Enums.Tier
    totalSpend?: DecimalFilter<"Customer"> | Decimal | DecimalJsLike | number | string
    active?: BoolFilter<"Customer"> | boolean
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
    cards?: CardListRelationFilter
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    notifications?: NotificationListRelationFilter
    transactions?: TransactionListRelationFilter
  }

  export type CustomerOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    tier?: SortOrder
    totalSpend?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    cards?: CardOrderByRelationAggregateInput
    tenant?: TenantOrderByWithRelationInput
    notifications?: NotificationOrderByRelationAggregateInput
    transactions?: TransactionOrderByRelationAggregateInput
  }

  export type CustomerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    tenantId?: StringFilter<"Customer"> | string
    firstName?: StringFilter<"Customer"> | string
    lastName?: StringFilter<"Customer"> | string
    phone?: StringNullableFilter<"Customer"> | string | null
    tier?: EnumTierFilter<"Customer"> | $Enums.Tier
    totalSpend?: DecimalFilter<"Customer"> | Decimal | DecimalJsLike | number | string
    active?: BoolFilter<"Customer"> | boolean
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
    cards?: CardListRelationFilter
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    notifications?: NotificationListRelationFilter
    transactions?: TransactionListRelationFilter
  }, "id" | "email">

  export type CustomerOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    tier?: SortOrder
    totalSpend?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CustomerCountOrderByAggregateInput
    _avg?: CustomerAvgOrderByAggregateInput
    _max?: CustomerMaxOrderByAggregateInput
    _min?: CustomerMinOrderByAggregateInput
    _sum?: CustomerSumOrderByAggregateInput
  }

  export type CustomerScalarWhereWithAggregatesInput = {
    AND?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    OR?: CustomerScalarWhereWithAggregatesInput[]
    NOT?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Customer"> | string
    tenantId?: StringWithAggregatesFilter<"Customer"> | string
    firstName?: StringWithAggregatesFilter<"Customer"> | string
    lastName?: StringWithAggregatesFilter<"Customer"> | string
    phone?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    email?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    tier?: EnumTierWithAggregatesFilter<"Customer"> | $Enums.Tier
    totalSpend?: DecimalWithAggregatesFilter<"Customer"> | Decimal | DecimalJsLike | number | string
    active?: BoolWithAggregatesFilter<"Customer"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Customer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Customer"> | Date | string
  }

  export type CardWhereInput = {
    AND?: CardWhereInput | CardWhereInput[]
    OR?: CardWhereInput[]
    NOT?: CardWhereInput | CardWhereInput[]
    id?: StringFilter<"Card"> | string
    tenantId?: StringFilter<"Card"> | string
    cardUid?: StringFilter<"Card"> | string
    customerId?: StringNullableFilter<"Card"> | string | null
    activatedAt?: DateTimeNullableFilter<"Card"> | Date | string | null
    storeId?: StringNullableFilter<"Card"> | string | null
    status?: EnumCardStatusFilter<"Card"> | $Enums.CardStatus
    qrUrl?: StringNullableFilter<"Card"> | string | null
    balanceCents?: IntFilter<"Card"> | number
    createdAt?: DateTimeFilter<"Card"> | Date | string
    updatedAt?: DateTimeFilter<"Card"> | Date | string
    customer?: XOR<CustomerNullableRelationFilter, CustomerWhereInput> | null
    store?: XOR<StoreNullableRelationFilter, StoreWhereInput> | null
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    transactions?: TransactionListRelationFilter
  }

  export type CardOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    cardUid?: SortOrder
    customerId?: SortOrderInput | SortOrder
    activatedAt?: SortOrderInput | SortOrder
    storeId?: SortOrderInput | SortOrder
    status?: SortOrder
    qrUrl?: SortOrderInput | SortOrder
    balanceCents?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customer?: CustomerOrderByWithRelationInput
    store?: StoreOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
    transactions?: TransactionOrderByRelationAggregateInput
  }

  export type CardWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    cardUid?: string
    AND?: CardWhereInput | CardWhereInput[]
    OR?: CardWhereInput[]
    NOT?: CardWhereInput | CardWhereInput[]
    tenantId?: StringFilter<"Card"> | string
    customerId?: StringNullableFilter<"Card"> | string | null
    activatedAt?: DateTimeNullableFilter<"Card"> | Date | string | null
    storeId?: StringNullableFilter<"Card"> | string | null
    status?: EnumCardStatusFilter<"Card"> | $Enums.CardStatus
    qrUrl?: StringNullableFilter<"Card"> | string | null
    balanceCents?: IntFilter<"Card"> | number
    createdAt?: DateTimeFilter<"Card"> | Date | string
    updatedAt?: DateTimeFilter<"Card"> | Date | string
    customer?: XOR<CustomerNullableRelationFilter, CustomerWhereInput> | null
    store?: XOR<StoreNullableRelationFilter, StoreWhereInput> | null
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    transactions?: TransactionListRelationFilter
  }, "id" | "cardUid">

  export type CardOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    cardUid?: SortOrder
    customerId?: SortOrderInput | SortOrder
    activatedAt?: SortOrderInput | SortOrder
    storeId?: SortOrderInput | SortOrder
    status?: SortOrder
    qrUrl?: SortOrderInput | SortOrder
    balanceCents?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CardCountOrderByAggregateInput
    _avg?: CardAvgOrderByAggregateInput
    _max?: CardMaxOrderByAggregateInput
    _min?: CardMinOrderByAggregateInput
    _sum?: CardSumOrderByAggregateInput
  }

  export type CardScalarWhereWithAggregatesInput = {
    AND?: CardScalarWhereWithAggregatesInput | CardScalarWhereWithAggregatesInput[]
    OR?: CardScalarWhereWithAggregatesInput[]
    NOT?: CardScalarWhereWithAggregatesInput | CardScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Card"> | string
    tenantId?: StringWithAggregatesFilter<"Card"> | string
    cardUid?: StringWithAggregatesFilter<"Card"> | string
    customerId?: StringNullableWithAggregatesFilter<"Card"> | string | null
    activatedAt?: DateTimeNullableWithAggregatesFilter<"Card"> | Date | string | null
    storeId?: StringNullableWithAggregatesFilter<"Card"> | string | null
    status?: EnumCardStatusWithAggregatesFilter<"Card"> | $Enums.CardStatus
    qrUrl?: StringNullableWithAggregatesFilter<"Card"> | string | null
    balanceCents?: IntWithAggregatesFilter<"Card"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Card"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Card"> | Date | string
  }

  export type TransactionWhereInput = {
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    id?: StringFilter<"Transaction"> | string
    tenantId?: StringFilter<"Transaction"> | string
    storeId?: StringFilter<"Transaction"> | string
    cardId?: StringFilter<"Transaction"> | string
    customerId?: StringFilter<"Transaction"> | string
    cashierId?: StringFilter<"Transaction"> | string
    type?: EnumTxTypeFilter<"Transaction"> | $Enums.TxType
    category?: EnumTxCategoryFilter<"Transaction"> | $Enums.TxCategory
    amountCents?: IntFilter<"Transaction"> | number
    cashbackCents?: IntFilter<"Transaction"> | number
    beforeBalanceCents?: IntFilter<"Transaction"> | number
    afterBalanceCents?: IntFilter<"Transaction"> | number
    note?: StringNullableFilter<"Transaction"> | string | null
    sourceIp?: StringNullableFilter<"Transaction"> | string | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    card?: XOR<CardRelationFilter, CardWhereInput>
    cashier?: XOR<UserRelationFilter, UserWhereInput>
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
    store?: XOR<StoreRelationFilter, StoreWhereInput>
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }

  export type TransactionOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    storeId?: SortOrder
    cardId?: SortOrder
    customerId?: SortOrder
    cashierId?: SortOrder
    type?: SortOrder
    category?: SortOrder
    amountCents?: SortOrder
    cashbackCents?: SortOrder
    beforeBalanceCents?: SortOrder
    afterBalanceCents?: SortOrder
    note?: SortOrderInput | SortOrder
    sourceIp?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    card?: CardOrderByWithRelationInput
    cashier?: UserOrderByWithRelationInput
    customer?: CustomerOrderByWithRelationInput
    store?: StoreOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type TransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    tenantId?: StringFilter<"Transaction"> | string
    storeId?: StringFilter<"Transaction"> | string
    cardId?: StringFilter<"Transaction"> | string
    customerId?: StringFilter<"Transaction"> | string
    cashierId?: StringFilter<"Transaction"> | string
    type?: EnumTxTypeFilter<"Transaction"> | $Enums.TxType
    category?: EnumTxCategoryFilter<"Transaction"> | $Enums.TxCategory
    amountCents?: IntFilter<"Transaction"> | number
    cashbackCents?: IntFilter<"Transaction"> | number
    beforeBalanceCents?: IntFilter<"Transaction"> | number
    afterBalanceCents?: IntFilter<"Transaction"> | number
    note?: StringNullableFilter<"Transaction"> | string | null
    sourceIp?: StringNullableFilter<"Transaction"> | string | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    card?: XOR<CardRelationFilter, CardWhereInput>
    cashier?: XOR<UserRelationFilter, UserWhereInput>
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
    store?: XOR<StoreRelationFilter, StoreWhereInput>
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }, "id">

  export type TransactionOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    storeId?: SortOrder
    cardId?: SortOrder
    customerId?: SortOrder
    cashierId?: SortOrder
    type?: SortOrder
    category?: SortOrder
    amountCents?: SortOrder
    cashbackCents?: SortOrder
    beforeBalanceCents?: SortOrder
    afterBalanceCents?: SortOrder
    note?: SortOrderInput | SortOrder
    sourceIp?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: TransactionCountOrderByAggregateInput
    _avg?: TransactionAvgOrderByAggregateInput
    _max?: TransactionMaxOrderByAggregateInput
    _min?: TransactionMinOrderByAggregateInput
    _sum?: TransactionSumOrderByAggregateInput
  }

  export type TransactionScalarWhereWithAggregatesInput = {
    AND?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    OR?: TransactionScalarWhereWithAggregatesInput[]
    NOT?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Transaction"> | string
    tenantId?: StringWithAggregatesFilter<"Transaction"> | string
    storeId?: StringWithAggregatesFilter<"Transaction"> | string
    cardId?: StringWithAggregatesFilter<"Transaction"> | string
    customerId?: StringWithAggregatesFilter<"Transaction"> | string
    cashierId?: StringWithAggregatesFilter<"Transaction"> | string
    type?: EnumTxTypeWithAggregatesFilter<"Transaction"> | $Enums.TxType
    category?: EnumTxCategoryWithAggregatesFilter<"Transaction"> | $Enums.TxCategory
    amountCents?: IntWithAggregatesFilter<"Transaction"> | number
    cashbackCents?: IntWithAggregatesFilter<"Transaction"> | number
    beforeBalanceCents?: IntWithAggregatesFilter<"Transaction"> | number
    afterBalanceCents?: IntWithAggregatesFilter<"Transaction"> | number
    note?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    sourceIp?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
  }

  export type TierRuleWhereInput = {
    AND?: TierRuleWhereInput | TierRuleWhereInput[]
    OR?: TierRuleWhereInput[]
    NOT?: TierRuleWhereInput | TierRuleWhereInput[]
    id?: StringFilter<"TierRule"> | string
    tenantId?: StringFilter<"TierRule"> | string
    tier?: EnumTierFilter<"TierRule"> | $Enums.Tier
    name?: StringFilter<"TierRule"> | string
    minTotalSpendCents?: IntFilter<"TierRule"> | number
    baseRateBps?: IntFilter<"TierRule"> | number
    isActive?: BoolFilter<"TierRule"> | boolean
    createdAt?: DateTimeFilter<"TierRule"> | Date | string
    updatedAt?: DateTimeFilter<"TierRule"> | Date | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }

  export type TierRuleOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    tier?: SortOrder
    name?: SortOrder
    minTotalSpendCents?: SortOrder
    baseRateBps?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenant?: TenantOrderByWithRelationInput
  }

  export type TierRuleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    tenantId_tier?: TierRuleTenantIdTierCompoundUniqueInput
    AND?: TierRuleWhereInput | TierRuleWhereInput[]
    OR?: TierRuleWhereInput[]
    NOT?: TierRuleWhereInput | TierRuleWhereInput[]
    tenantId?: StringFilter<"TierRule"> | string
    tier?: EnumTierFilter<"TierRule"> | $Enums.Tier
    name?: StringFilter<"TierRule"> | string
    minTotalSpendCents?: IntFilter<"TierRule"> | number
    baseRateBps?: IntFilter<"TierRule"> | number
    isActive?: BoolFilter<"TierRule"> | boolean
    createdAt?: DateTimeFilter<"TierRule"> | Date | string
    updatedAt?: DateTimeFilter<"TierRule"> | Date | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }, "id" | "tenantId_tier">

  export type TierRuleOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    tier?: SortOrder
    name?: SortOrder
    minTotalSpendCents?: SortOrder
    baseRateBps?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TierRuleCountOrderByAggregateInput
    _avg?: TierRuleAvgOrderByAggregateInput
    _max?: TierRuleMaxOrderByAggregateInput
    _min?: TierRuleMinOrderByAggregateInput
    _sum?: TierRuleSumOrderByAggregateInput
  }

  export type TierRuleScalarWhereWithAggregatesInput = {
    AND?: TierRuleScalarWhereWithAggregatesInput | TierRuleScalarWhereWithAggregatesInput[]
    OR?: TierRuleScalarWhereWithAggregatesInput[]
    NOT?: TierRuleScalarWhereWithAggregatesInput | TierRuleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TierRule"> | string
    tenantId?: StringWithAggregatesFilter<"TierRule"> | string
    tier?: EnumTierWithAggregatesFilter<"TierRule"> | $Enums.Tier
    name?: StringWithAggregatesFilter<"TierRule"> | string
    minTotalSpendCents?: IntWithAggregatesFilter<"TierRule"> | number
    baseRateBps?: IntWithAggregatesFilter<"TierRule"> | number
    isActive?: BoolWithAggregatesFilter<"TierRule"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"TierRule"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TierRule"> | Date | string
  }

  export type CashbackRuleWhereInput = {
    AND?: CashbackRuleWhereInput | CashbackRuleWhereInput[]
    OR?: CashbackRuleWhereInput[]
    NOT?: CashbackRuleWhereInput | CashbackRuleWhereInput[]
    id?: StringFilter<"CashbackRule"> | string
    tenantId?: StringFilter<"CashbackRule"> | string
    category?: EnumTxCategoryFilter<"CashbackRule"> | $Enums.TxCategory
    baseRateBps?: IntFilter<"CashbackRule"> | number
    startAt?: DateTimeNullableFilter<"CashbackRule"> | Date | string | null
    endAt?: DateTimeNullableFilter<"CashbackRule"> | Date | string | null
    isActive?: BoolFilter<"CashbackRule"> | boolean
    createdAt?: DateTimeFilter<"CashbackRule"> | Date | string
    updatedAt?: DateTimeFilter<"CashbackRule"> | Date | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }

  export type CashbackRuleOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    category?: SortOrder
    baseRateBps?: SortOrder
    startAt?: SortOrderInput | SortOrder
    endAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenant?: TenantOrderByWithRelationInput
  }

  export type CashbackRuleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    tenantId_category?: CashbackRuleTenantIdCategoryCompoundUniqueInput
    AND?: CashbackRuleWhereInput | CashbackRuleWhereInput[]
    OR?: CashbackRuleWhereInput[]
    NOT?: CashbackRuleWhereInput | CashbackRuleWhereInput[]
    tenantId?: StringFilter<"CashbackRule"> | string
    category?: EnumTxCategoryFilter<"CashbackRule"> | $Enums.TxCategory
    baseRateBps?: IntFilter<"CashbackRule"> | number
    startAt?: DateTimeNullableFilter<"CashbackRule"> | Date | string | null
    endAt?: DateTimeNullableFilter<"CashbackRule"> | Date | string | null
    isActive?: BoolFilter<"CashbackRule"> | boolean
    createdAt?: DateTimeFilter<"CashbackRule"> | Date | string
    updatedAt?: DateTimeFilter<"CashbackRule"> | Date | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }, "id" | "tenantId_category">

  export type CashbackRuleOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    category?: SortOrder
    baseRateBps?: SortOrder
    startAt?: SortOrderInput | SortOrder
    endAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CashbackRuleCountOrderByAggregateInput
    _avg?: CashbackRuleAvgOrderByAggregateInput
    _max?: CashbackRuleMaxOrderByAggregateInput
    _min?: CashbackRuleMinOrderByAggregateInput
    _sum?: CashbackRuleSumOrderByAggregateInput
  }

  export type CashbackRuleScalarWhereWithAggregatesInput = {
    AND?: CashbackRuleScalarWhereWithAggregatesInput | CashbackRuleScalarWhereWithAggregatesInput[]
    OR?: CashbackRuleScalarWhereWithAggregatesInput[]
    NOT?: CashbackRuleScalarWhereWithAggregatesInput | CashbackRuleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CashbackRule"> | string
    tenantId?: StringWithAggregatesFilter<"CashbackRule"> | string
    category?: EnumTxCategoryWithAggregatesFilter<"CashbackRule"> | $Enums.TxCategory
    baseRateBps?: IntWithAggregatesFilter<"CashbackRule"> | number
    startAt?: DateTimeNullableWithAggregatesFilter<"CashbackRule"> | Date | string | null
    endAt?: DateTimeNullableWithAggregatesFilter<"CashbackRule"> | Date | string | null
    isActive?: BoolWithAggregatesFilter<"CashbackRule"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"CashbackRule"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CashbackRule"> | Date | string
  }

  export type OfferWhereInput = {
    AND?: OfferWhereInput | OfferWhereInput[]
    OR?: OfferWhereInput[]
    NOT?: OfferWhereInput | OfferWhereInput[]
    id?: StringFilter<"Offer"> | string
    tenantId?: StringFilter<"Offer"> | string
    name?: StringFilter<"Offer"> | string
    description?: StringNullableFilter<"Offer"> | string | null
    rateMultiplierBps?: IntFilter<"Offer"> | number
    startAt?: DateTimeFilter<"Offer"> | Date | string
    endAt?: DateTimeFilter<"Offer"> | Date | string
    isActive?: BoolFilter<"Offer"> | boolean
    createdAt?: DateTimeFilter<"Offer"> | Date | string
    updatedAt?: DateTimeFilter<"Offer"> | Date | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }

  export type OfferOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    rateMultiplierBps?: SortOrder
    startAt?: SortOrder
    endAt?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenant?: TenantOrderByWithRelationInput
  }

  export type OfferWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OfferWhereInput | OfferWhereInput[]
    OR?: OfferWhereInput[]
    NOT?: OfferWhereInput | OfferWhereInput[]
    tenantId?: StringFilter<"Offer"> | string
    name?: StringFilter<"Offer"> | string
    description?: StringNullableFilter<"Offer"> | string | null
    rateMultiplierBps?: IntFilter<"Offer"> | number
    startAt?: DateTimeFilter<"Offer"> | Date | string
    endAt?: DateTimeFilter<"Offer"> | Date | string
    isActive?: BoolFilter<"Offer"> | boolean
    createdAt?: DateTimeFilter<"Offer"> | Date | string
    updatedAt?: DateTimeFilter<"Offer"> | Date | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }, "id">

  export type OfferOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    rateMultiplierBps?: SortOrder
    startAt?: SortOrder
    endAt?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OfferCountOrderByAggregateInput
    _avg?: OfferAvgOrderByAggregateInput
    _max?: OfferMaxOrderByAggregateInput
    _min?: OfferMinOrderByAggregateInput
    _sum?: OfferSumOrderByAggregateInput
  }

  export type OfferScalarWhereWithAggregatesInput = {
    AND?: OfferScalarWhereWithAggregatesInput | OfferScalarWhereWithAggregatesInput[]
    OR?: OfferScalarWhereWithAggregatesInput[]
    NOT?: OfferScalarWhereWithAggregatesInput | OfferScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Offer"> | string
    tenantId?: StringWithAggregatesFilter<"Offer"> | string
    name?: StringWithAggregatesFilter<"Offer"> | string
    description?: StringNullableWithAggregatesFilter<"Offer"> | string | null
    rateMultiplierBps?: IntWithAggregatesFilter<"Offer"> | number
    startAt?: DateTimeWithAggregatesFilter<"Offer"> | Date | string
    endAt?: DateTimeWithAggregatesFilter<"Offer"> | Date | string
    isActive?: BoolWithAggregatesFilter<"Offer"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Offer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Offer"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    tenantId?: StringFilter<"Notification"> | string
    customerId?: StringFilter<"Notification"> | string
    channel?: EnumNotifChannelFilter<"Notification"> | $Enums.NotifChannel
    template?: StringFilter<"Notification"> | string
    payload?: JsonFilter<"Notification">
    status?: EnumNotifStatusFilter<"Notification"> | $Enums.NotifStatus
    error?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    sentAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    customerId?: SortOrder
    channel?: SortOrder
    template?: SortOrder
    payload?: SortOrder
    status?: SortOrder
    error?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    sentAt?: SortOrderInput | SortOrder
    customer?: CustomerOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    tenantId?: StringFilter<"Notification"> | string
    customerId?: StringFilter<"Notification"> | string
    channel?: EnumNotifChannelFilter<"Notification"> | $Enums.NotifChannel
    template?: StringFilter<"Notification"> | string
    payload?: JsonFilter<"Notification">
    status?: EnumNotifStatusFilter<"Notification"> | $Enums.NotifStatus
    error?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    sentAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    customerId?: SortOrder
    channel?: SortOrder
    template?: SortOrder
    payload?: SortOrder
    status?: SortOrder
    error?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    sentAt?: SortOrderInput | SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    tenantId?: StringWithAggregatesFilter<"Notification"> | string
    customerId?: StringWithAggregatesFilter<"Notification"> | string
    channel?: EnumNotifChannelWithAggregatesFilter<"Notification"> | $Enums.NotifChannel
    template?: StringWithAggregatesFilter<"Notification"> | string
    payload?: JsonWithAggregatesFilter<"Notification">
    status?: EnumNotifStatusWithAggregatesFilter<"Notification"> | $Enums.NotifStatus
    error?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    sentAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
  }

  export type CardOrderWhereInput = {
    AND?: CardOrderWhereInput | CardOrderWhereInput[]
    OR?: CardOrderWhereInput[]
    NOT?: CardOrderWhereInput | CardOrderWhereInput[]
    id?: StringFilter<"CardOrder"> | string
    tenantId?: StringFilter<"CardOrder"> | string
    cardType?: EnumCardTypeFilter<"CardOrder"> | $Enums.CardType
    quantity?: IntFilter<"CardOrder"> | number
    unitPrice?: DecimalFilter<"CardOrder"> | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFilter<"CardOrder"> | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFilter<"CardOrder"> | $Enums.OrderStatus
    storeName?: StringNullableFilter<"CardOrder"> | string | null
    storePhone?: StringNullableFilter<"CardOrder"> | string | null
    storeAddress?: StringNullableFilter<"CardOrder"> | string | null
    customDesign?: StringNullableFilter<"CardOrder"> | string | null
    shippingAddress?: StringNullableFilter<"CardOrder"> | string | null
    trackingNumber?: StringNullableFilter<"CardOrder"> | string | null
    createdAt?: DateTimeFilter<"CardOrder"> | Date | string
    updatedAt?: DateTimeFilter<"CardOrder"> | Date | string
    shippedAt?: DateTimeNullableFilter<"CardOrder"> | Date | string | null
    deliveredAt?: DateTimeNullableFilter<"CardOrder"> | Date | string | null
    approvedAt?: DateTimeNullableFilter<"CardOrder"> | Date | string | null
    approvedBy?: StringNullableFilter<"CardOrder"> | string | null
    deductFromBalance?: BoolFilter<"CardOrder"> | boolean
    paidAt?: DateTimeNullableFilter<"CardOrder"> | Date | string | null
    sourceType?: EnumOrderSourceTypeFilter<"CardOrder"> | $Enums.OrderSourceType
    stripePaymentId?: StringNullableFilter<"CardOrder"> | string | null
    stripeSessionId?: StringNullableFilter<"CardOrder"> | string | null
    cardLimitTransactions?: CardLimitTransactionListRelationFilter
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }

  export type CardOrderOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    cardType?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    status?: SortOrder
    storeName?: SortOrderInput | SortOrder
    storePhone?: SortOrderInput | SortOrder
    storeAddress?: SortOrderInput | SortOrder
    customDesign?: SortOrderInput | SortOrder
    shippingAddress?: SortOrderInput | SortOrder
    trackingNumber?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    shippedAt?: SortOrderInput | SortOrder
    deliveredAt?: SortOrderInput | SortOrder
    approvedAt?: SortOrderInput | SortOrder
    approvedBy?: SortOrderInput | SortOrder
    deductFromBalance?: SortOrder
    paidAt?: SortOrderInput | SortOrder
    sourceType?: SortOrder
    stripePaymentId?: SortOrderInput | SortOrder
    stripeSessionId?: SortOrderInput | SortOrder
    cardLimitTransactions?: CardLimitTransactionOrderByRelationAggregateInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type CardOrderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CardOrderWhereInput | CardOrderWhereInput[]
    OR?: CardOrderWhereInput[]
    NOT?: CardOrderWhereInput | CardOrderWhereInput[]
    tenantId?: StringFilter<"CardOrder"> | string
    cardType?: EnumCardTypeFilter<"CardOrder"> | $Enums.CardType
    quantity?: IntFilter<"CardOrder"> | number
    unitPrice?: DecimalFilter<"CardOrder"> | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFilter<"CardOrder"> | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFilter<"CardOrder"> | $Enums.OrderStatus
    storeName?: StringNullableFilter<"CardOrder"> | string | null
    storePhone?: StringNullableFilter<"CardOrder"> | string | null
    storeAddress?: StringNullableFilter<"CardOrder"> | string | null
    customDesign?: StringNullableFilter<"CardOrder"> | string | null
    shippingAddress?: StringNullableFilter<"CardOrder"> | string | null
    trackingNumber?: StringNullableFilter<"CardOrder"> | string | null
    createdAt?: DateTimeFilter<"CardOrder"> | Date | string
    updatedAt?: DateTimeFilter<"CardOrder"> | Date | string
    shippedAt?: DateTimeNullableFilter<"CardOrder"> | Date | string | null
    deliveredAt?: DateTimeNullableFilter<"CardOrder"> | Date | string | null
    approvedAt?: DateTimeNullableFilter<"CardOrder"> | Date | string | null
    approvedBy?: StringNullableFilter<"CardOrder"> | string | null
    deductFromBalance?: BoolFilter<"CardOrder"> | boolean
    paidAt?: DateTimeNullableFilter<"CardOrder"> | Date | string | null
    sourceType?: EnumOrderSourceTypeFilter<"CardOrder"> | $Enums.OrderSourceType
    stripePaymentId?: StringNullableFilter<"CardOrder"> | string | null
    stripeSessionId?: StringNullableFilter<"CardOrder"> | string | null
    cardLimitTransactions?: CardLimitTransactionListRelationFilter
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }, "id">

  export type CardOrderOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    cardType?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    status?: SortOrder
    storeName?: SortOrderInput | SortOrder
    storePhone?: SortOrderInput | SortOrder
    storeAddress?: SortOrderInput | SortOrder
    customDesign?: SortOrderInput | SortOrder
    shippingAddress?: SortOrderInput | SortOrder
    trackingNumber?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    shippedAt?: SortOrderInput | SortOrder
    deliveredAt?: SortOrderInput | SortOrder
    approvedAt?: SortOrderInput | SortOrder
    approvedBy?: SortOrderInput | SortOrder
    deductFromBalance?: SortOrder
    paidAt?: SortOrderInput | SortOrder
    sourceType?: SortOrder
    stripePaymentId?: SortOrderInput | SortOrder
    stripeSessionId?: SortOrderInput | SortOrder
    _count?: CardOrderCountOrderByAggregateInput
    _avg?: CardOrderAvgOrderByAggregateInput
    _max?: CardOrderMaxOrderByAggregateInput
    _min?: CardOrderMinOrderByAggregateInput
    _sum?: CardOrderSumOrderByAggregateInput
  }

  export type CardOrderScalarWhereWithAggregatesInput = {
    AND?: CardOrderScalarWhereWithAggregatesInput | CardOrderScalarWhereWithAggregatesInput[]
    OR?: CardOrderScalarWhereWithAggregatesInput[]
    NOT?: CardOrderScalarWhereWithAggregatesInput | CardOrderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CardOrder"> | string
    tenantId?: StringWithAggregatesFilter<"CardOrder"> | string
    cardType?: EnumCardTypeWithAggregatesFilter<"CardOrder"> | $Enums.CardType
    quantity?: IntWithAggregatesFilter<"CardOrder"> | number
    unitPrice?: DecimalWithAggregatesFilter<"CardOrder"> | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalWithAggregatesFilter<"CardOrder"> | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusWithAggregatesFilter<"CardOrder"> | $Enums.OrderStatus
    storeName?: StringNullableWithAggregatesFilter<"CardOrder"> | string | null
    storePhone?: StringNullableWithAggregatesFilter<"CardOrder"> | string | null
    storeAddress?: StringNullableWithAggregatesFilter<"CardOrder"> | string | null
    customDesign?: StringNullableWithAggregatesFilter<"CardOrder"> | string | null
    shippingAddress?: StringNullableWithAggregatesFilter<"CardOrder"> | string | null
    trackingNumber?: StringNullableWithAggregatesFilter<"CardOrder"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CardOrder"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CardOrder"> | Date | string
    shippedAt?: DateTimeNullableWithAggregatesFilter<"CardOrder"> | Date | string | null
    deliveredAt?: DateTimeNullableWithAggregatesFilter<"CardOrder"> | Date | string | null
    approvedAt?: DateTimeNullableWithAggregatesFilter<"CardOrder"> | Date | string | null
    approvedBy?: StringNullableWithAggregatesFilter<"CardOrder"> | string | null
    deductFromBalance?: BoolWithAggregatesFilter<"CardOrder"> | boolean
    paidAt?: DateTimeNullableWithAggregatesFilter<"CardOrder"> | Date | string | null
    sourceType?: EnumOrderSourceTypeWithAggregatesFilter<"CardOrder"> | $Enums.OrderSourceType
    stripePaymentId?: StringNullableWithAggregatesFilter<"CardOrder"> | string | null
    stripeSessionId?: StringNullableWithAggregatesFilter<"CardOrder"> | string | null
  }

  export type PlanWhereInput = {
    AND?: PlanWhereInput | PlanWhereInput[]
    OR?: PlanWhereInput[]
    NOT?: PlanWhereInput | PlanWhereInput[]
    id?: StringFilter<"Plan"> | string
    name?: StringFilter<"Plan"> | string
    description?: StringFilter<"Plan"> | string
    priceMonthly?: IntFilter<"Plan"> | number
    billingPeriod?: EnumBillingPeriodFilter<"Plan"> | $Enums.BillingPeriod
    billingPeriodMultiplier?: IntFilter<"Plan"> | number
    stripePriceId?: StringFilter<"Plan"> | string
    features?: StringNullableListFilter<"Plan">
    maxStores?: IntFilter<"Plan"> | number
    maxStaff?: IntFilter<"Plan"> | number
    maxCards?: IntFilter<"Plan"> | number
    maxTransactions?: IntFilter<"Plan"> | number
    isActive?: BoolFilter<"Plan"> | boolean
    createdAt?: DateTimeFilter<"Plan"> | Date | string
    updatedAt?: DateTimeFilter<"Plan"> | Date | string
    allowCardOrdering?: BoolFilter<"Plan"> | boolean
    cardAllowance?: IntFilter<"Plan"> | number
    cardLimitTransactions?: CardLimitTransactionListRelationFilter
    tenants?: TenantListRelationFilter
    payments?: PaymentListRelationFilter
    subscriptionEvents?: SubscriptionEventListRelationFilter
    previousSubscriptionEvents?: SubscriptionEventListRelationFilter
  }

  export type PlanOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    priceMonthly?: SortOrder
    billingPeriod?: SortOrder
    billingPeriodMultiplier?: SortOrder
    stripePriceId?: SortOrder
    features?: SortOrder
    maxStores?: SortOrder
    maxStaff?: SortOrder
    maxCards?: SortOrder
    maxTransactions?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    allowCardOrdering?: SortOrder
    cardAllowance?: SortOrder
    cardLimitTransactions?: CardLimitTransactionOrderByRelationAggregateInput
    tenants?: TenantOrderByRelationAggregateInput
    payments?: PaymentOrderByRelationAggregateInput
    subscriptionEvents?: SubscriptionEventOrderByRelationAggregateInput
    previousSubscriptionEvents?: SubscriptionEventOrderByRelationAggregateInput
  }

  export type PlanWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PlanWhereInput | PlanWhereInput[]
    OR?: PlanWhereInput[]
    NOT?: PlanWhereInput | PlanWhereInput[]
    name?: StringFilter<"Plan"> | string
    description?: StringFilter<"Plan"> | string
    priceMonthly?: IntFilter<"Plan"> | number
    billingPeriod?: EnumBillingPeriodFilter<"Plan"> | $Enums.BillingPeriod
    billingPeriodMultiplier?: IntFilter<"Plan"> | number
    stripePriceId?: StringFilter<"Plan"> | string
    features?: StringNullableListFilter<"Plan">
    maxStores?: IntFilter<"Plan"> | number
    maxStaff?: IntFilter<"Plan"> | number
    maxCards?: IntFilter<"Plan"> | number
    maxTransactions?: IntFilter<"Plan"> | number
    isActive?: BoolFilter<"Plan"> | boolean
    createdAt?: DateTimeFilter<"Plan"> | Date | string
    updatedAt?: DateTimeFilter<"Plan"> | Date | string
    allowCardOrdering?: BoolFilter<"Plan"> | boolean
    cardAllowance?: IntFilter<"Plan"> | number
    cardLimitTransactions?: CardLimitTransactionListRelationFilter
    tenants?: TenantListRelationFilter
    payments?: PaymentListRelationFilter
    subscriptionEvents?: SubscriptionEventListRelationFilter
    previousSubscriptionEvents?: SubscriptionEventListRelationFilter
  }, "id">

  export type PlanOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    priceMonthly?: SortOrder
    billingPeriod?: SortOrder
    billingPeriodMultiplier?: SortOrder
    stripePriceId?: SortOrder
    features?: SortOrder
    maxStores?: SortOrder
    maxStaff?: SortOrder
    maxCards?: SortOrder
    maxTransactions?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    allowCardOrdering?: SortOrder
    cardAllowance?: SortOrder
    _count?: PlanCountOrderByAggregateInput
    _avg?: PlanAvgOrderByAggregateInput
    _max?: PlanMaxOrderByAggregateInput
    _min?: PlanMinOrderByAggregateInput
    _sum?: PlanSumOrderByAggregateInput
  }

  export type PlanScalarWhereWithAggregatesInput = {
    AND?: PlanScalarWhereWithAggregatesInput | PlanScalarWhereWithAggregatesInput[]
    OR?: PlanScalarWhereWithAggregatesInput[]
    NOT?: PlanScalarWhereWithAggregatesInput | PlanScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Plan"> | string
    name?: StringWithAggregatesFilter<"Plan"> | string
    description?: StringWithAggregatesFilter<"Plan"> | string
    priceMonthly?: IntWithAggregatesFilter<"Plan"> | number
    billingPeriod?: EnumBillingPeriodWithAggregatesFilter<"Plan"> | $Enums.BillingPeriod
    billingPeriodMultiplier?: IntWithAggregatesFilter<"Plan"> | number
    stripePriceId?: StringWithAggregatesFilter<"Plan"> | string
    features?: StringNullableListFilter<"Plan">
    maxStores?: IntWithAggregatesFilter<"Plan"> | number
    maxStaff?: IntWithAggregatesFilter<"Plan"> | number
    maxCards?: IntWithAggregatesFilter<"Plan"> | number
    maxTransactions?: IntWithAggregatesFilter<"Plan"> | number
    isActive?: BoolWithAggregatesFilter<"Plan"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Plan"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Plan"> | Date | string
    allowCardOrdering?: BoolWithAggregatesFilter<"Plan"> | boolean
    cardAllowance?: IntWithAggregatesFilter<"Plan"> | number
  }

  export type CardLimitTransactionWhereInput = {
    AND?: CardLimitTransactionWhereInput | CardLimitTransactionWhereInput[]
    OR?: CardLimitTransactionWhereInput[]
    NOT?: CardLimitTransactionWhereInput | CardLimitTransactionWhereInput[]
    id?: StringFilter<"CardLimitTransaction"> | string
    tenantId?: StringFilter<"CardLimitTransaction"> | string
    type?: EnumCardLimitTransactionTypeFilter<"CardLimitTransaction"> | $Enums.CardLimitTransactionType
    source?: EnumCardLimitTransactionSourceFilter<"CardLimitTransaction"> | $Enums.CardLimitTransactionSource
    amount?: IntFilter<"CardLimitTransaction"> | number
    previousBalance?: IntFilter<"CardLimitTransaction"> | number
    newBalance?: IntFilter<"CardLimitTransaction"> | number
    description?: StringNullableFilter<"CardLimitTransaction"> | string | null
    relatedOrderId?: StringNullableFilter<"CardLimitTransaction"> | string | null
    relatedPlanId?: StringNullableFilter<"CardLimitTransaction"> | string | null
    createdAt?: DateTimeFilter<"CardLimitTransaction"> | Date | string
    createdBy?: StringNullableFilter<"CardLimitTransaction"> | string | null
    relatedOrder?: XOR<CardOrderNullableRelationFilter, CardOrderWhereInput> | null
    relatedPlan?: XOR<PlanNullableRelationFilter, PlanWhereInput> | null
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }

  export type CardLimitTransactionOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    type?: SortOrder
    source?: SortOrder
    amount?: SortOrder
    previousBalance?: SortOrder
    newBalance?: SortOrder
    description?: SortOrderInput | SortOrder
    relatedOrderId?: SortOrderInput | SortOrder
    relatedPlanId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    relatedOrder?: CardOrderOrderByWithRelationInput
    relatedPlan?: PlanOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type CardLimitTransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CardLimitTransactionWhereInput | CardLimitTransactionWhereInput[]
    OR?: CardLimitTransactionWhereInput[]
    NOT?: CardLimitTransactionWhereInput | CardLimitTransactionWhereInput[]
    tenantId?: StringFilter<"CardLimitTransaction"> | string
    type?: EnumCardLimitTransactionTypeFilter<"CardLimitTransaction"> | $Enums.CardLimitTransactionType
    source?: EnumCardLimitTransactionSourceFilter<"CardLimitTransaction"> | $Enums.CardLimitTransactionSource
    amount?: IntFilter<"CardLimitTransaction"> | number
    previousBalance?: IntFilter<"CardLimitTransaction"> | number
    newBalance?: IntFilter<"CardLimitTransaction"> | number
    description?: StringNullableFilter<"CardLimitTransaction"> | string | null
    relatedOrderId?: StringNullableFilter<"CardLimitTransaction"> | string | null
    relatedPlanId?: StringNullableFilter<"CardLimitTransaction"> | string | null
    createdAt?: DateTimeFilter<"CardLimitTransaction"> | Date | string
    createdBy?: StringNullableFilter<"CardLimitTransaction"> | string | null
    relatedOrder?: XOR<CardOrderNullableRelationFilter, CardOrderWhereInput> | null
    relatedPlan?: XOR<PlanNullableRelationFilter, PlanWhereInput> | null
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }, "id">

  export type CardLimitTransactionOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    type?: SortOrder
    source?: SortOrder
    amount?: SortOrder
    previousBalance?: SortOrder
    newBalance?: SortOrder
    description?: SortOrderInput | SortOrder
    relatedOrderId?: SortOrderInput | SortOrder
    relatedPlanId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    _count?: CardLimitTransactionCountOrderByAggregateInput
    _avg?: CardLimitTransactionAvgOrderByAggregateInput
    _max?: CardLimitTransactionMaxOrderByAggregateInput
    _min?: CardLimitTransactionMinOrderByAggregateInput
    _sum?: CardLimitTransactionSumOrderByAggregateInput
  }

  export type CardLimitTransactionScalarWhereWithAggregatesInput = {
    AND?: CardLimitTransactionScalarWhereWithAggregatesInput | CardLimitTransactionScalarWhereWithAggregatesInput[]
    OR?: CardLimitTransactionScalarWhereWithAggregatesInput[]
    NOT?: CardLimitTransactionScalarWhereWithAggregatesInput | CardLimitTransactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CardLimitTransaction"> | string
    tenantId?: StringWithAggregatesFilter<"CardLimitTransaction"> | string
    type?: EnumCardLimitTransactionTypeWithAggregatesFilter<"CardLimitTransaction"> | $Enums.CardLimitTransactionType
    source?: EnumCardLimitTransactionSourceWithAggregatesFilter<"CardLimitTransaction"> | $Enums.CardLimitTransactionSource
    amount?: IntWithAggregatesFilter<"CardLimitTransaction"> | number
    previousBalance?: IntWithAggregatesFilter<"CardLimitTransaction"> | number
    newBalance?: IntWithAggregatesFilter<"CardLimitTransaction"> | number
    description?: StringNullableWithAggregatesFilter<"CardLimitTransaction"> | string | null
    relatedOrderId?: StringNullableWithAggregatesFilter<"CardLimitTransaction"> | string | null
    relatedPlanId?: StringNullableWithAggregatesFilter<"CardLimitTransaction"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CardLimitTransaction"> | Date | string
    createdBy?: StringNullableWithAggregatesFilter<"CardLimitTransaction"> | string | null
  }

  export type PaymentWhereInput = {
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    id?: StringFilter<"Payment"> | string
    tenantId?: StringFilter<"Payment"> | string
    planId?: StringFilter<"Payment"> | string
    stripeSubscriptionId?: StringNullableFilter<"Payment"> | string | null
    stripeInvoiceId?: StringNullableFilter<"Payment"> | string | null
    stripePaymentIntentId?: StringNullableFilter<"Payment"> | string | null
    amount?: IntFilter<"Payment"> | number
    currency?: StringFilter<"Payment"> | string
    status?: StringFilter<"Payment"> | string
    description?: StringNullableFilter<"Payment"> | string | null
    metadata?: StringNullableFilter<"Payment"> | string | null
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    plan?: XOR<PlanRelationFilter, PlanWhereInput>
  }

  export type PaymentOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    planId?: SortOrder
    stripeSubscriptionId?: SortOrderInput | SortOrder
    stripeInvoiceId?: SortOrderInput | SortOrder
    stripePaymentIntentId?: SortOrderInput | SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    description?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenant?: TenantOrderByWithRelationInput
    plan?: PlanOrderByWithRelationInput
  }

  export type PaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    tenantId?: StringFilter<"Payment"> | string
    planId?: StringFilter<"Payment"> | string
    stripeSubscriptionId?: StringNullableFilter<"Payment"> | string | null
    stripeInvoiceId?: StringNullableFilter<"Payment"> | string | null
    stripePaymentIntentId?: StringNullableFilter<"Payment"> | string | null
    amount?: IntFilter<"Payment"> | number
    currency?: StringFilter<"Payment"> | string
    status?: StringFilter<"Payment"> | string
    description?: StringNullableFilter<"Payment"> | string | null
    metadata?: StringNullableFilter<"Payment"> | string | null
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    plan?: XOR<PlanRelationFilter, PlanWhereInput>
  }, "id">

  export type PaymentOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    planId?: SortOrder
    stripeSubscriptionId?: SortOrderInput | SortOrder
    stripeInvoiceId?: SortOrderInput | SortOrder
    stripePaymentIntentId?: SortOrderInput | SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    description?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PaymentCountOrderByAggregateInput
    _avg?: PaymentAvgOrderByAggregateInput
    _max?: PaymentMaxOrderByAggregateInput
    _min?: PaymentMinOrderByAggregateInput
    _sum?: PaymentSumOrderByAggregateInput
  }

  export type PaymentScalarWhereWithAggregatesInput = {
    AND?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    OR?: PaymentScalarWhereWithAggregatesInput[]
    NOT?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Payment"> | string
    tenantId?: StringWithAggregatesFilter<"Payment"> | string
    planId?: StringWithAggregatesFilter<"Payment"> | string
    stripeSubscriptionId?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    stripeInvoiceId?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    stripePaymentIntentId?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    amount?: IntWithAggregatesFilter<"Payment"> | number
    currency?: StringWithAggregatesFilter<"Payment"> | string
    status?: StringWithAggregatesFilter<"Payment"> | string
    description?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    metadata?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
  }

  export type SubscriptionEventWhereInput = {
    AND?: SubscriptionEventWhereInput | SubscriptionEventWhereInput[]
    OR?: SubscriptionEventWhereInput[]
    NOT?: SubscriptionEventWhereInput | SubscriptionEventWhereInput[]
    id?: StringFilter<"SubscriptionEvent"> | string
    tenantId?: StringFilter<"SubscriptionEvent"> | string
    planId?: StringFilter<"SubscriptionEvent"> | string
    eventType?: StringFilter<"SubscriptionEvent"> | string
    previousPlanId?: StringNullableFilter<"SubscriptionEvent"> | string | null
    stripeSubscriptionId?: StringNullableFilter<"SubscriptionEvent"> | string | null
    metadata?: StringNullableFilter<"SubscriptionEvent"> | string | null
    createdAt?: DateTimeFilter<"SubscriptionEvent"> | Date | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    plan?: XOR<PlanRelationFilter, PlanWhereInput>
    previousPlan?: XOR<PlanNullableRelationFilter, PlanWhereInput> | null
  }

  export type SubscriptionEventOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    planId?: SortOrder
    eventType?: SortOrder
    previousPlanId?: SortOrderInput | SortOrder
    stripeSubscriptionId?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    tenant?: TenantOrderByWithRelationInput
    plan?: PlanOrderByWithRelationInput
    previousPlan?: PlanOrderByWithRelationInput
  }

  export type SubscriptionEventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SubscriptionEventWhereInput | SubscriptionEventWhereInput[]
    OR?: SubscriptionEventWhereInput[]
    NOT?: SubscriptionEventWhereInput | SubscriptionEventWhereInput[]
    tenantId?: StringFilter<"SubscriptionEvent"> | string
    planId?: StringFilter<"SubscriptionEvent"> | string
    eventType?: StringFilter<"SubscriptionEvent"> | string
    previousPlanId?: StringNullableFilter<"SubscriptionEvent"> | string | null
    stripeSubscriptionId?: StringNullableFilter<"SubscriptionEvent"> | string | null
    metadata?: StringNullableFilter<"SubscriptionEvent"> | string | null
    createdAt?: DateTimeFilter<"SubscriptionEvent"> | Date | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    plan?: XOR<PlanRelationFilter, PlanWhereInput>
    previousPlan?: XOR<PlanNullableRelationFilter, PlanWhereInput> | null
  }, "id">

  export type SubscriptionEventOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    planId?: SortOrder
    eventType?: SortOrder
    previousPlanId?: SortOrderInput | SortOrder
    stripeSubscriptionId?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: SubscriptionEventCountOrderByAggregateInput
    _max?: SubscriptionEventMaxOrderByAggregateInput
    _min?: SubscriptionEventMinOrderByAggregateInput
  }

  export type SubscriptionEventScalarWhereWithAggregatesInput = {
    AND?: SubscriptionEventScalarWhereWithAggregatesInput | SubscriptionEventScalarWhereWithAggregatesInput[]
    OR?: SubscriptionEventScalarWhereWithAggregatesInput[]
    NOT?: SubscriptionEventScalarWhereWithAggregatesInput | SubscriptionEventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SubscriptionEvent"> | string
    tenantId?: StringWithAggregatesFilter<"SubscriptionEvent"> | string
    planId?: StringWithAggregatesFilter<"SubscriptionEvent"> | string
    eventType?: StringWithAggregatesFilter<"SubscriptionEvent"> | string
    previousPlanId?: StringNullableWithAggregatesFilter<"SubscriptionEvent"> | string | null
    stripeSubscriptionId?: StringNullableWithAggregatesFilter<"SubscriptionEvent"> | string | null
    metadata?: StringNullableWithAggregatesFilter<"SubscriptionEvent"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SubscriptionEvent"> | Date | string
  }

  export type TenantCreateInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    graceEndsAt?: Date | string | null
    slug: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    trialEndsAt?: Date | string | null
    freeTrialActivations?: number
    freeTrialCardsCreated?: number
    freeTrialLimit?: number
    trialExpiredNotified?: boolean
    currentCardBalance?: number
    subscriptionCardLimit?: number
    subscriptionCardsUsed?: number
    totalCardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionCreateNestedManyWithoutTenantInput
    cardOrders?: CardOrderCreateNestedManyWithoutTenantInput
    cards?: CardCreateNestedManyWithoutTenantInput
    cashbackRules?: CashbackRuleCreateNestedManyWithoutTenantInput
    customers?: CustomerCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    offers?: OfferCreateNestedManyWithoutTenantInput
    stores?: StoreCreateNestedManyWithoutTenantInput
    plan?: PlanCreateNestedOneWithoutTenantsInput
    tierRules?: TierRuleCreateNestedManyWithoutTenantInput
    transactions?: TransactionCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    payments?: PaymentCreateNestedManyWithoutTenantInput
    subscriptionEvents?: SubscriptionEventCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    graceEndsAt?: Date | string | null
    planId?: string | null
    slug: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    trialEndsAt?: Date | string | null
    freeTrialActivations?: number
    freeTrialCardsCreated?: number
    freeTrialLimit?: number
    trialExpiredNotified?: boolean
    currentCardBalance?: number
    subscriptionCardLimit?: number
    subscriptionCardsUsed?: number
    totalCardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionUncheckedCreateNestedManyWithoutTenantInput
    cardOrders?: CardOrderUncheckedCreateNestedManyWithoutTenantInput
    cards?: CardUncheckedCreateNestedManyWithoutTenantInput
    cashbackRules?: CashbackRuleUncheckedCreateNestedManyWithoutTenantInput
    customers?: CustomerUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    offers?: OfferUncheckedCreateNestedManyWithoutTenantInput
    stores?: StoreUncheckedCreateNestedManyWithoutTenantInput
    tierRules?: TierRuleUncheckedCreateNestedManyWithoutTenantInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    payments?: PaymentUncheckedCreateNestedManyWithoutTenantInput
    subscriptionEvents?: SubscriptionEventUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graceEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slug?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeTrialActivations?: IntFieldUpdateOperationsInput | number
    freeTrialCardsCreated?: IntFieldUpdateOperationsInput | number
    freeTrialLimit?: IntFieldUpdateOperationsInput | number
    trialExpiredNotified?: BoolFieldUpdateOperationsInput | boolean
    currentCardBalance?: IntFieldUpdateOperationsInput | number
    subscriptionCardLimit?: IntFieldUpdateOperationsInput | number
    subscriptionCardsUsed?: IntFieldUpdateOperationsInput | number
    totalCardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUpdateManyWithoutTenantNestedInput
    cardOrders?: CardOrderUpdateManyWithoutTenantNestedInput
    cards?: CardUpdateManyWithoutTenantNestedInput
    cashbackRules?: CashbackRuleUpdateManyWithoutTenantNestedInput
    customers?: CustomerUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    offers?: OfferUpdateManyWithoutTenantNestedInput
    stores?: StoreUpdateManyWithoutTenantNestedInput
    plan?: PlanUpdateOneWithoutTenantsNestedInput
    tierRules?: TierRuleUpdateManyWithoutTenantNestedInput
    transactions?: TransactionUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    payments?: PaymentUpdateManyWithoutTenantNestedInput
    subscriptionEvents?: SubscriptionEventUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graceEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    planId?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeTrialActivations?: IntFieldUpdateOperationsInput | number
    freeTrialCardsCreated?: IntFieldUpdateOperationsInput | number
    freeTrialLimit?: IntFieldUpdateOperationsInput | number
    trialExpiredNotified?: BoolFieldUpdateOperationsInput | boolean
    currentCardBalance?: IntFieldUpdateOperationsInput | number
    subscriptionCardLimit?: IntFieldUpdateOperationsInput | number
    subscriptionCardsUsed?: IntFieldUpdateOperationsInput | number
    totalCardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUncheckedUpdateManyWithoutTenantNestedInput
    cardOrders?: CardOrderUncheckedUpdateManyWithoutTenantNestedInput
    cards?: CardUncheckedUpdateManyWithoutTenantNestedInput
    cashbackRules?: CashbackRuleUncheckedUpdateManyWithoutTenantNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    offers?: OfferUncheckedUpdateManyWithoutTenantNestedInput
    stores?: StoreUncheckedUpdateManyWithoutTenantNestedInput
    tierRules?: TierRuleUncheckedUpdateManyWithoutTenantNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutTenantNestedInput
    subscriptionEvents?: SubscriptionEventUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateManyInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    graceEndsAt?: Date | string | null
    planId?: string | null
    slug: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    trialEndsAt?: Date | string | null
    freeTrialActivations?: number
    freeTrialCardsCreated?: number
    freeTrialLimit?: number
    trialExpiredNotified?: boolean
    currentCardBalance?: number
    subscriptionCardLimit?: number
    subscriptionCardsUsed?: number
    totalCardAllowance?: number
  }

  export type TenantUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graceEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slug?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeTrialActivations?: IntFieldUpdateOperationsInput | number
    freeTrialCardsCreated?: IntFieldUpdateOperationsInput | number
    freeTrialLimit?: IntFieldUpdateOperationsInput | number
    trialExpiredNotified?: BoolFieldUpdateOperationsInput | boolean
    currentCardBalance?: IntFieldUpdateOperationsInput | number
    subscriptionCardLimit?: IntFieldUpdateOperationsInput | number
    subscriptionCardsUsed?: IntFieldUpdateOperationsInput | number
    totalCardAllowance?: IntFieldUpdateOperationsInput | number
  }

  export type TenantUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graceEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    planId?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeTrialActivations?: IntFieldUpdateOperationsInput | number
    freeTrialCardsCreated?: IntFieldUpdateOperationsInput | number
    freeTrialLimit?: IntFieldUpdateOperationsInput | number
    trialExpiredNotified?: BoolFieldUpdateOperationsInput | boolean
    currentCardBalance?: IntFieldUpdateOperationsInput | number
    subscriptionCardLimit?: IntFieldUpdateOperationsInput | number
    subscriptionCardsUsed?: IntFieldUpdateOperationsInput | number
    totalCardAllowance?: IntFieldUpdateOperationsInput | number
  }

  export type StoreCreateInput = {
    id?: string
    name: string
    address?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    cards?: CardCreateNestedManyWithoutStoreInput
    tenant: TenantCreateNestedOneWithoutStoresInput
    transactions?: TransactionCreateNestedManyWithoutStoreInput
    users?: UserCreateNestedManyWithoutStoreInput
  }

  export type StoreUncheckedCreateInput = {
    id?: string
    tenantId: string
    name: string
    address?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    cards?: CardUncheckedCreateNestedManyWithoutStoreInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutStoreInput
    users?: UserUncheckedCreateNestedManyWithoutStoreInput
  }

  export type StoreUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cards?: CardUpdateManyWithoutStoreNestedInput
    tenant?: TenantUpdateOneRequiredWithoutStoresNestedInput
    transactions?: TransactionUpdateManyWithoutStoreNestedInput
    users?: UserUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cards?: CardUncheckedUpdateManyWithoutStoreNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutStoreNestedInput
    users?: UserUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type StoreCreateManyInput = {
    id?: string
    tenantId: string
    name: string
    address?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StoreUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoreUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    firstName?: string | null
    lastName?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    transactionsProcessed?: TransactionCreateNestedManyWithoutCashierInput
    store?: StoreCreateNestedOneWithoutUsersInput
    tenant: TenantCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    tenantId: string
    email: string
    passwordHash: string
    role: $Enums.Role
    storeId?: string | null
    firstName?: string | null
    lastName?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    transactionsProcessed?: TransactionUncheckedCreateNestedManyWithoutCashierInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactionsProcessed?: TransactionUpdateManyWithoutCashierNestedInput
    store?: StoreUpdateOneWithoutUsersNestedInput
    tenant?: TenantUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactionsProcessed?: TransactionUncheckedUpdateManyWithoutCashierNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    tenantId: string
    email: string
    passwordHash: string
    role: $Enums.Role
    storeId?: string | null
    firstName?: string | null
    lastName?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CustomerCreateInput = {
    id?: string
    firstName: string
    lastName: string
    phone?: string | null
    email?: string | null
    tier?: $Enums.Tier
    totalSpend?: Decimal | DecimalJsLike | number | string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    cards?: CardCreateNestedManyWithoutCustomerInput
    tenant: TenantCreateNestedOneWithoutCustomersInput
    notifications?: NotificationCreateNestedManyWithoutCustomerInput
    transactions?: TransactionCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateInput = {
    id?: string
    tenantId: string
    firstName: string
    lastName: string
    phone?: string | null
    email?: string | null
    tier?: $Enums.Tier
    totalSpend?: Decimal | DecimalJsLike | number | string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    cards?: CardUncheckedCreateNestedManyWithoutCustomerInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutCustomerInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tier?: EnumTierFieldUpdateOperationsInput | $Enums.Tier
    totalSpend?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cards?: CardUpdateManyWithoutCustomerNestedInput
    tenant?: TenantUpdateOneRequiredWithoutCustomersNestedInput
    notifications?: NotificationUpdateManyWithoutCustomerNestedInput
    transactions?: TransactionUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tier?: EnumTierFieldUpdateOperationsInput | $Enums.Tier
    totalSpend?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cards?: CardUncheckedUpdateManyWithoutCustomerNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutCustomerNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerCreateManyInput = {
    id?: string
    tenantId: string
    firstName: string
    lastName: string
    phone?: string | null
    email?: string | null
    tier?: $Enums.Tier
    totalSpend?: Decimal | DecimalJsLike | number | string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tier?: EnumTierFieldUpdateOperationsInput | $Enums.Tier
    totalSpend?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tier?: EnumTierFieldUpdateOperationsInput | $Enums.Tier
    totalSpend?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CardCreateInput = {
    id?: string
    cardUid: string
    activatedAt?: Date | string | null
    status?: $Enums.CardStatus
    qrUrl?: string | null
    balanceCents?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    customer?: CustomerCreateNestedOneWithoutCardsInput
    store?: StoreCreateNestedOneWithoutCardsInput
    tenant: TenantCreateNestedOneWithoutCardsInput
    transactions?: TransactionCreateNestedManyWithoutCardInput
  }

  export type CardUncheckedCreateInput = {
    id?: string
    tenantId: string
    cardUid: string
    customerId?: string | null
    activatedAt?: Date | string | null
    storeId?: string | null
    status?: $Enums.CardStatus
    qrUrl?: string | null
    balanceCents?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionUncheckedCreateNestedManyWithoutCardInput
  }

  export type CardUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardUid?: StringFieldUpdateOperationsInput | string
    activatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumCardStatusFieldUpdateOperationsInput | $Enums.CardStatus
    qrUrl?: NullableStringFieldUpdateOperationsInput | string | null
    balanceCents?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneWithoutCardsNestedInput
    store?: StoreUpdateOneWithoutCardsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutCardsNestedInput
    transactions?: TransactionUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    cardUid?: StringFieldUpdateOperationsInput | string
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    activatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCardStatusFieldUpdateOperationsInput | $Enums.CardStatus
    qrUrl?: NullableStringFieldUpdateOperationsInput | string | null
    balanceCents?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUncheckedUpdateManyWithoutCardNestedInput
  }

  export type CardCreateManyInput = {
    id?: string
    tenantId: string
    cardUid: string
    customerId?: string | null
    activatedAt?: Date | string | null
    storeId?: string | null
    status?: $Enums.CardStatus
    qrUrl?: string | null
    balanceCents?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CardUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardUid?: StringFieldUpdateOperationsInput | string
    activatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumCardStatusFieldUpdateOperationsInput | $Enums.CardStatus
    qrUrl?: NullableStringFieldUpdateOperationsInput | string | null
    balanceCents?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CardUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    cardUid?: StringFieldUpdateOperationsInput | string
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    activatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCardStatusFieldUpdateOperationsInput | $Enums.CardStatus
    qrUrl?: NullableStringFieldUpdateOperationsInput | string | null
    balanceCents?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateInput = {
    id?: string
    type: $Enums.TxType
    category: $Enums.TxCategory
    amountCents: number
    cashbackCents?: number
    beforeBalanceCents: number
    afterBalanceCents: number
    note?: string | null
    sourceIp?: string | null
    createdAt?: Date | string
    card: CardCreateNestedOneWithoutTransactionsInput
    cashier: UserCreateNestedOneWithoutTransactionsProcessedInput
    customer: CustomerCreateNestedOneWithoutTransactionsInput
    store: StoreCreateNestedOneWithoutTransactionsInput
    tenant: TenantCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateInput = {
    id?: string
    tenantId: string
    storeId: string
    cardId: string
    customerId: string
    cashierId: string
    type: $Enums.TxType
    category: $Enums.TxCategory
    amountCents: number
    cashbackCents?: number
    beforeBalanceCents: number
    afterBalanceCents: number
    note?: string | null
    sourceIp?: string | null
    createdAt?: Date | string
  }

  export type TransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumTxTypeFieldUpdateOperationsInput | $Enums.TxType
    category?: EnumTxCategoryFieldUpdateOperationsInput | $Enums.TxCategory
    amountCents?: IntFieldUpdateOperationsInput | number
    cashbackCents?: IntFieldUpdateOperationsInput | number
    beforeBalanceCents?: IntFieldUpdateOperationsInput | number
    afterBalanceCents?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    sourceIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    card?: CardUpdateOneRequiredWithoutTransactionsNestedInput
    cashier?: UserUpdateOneRequiredWithoutTransactionsProcessedNestedInput
    customer?: CustomerUpdateOneRequiredWithoutTransactionsNestedInput
    store?: StoreUpdateOneRequiredWithoutTransactionsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    storeId?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    cashierId?: StringFieldUpdateOperationsInput | string
    type?: EnumTxTypeFieldUpdateOperationsInput | $Enums.TxType
    category?: EnumTxCategoryFieldUpdateOperationsInput | $Enums.TxCategory
    amountCents?: IntFieldUpdateOperationsInput | number
    cashbackCents?: IntFieldUpdateOperationsInput | number
    beforeBalanceCents?: IntFieldUpdateOperationsInput | number
    afterBalanceCents?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    sourceIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateManyInput = {
    id?: string
    tenantId: string
    storeId: string
    cardId: string
    customerId: string
    cashierId: string
    type: $Enums.TxType
    category: $Enums.TxCategory
    amountCents: number
    cashbackCents?: number
    beforeBalanceCents: number
    afterBalanceCents: number
    note?: string | null
    sourceIp?: string | null
    createdAt?: Date | string
  }

  export type TransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumTxTypeFieldUpdateOperationsInput | $Enums.TxType
    category?: EnumTxCategoryFieldUpdateOperationsInput | $Enums.TxCategory
    amountCents?: IntFieldUpdateOperationsInput | number
    cashbackCents?: IntFieldUpdateOperationsInput | number
    beforeBalanceCents?: IntFieldUpdateOperationsInput | number
    afterBalanceCents?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    sourceIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    storeId?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    cashierId?: StringFieldUpdateOperationsInput | string
    type?: EnumTxTypeFieldUpdateOperationsInput | $Enums.TxType
    category?: EnumTxCategoryFieldUpdateOperationsInput | $Enums.TxCategory
    amountCents?: IntFieldUpdateOperationsInput | number
    cashbackCents?: IntFieldUpdateOperationsInput | number
    beforeBalanceCents?: IntFieldUpdateOperationsInput | number
    afterBalanceCents?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    sourceIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TierRuleCreateInput = {
    id?: string
    tier: $Enums.Tier
    name: string
    minTotalSpendCents: number
    baseRateBps: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutTierRulesInput
  }

  export type TierRuleUncheckedCreateInput = {
    id?: string
    tenantId: string
    tier: $Enums.Tier
    name: string
    minTotalSpendCents: number
    baseRateBps: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TierRuleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tier?: EnumTierFieldUpdateOperationsInput | $Enums.Tier
    name?: StringFieldUpdateOperationsInput | string
    minTotalSpendCents?: IntFieldUpdateOperationsInput | number
    baseRateBps?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutTierRulesNestedInput
  }

  export type TierRuleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    tier?: EnumTierFieldUpdateOperationsInput | $Enums.Tier
    name?: StringFieldUpdateOperationsInput | string
    minTotalSpendCents?: IntFieldUpdateOperationsInput | number
    baseRateBps?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TierRuleCreateManyInput = {
    id?: string
    tenantId: string
    tier: $Enums.Tier
    name: string
    minTotalSpendCents: number
    baseRateBps: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TierRuleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tier?: EnumTierFieldUpdateOperationsInput | $Enums.Tier
    name?: StringFieldUpdateOperationsInput | string
    minTotalSpendCents?: IntFieldUpdateOperationsInput | number
    baseRateBps?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TierRuleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    tier?: EnumTierFieldUpdateOperationsInput | $Enums.Tier
    name?: StringFieldUpdateOperationsInput | string
    minTotalSpendCents?: IntFieldUpdateOperationsInput | number
    baseRateBps?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CashbackRuleCreateInput = {
    id?: string
    category: $Enums.TxCategory
    baseRateBps: number
    startAt?: Date | string | null
    endAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutCashbackRulesInput
  }

  export type CashbackRuleUncheckedCreateInput = {
    id?: string
    tenantId: string
    category: $Enums.TxCategory
    baseRateBps: number
    startAt?: Date | string | null
    endAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CashbackRuleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: EnumTxCategoryFieldUpdateOperationsInput | $Enums.TxCategory
    baseRateBps?: IntFieldUpdateOperationsInput | number
    startAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutCashbackRulesNestedInput
  }

  export type CashbackRuleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    category?: EnumTxCategoryFieldUpdateOperationsInput | $Enums.TxCategory
    baseRateBps?: IntFieldUpdateOperationsInput | number
    startAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CashbackRuleCreateManyInput = {
    id?: string
    tenantId: string
    category: $Enums.TxCategory
    baseRateBps: number
    startAt?: Date | string | null
    endAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CashbackRuleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: EnumTxCategoryFieldUpdateOperationsInput | $Enums.TxCategory
    baseRateBps?: IntFieldUpdateOperationsInput | number
    startAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CashbackRuleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    category?: EnumTxCategoryFieldUpdateOperationsInput | $Enums.TxCategory
    baseRateBps?: IntFieldUpdateOperationsInput | number
    startAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfferCreateInput = {
    id?: string
    name: string
    description?: string | null
    rateMultiplierBps: number
    startAt: Date | string
    endAt: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutOffersInput
  }

  export type OfferUncheckedCreateInput = {
    id?: string
    tenantId: string
    name: string
    description?: string | null
    rateMultiplierBps: number
    startAt: Date | string
    endAt: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OfferUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    rateMultiplierBps?: IntFieldUpdateOperationsInput | number
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutOffersNestedInput
  }

  export type OfferUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    rateMultiplierBps?: IntFieldUpdateOperationsInput | number
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfferCreateManyInput = {
    id?: string
    tenantId: string
    name: string
    description?: string | null
    rateMultiplierBps: number
    startAt: Date | string
    endAt: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OfferUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    rateMultiplierBps?: IntFieldUpdateOperationsInput | number
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfferUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    rateMultiplierBps?: IntFieldUpdateOperationsInput | number
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    id?: string
    channel: $Enums.NotifChannel
    template: string
    payload: JsonNullValueInput | InputJsonValue
    status?: $Enums.NotifStatus
    error?: string | null
    createdAt?: Date | string
    sentAt?: Date | string | null
    customer: CustomerCreateNestedOneWithoutNotificationsInput
    tenant: TenantCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    tenantId: string
    customerId: string
    channel: $Enums.NotifChannel
    template: string
    payload: JsonNullValueInput | InputJsonValue
    status?: $Enums.NotifStatus
    error?: string | null
    createdAt?: Date | string
    sentAt?: Date | string | null
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    channel?: EnumNotifChannelFieldUpdateOperationsInput | $Enums.NotifChannel
    template?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    status?: EnumNotifStatusFieldUpdateOperationsInput | $Enums.NotifStatus
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customer?: CustomerUpdateOneRequiredWithoutNotificationsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    channel?: EnumNotifChannelFieldUpdateOperationsInput | $Enums.NotifChannel
    template?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    status?: EnumNotifStatusFieldUpdateOperationsInput | $Enums.NotifStatus
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NotificationCreateManyInput = {
    id?: string
    tenantId: string
    customerId: string
    channel: $Enums.NotifChannel
    template: string
    payload: JsonNullValueInput | InputJsonValue
    status?: $Enums.NotifStatus
    error?: string | null
    createdAt?: Date | string
    sentAt?: Date | string | null
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    channel?: EnumNotifChannelFieldUpdateOperationsInput | $Enums.NotifChannel
    template?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    status?: EnumNotifStatusFieldUpdateOperationsInput | $Enums.NotifStatus
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    channel?: EnumNotifChannelFieldUpdateOperationsInput | $Enums.NotifChannel
    template?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    status?: EnumNotifStatusFieldUpdateOperationsInput | $Enums.NotifStatus
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CardOrderCreateInput = {
    id?: string
    cardType: $Enums.CardType
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    status?: $Enums.OrderStatus
    storeName?: string | null
    storePhone?: string | null
    storeAddress?: string | null
    customDesign?: string | null
    shippingAddress?: string | null
    trackingNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shippedAt?: Date | string | null
    deliveredAt?: Date | string | null
    approvedAt?: Date | string | null
    approvedBy?: string | null
    deductFromBalance?: boolean
    paidAt?: Date | string | null
    sourceType?: $Enums.OrderSourceType
    stripePaymentId?: string | null
    stripeSessionId?: string | null
    cardLimitTransactions?: CardLimitTransactionCreateNestedManyWithoutRelatedOrderInput
    tenant: TenantCreateNestedOneWithoutCardOrdersInput
  }

  export type CardOrderUncheckedCreateInput = {
    id?: string
    tenantId: string
    cardType: $Enums.CardType
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    status?: $Enums.OrderStatus
    storeName?: string | null
    storePhone?: string | null
    storeAddress?: string | null
    customDesign?: string | null
    shippingAddress?: string | null
    trackingNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shippedAt?: Date | string | null
    deliveredAt?: Date | string | null
    approvedAt?: Date | string | null
    approvedBy?: string | null
    deductFromBalance?: boolean
    paidAt?: Date | string | null
    sourceType?: $Enums.OrderSourceType
    stripePaymentId?: string | null
    stripeSessionId?: string | null
    cardLimitTransactions?: CardLimitTransactionUncheckedCreateNestedManyWithoutRelatedOrderInput
  }

  export type CardOrderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardType?: EnumCardTypeFieldUpdateOperationsInput | $Enums.CardType
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    storeName?: NullableStringFieldUpdateOperationsInput | string | null
    storePhone?: NullableStringFieldUpdateOperationsInput | string | null
    storeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    customDesign?: NullableStringFieldUpdateOperationsInput | string | null
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    trackingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shippedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deductFromBalance?: BoolFieldUpdateOperationsInput | boolean
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sourceType?: EnumOrderSourceTypeFieldUpdateOperationsInput | $Enums.OrderSourceType
    stripePaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    cardLimitTransactions?: CardLimitTransactionUpdateManyWithoutRelatedOrderNestedInput
    tenant?: TenantUpdateOneRequiredWithoutCardOrdersNestedInput
  }

  export type CardOrderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    cardType?: EnumCardTypeFieldUpdateOperationsInput | $Enums.CardType
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    storeName?: NullableStringFieldUpdateOperationsInput | string | null
    storePhone?: NullableStringFieldUpdateOperationsInput | string | null
    storeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    customDesign?: NullableStringFieldUpdateOperationsInput | string | null
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    trackingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shippedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deductFromBalance?: BoolFieldUpdateOperationsInput | boolean
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sourceType?: EnumOrderSourceTypeFieldUpdateOperationsInput | $Enums.OrderSourceType
    stripePaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    cardLimitTransactions?: CardLimitTransactionUncheckedUpdateManyWithoutRelatedOrderNestedInput
  }

  export type CardOrderCreateManyInput = {
    id?: string
    tenantId: string
    cardType: $Enums.CardType
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    status?: $Enums.OrderStatus
    storeName?: string | null
    storePhone?: string | null
    storeAddress?: string | null
    customDesign?: string | null
    shippingAddress?: string | null
    trackingNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shippedAt?: Date | string | null
    deliveredAt?: Date | string | null
    approvedAt?: Date | string | null
    approvedBy?: string | null
    deductFromBalance?: boolean
    paidAt?: Date | string | null
    sourceType?: $Enums.OrderSourceType
    stripePaymentId?: string | null
    stripeSessionId?: string | null
  }

  export type CardOrderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardType?: EnumCardTypeFieldUpdateOperationsInput | $Enums.CardType
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    storeName?: NullableStringFieldUpdateOperationsInput | string | null
    storePhone?: NullableStringFieldUpdateOperationsInput | string | null
    storeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    customDesign?: NullableStringFieldUpdateOperationsInput | string | null
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    trackingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shippedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deductFromBalance?: BoolFieldUpdateOperationsInput | boolean
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sourceType?: EnumOrderSourceTypeFieldUpdateOperationsInput | $Enums.OrderSourceType
    stripePaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CardOrderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    cardType?: EnumCardTypeFieldUpdateOperationsInput | $Enums.CardType
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    storeName?: NullableStringFieldUpdateOperationsInput | string | null
    storePhone?: NullableStringFieldUpdateOperationsInput | string | null
    storeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    customDesign?: NullableStringFieldUpdateOperationsInput | string | null
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    trackingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shippedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deductFromBalance?: BoolFieldUpdateOperationsInput | boolean
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sourceType?: EnumOrderSourceTypeFieldUpdateOperationsInput | $Enums.OrderSourceType
    stripePaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PlanCreateInput = {
    id?: string
    name: string
    description: string
    priceMonthly: number
    billingPeriod?: $Enums.BillingPeriod
    billingPeriodMultiplier?: number
    stripePriceId: string
    features?: PlanCreatefeaturesInput | string[]
    maxStores?: number
    maxStaff?: number
    maxCards?: number
    maxTransactions?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    allowCardOrdering?: boolean
    cardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionCreateNestedManyWithoutRelatedPlanInput
    tenants?: TenantCreateNestedManyWithoutPlanInput
    payments?: PaymentCreateNestedManyWithoutPlanInput
    subscriptionEvents?: SubscriptionEventCreateNestedManyWithoutPlanInput
    previousSubscriptionEvents?: SubscriptionEventCreateNestedManyWithoutPreviousPlanInput
  }

  export type PlanUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    priceMonthly: number
    billingPeriod?: $Enums.BillingPeriod
    billingPeriodMultiplier?: number
    stripePriceId: string
    features?: PlanCreatefeaturesInput | string[]
    maxStores?: number
    maxStaff?: number
    maxCards?: number
    maxTransactions?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    allowCardOrdering?: boolean
    cardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionUncheckedCreateNestedManyWithoutRelatedPlanInput
    tenants?: TenantUncheckedCreateNestedManyWithoutPlanInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPlanInput
    subscriptionEvents?: SubscriptionEventUncheckedCreateNestedManyWithoutPlanInput
    previousSubscriptionEvents?: SubscriptionEventUncheckedCreateNestedManyWithoutPreviousPlanInput
  }

  export type PlanUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priceMonthly?: IntFieldUpdateOperationsInput | number
    billingPeriod?: EnumBillingPeriodFieldUpdateOperationsInput | $Enums.BillingPeriod
    billingPeriodMultiplier?: IntFieldUpdateOperationsInput | number
    stripePriceId?: StringFieldUpdateOperationsInput | string
    features?: PlanUpdatefeaturesInput | string[]
    maxStores?: IntFieldUpdateOperationsInput | number
    maxStaff?: IntFieldUpdateOperationsInput | number
    maxCards?: IntFieldUpdateOperationsInput | number
    maxTransactions?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowCardOrdering?: BoolFieldUpdateOperationsInput | boolean
    cardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUpdateManyWithoutRelatedPlanNestedInput
    tenants?: TenantUpdateManyWithoutPlanNestedInput
    payments?: PaymentUpdateManyWithoutPlanNestedInput
    subscriptionEvents?: SubscriptionEventUpdateManyWithoutPlanNestedInput
    previousSubscriptionEvents?: SubscriptionEventUpdateManyWithoutPreviousPlanNestedInput
  }

  export type PlanUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priceMonthly?: IntFieldUpdateOperationsInput | number
    billingPeriod?: EnumBillingPeriodFieldUpdateOperationsInput | $Enums.BillingPeriod
    billingPeriodMultiplier?: IntFieldUpdateOperationsInput | number
    stripePriceId?: StringFieldUpdateOperationsInput | string
    features?: PlanUpdatefeaturesInput | string[]
    maxStores?: IntFieldUpdateOperationsInput | number
    maxStaff?: IntFieldUpdateOperationsInput | number
    maxCards?: IntFieldUpdateOperationsInput | number
    maxTransactions?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowCardOrdering?: BoolFieldUpdateOperationsInput | boolean
    cardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUncheckedUpdateManyWithoutRelatedPlanNestedInput
    tenants?: TenantUncheckedUpdateManyWithoutPlanNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPlanNestedInput
    subscriptionEvents?: SubscriptionEventUncheckedUpdateManyWithoutPlanNestedInput
    previousSubscriptionEvents?: SubscriptionEventUncheckedUpdateManyWithoutPreviousPlanNestedInput
  }

  export type PlanCreateManyInput = {
    id?: string
    name: string
    description: string
    priceMonthly: number
    billingPeriod?: $Enums.BillingPeriod
    billingPeriodMultiplier?: number
    stripePriceId: string
    features?: PlanCreatefeaturesInput | string[]
    maxStores?: number
    maxStaff?: number
    maxCards?: number
    maxTransactions?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    allowCardOrdering?: boolean
    cardAllowance?: number
  }

  export type PlanUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priceMonthly?: IntFieldUpdateOperationsInput | number
    billingPeriod?: EnumBillingPeriodFieldUpdateOperationsInput | $Enums.BillingPeriod
    billingPeriodMultiplier?: IntFieldUpdateOperationsInput | number
    stripePriceId?: StringFieldUpdateOperationsInput | string
    features?: PlanUpdatefeaturesInput | string[]
    maxStores?: IntFieldUpdateOperationsInput | number
    maxStaff?: IntFieldUpdateOperationsInput | number
    maxCards?: IntFieldUpdateOperationsInput | number
    maxTransactions?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowCardOrdering?: BoolFieldUpdateOperationsInput | boolean
    cardAllowance?: IntFieldUpdateOperationsInput | number
  }

  export type PlanUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priceMonthly?: IntFieldUpdateOperationsInput | number
    billingPeriod?: EnumBillingPeriodFieldUpdateOperationsInput | $Enums.BillingPeriod
    billingPeriodMultiplier?: IntFieldUpdateOperationsInput | number
    stripePriceId?: StringFieldUpdateOperationsInput | string
    features?: PlanUpdatefeaturesInput | string[]
    maxStores?: IntFieldUpdateOperationsInput | number
    maxStaff?: IntFieldUpdateOperationsInput | number
    maxCards?: IntFieldUpdateOperationsInput | number
    maxTransactions?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowCardOrdering?: BoolFieldUpdateOperationsInput | boolean
    cardAllowance?: IntFieldUpdateOperationsInput | number
  }

  export type CardLimitTransactionCreateInput = {
    id?: string
    type: $Enums.CardLimitTransactionType
    source: $Enums.CardLimitTransactionSource
    amount: number
    previousBalance: number
    newBalance: number
    description?: string | null
    createdAt?: Date | string
    createdBy?: string | null
    relatedOrder?: CardOrderCreateNestedOneWithoutCardLimitTransactionsInput
    relatedPlan?: PlanCreateNestedOneWithoutCardLimitTransactionsInput
    tenant: TenantCreateNestedOneWithoutCardLimitTransactionsInput
  }

  export type CardLimitTransactionUncheckedCreateInput = {
    id?: string
    tenantId: string
    type: $Enums.CardLimitTransactionType
    source: $Enums.CardLimitTransactionSource
    amount: number
    previousBalance: number
    newBalance: number
    description?: string | null
    relatedOrderId?: string | null
    relatedPlanId?: string | null
    createdAt?: Date | string
    createdBy?: string | null
  }

  export type CardLimitTransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumCardLimitTransactionTypeFieldUpdateOperationsInput | $Enums.CardLimitTransactionType
    source?: EnumCardLimitTransactionSourceFieldUpdateOperationsInput | $Enums.CardLimitTransactionSource
    amount?: IntFieldUpdateOperationsInput | number
    previousBalance?: IntFieldUpdateOperationsInput | number
    newBalance?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    relatedOrder?: CardOrderUpdateOneWithoutCardLimitTransactionsNestedInput
    relatedPlan?: PlanUpdateOneWithoutCardLimitTransactionsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutCardLimitTransactionsNestedInput
  }

  export type CardLimitTransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    type?: EnumCardLimitTransactionTypeFieldUpdateOperationsInput | $Enums.CardLimitTransactionType
    source?: EnumCardLimitTransactionSourceFieldUpdateOperationsInput | $Enums.CardLimitTransactionSource
    amount?: IntFieldUpdateOperationsInput | number
    previousBalance?: IntFieldUpdateOperationsInput | number
    newBalance?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    relatedOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CardLimitTransactionCreateManyInput = {
    id?: string
    tenantId: string
    type: $Enums.CardLimitTransactionType
    source: $Enums.CardLimitTransactionSource
    amount: number
    previousBalance: number
    newBalance: number
    description?: string | null
    relatedOrderId?: string | null
    relatedPlanId?: string | null
    createdAt?: Date | string
    createdBy?: string | null
  }

  export type CardLimitTransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumCardLimitTransactionTypeFieldUpdateOperationsInput | $Enums.CardLimitTransactionType
    source?: EnumCardLimitTransactionSourceFieldUpdateOperationsInput | $Enums.CardLimitTransactionSource
    amount?: IntFieldUpdateOperationsInput | number
    previousBalance?: IntFieldUpdateOperationsInput | number
    newBalance?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CardLimitTransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    type?: EnumCardLimitTransactionTypeFieldUpdateOperationsInput | $Enums.CardLimitTransactionType
    source?: EnumCardLimitTransactionSourceFieldUpdateOperationsInput | $Enums.CardLimitTransactionSource
    amount?: IntFieldUpdateOperationsInput | number
    previousBalance?: IntFieldUpdateOperationsInput | number
    newBalance?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    relatedOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaymentCreateInput = {
    id?: string
    stripeSubscriptionId?: string | null
    stripeInvoiceId?: string | null
    stripePaymentIntentId?: string | null
    amount: number
    currency?: string
    status: string
    description?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutPaymentsInput
    plan: PlanCreateNestedOneWithoutPaymentsInput
  }

  export type PaymentUncheckedCreateInput = {
    id?: string
    tenantId: string
    planId: string
    stripeSubscriptionId?: string | null
    stripeInvoiceId?: string | null
    stripePaymentIntentId?: string | null
    amount: number
    currency?: string
    status: string
    description?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeInvoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePaymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutPaymentsNestedInput
    plan?: PlanUpdateOneRequiredWithoutPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeInvoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePaymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateManyInput = {
    id?: string
    tenantId: string
    planId: string
    stripeSubscriptionId?: string | null
    stripeInvoiceId?: string | null
    stripePaymentIntentId?: string | null
    amount: number
    currency?: string
    status: string
    description?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeInvoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePaymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeInvoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePaymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionEventCreateInput = {
    id?: string
    eventType: string
    stripeSubscriptionId?: string | null
    metadata?: string | null
    createdAt?: Date | string
    tenant: TenantCreateNestedOneWithoutSubscriptionEventsInput
    plan: PlanCreateNestedOneWithoutSubscriptionEventsInput
    previousPlan?: PlanCreateNestedOneWithoutPreviousSubscriptionEventsInput
  }

  export type SubscriptionEventUncheckedCreateInput = {
    id?: string
    tenantId: string
    planId: string
    eventType: string
    previousPlanId?: string | null
    stripeSubscriptionId?: string | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type SubscriptionEventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutSubscriptionEventsNestedInput
    plan?: PlanUpdateOneRequiredWithoutSubscriptionEventsNestedInput
    previousPlan?: PlanUpdateOneWithoutPreviousSubscriptionEventsNestedInput
  }

  export type SubscriptionEventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    previousPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionEventCreateManyInput = {
    id?: string
    tenantId: string
    planId: string
    eventType: string
    previousPlanId?: string | null
    stripeSubscriptionId?: string | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type SubscriptionEventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionEventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    previousPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumSubscriptionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusFilter<$PrismaModel> | $Enums.SubscriptionStatus
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type CardLimitTransactionListRelationFilter = {
    every?: CardLimitTransactionWhereInput
    some?: CardLimitTransactionWhereInput
    none?: CardLimitTransactionWhereInput
  }

  export type CardOrderListRelationFilter = {
    every?: CardOrderWhereInput
    some?: CardOrderWhereInput
    none?: CardOrderWhereInput
  }

  export type CardListRelationFilter = {
    every?: CardWhereInput
    some?: CardWhereInput
    none?: CardWhereInput
  }

  export type CashbackRuleListRelationFilter = {
    every?: CashbackRuleWhereInput
    some?: CashbackRuleWhereInput
    none?: CashbackRuleWhereInput
  }

  export type CustomerListRelationFilter = {
    every?: CustomerWhereInput
    some?: CustomerWhereInput
    none?: CustomerWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type OfferListRelationFilter = {
    every?: OfferWhereInput
    some?: OfferWhereInput
    none?: OfferWhereInput
  }

  export type StoreListRelationFilter = {
    every?: StoreWhereInput
    some?: StoreWhereInput
    none?: StoreWhereInput
  }

  export type PlanNullableRelationFilter = {
    is?: PlanWhereInput | null
    isNot?: PlanWhereInput | null
  }

  export type TierRuleListRelationFilter = {
    every?: TierRuleWhereInput
    some?: TierRuleWhereInput
    none?: TierRuleWhereInput
  }

  export type TransactionListRelationFilter = {
    every?: TransactionWhereInput
    some?: TransactionWhereInput
    none?: TransactionWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type PaymentListRelationFilter = {
    every?: PaymentWhereInput
    some?: PaymentWhereInput
    none?: PaymentWhereInput
  }

  export type SubscriptionEventListRelationFilter = {
    every?: SubscriptionEventWhereInput
    some?: SubscriptionEventWhereInput
    none?: SubscriptionEventWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CardLimitTransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CardOrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CashbackRuleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OfferOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StoreOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TierRuleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubscriptionEventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TenantCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    graceEndsAt?: SortOrder
    planId?: SortOrder
    slug?: SortOrder
    stripeCustomerId?: SortOrder
    stripeSubscriptionId?: SortOrder
    subscriptionStatus?: SortOrder
    trialEndsAt?: SortOrder
    freeTrialActivations?: SortOrder
    freeTrialCardsCreated?: SortOrder
    freeTrialLimit?: SortOrder
    trialExpiredNotified?: SortOrder
    currentCardBalance?: SortOrder
    subscriptionCardLimit?: SortOrder
    subscriptionCardsUsed?: SortOrder
    totalCardAllowance?: SortOrder
  }

  export type TenantAvgOrderByAggregateInput = {
    freeTrialActivations?: SortOrder
    freeTrialCardsCreated?: SortOrder
    freeTrialLimit?: SortOrder
    currentCardBalance?: SortOrder
    subscriptionCardLimit?: SortOrder
    subscriptionCardsUsed?: SortOrder
    totalCardAllowance?: SortOrder
  }

  export type TenantMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    graceEndsAt?: SortOrder
    planId?: SortOrder
    slug?: SortOrder
    stripeCustomerId?: SortOrder
    stripeSubscriptionId?: SortOrder
    subscriptionStatus?: SortOrder
    trialEndsAt?: SortOrder
    freeTrialActivations?: SortOrder
    freeTrialCardsCreated?: SortOrder
    freeTrialLimit?: SortOrder
    trialExpiredNotified?: SortOrder
    currentCardBalance?: SortOrder
    subscriptionCardLimit?: SortOrder
    subscriptionCardsUsed?: SortOrder
    totalCardAllowance?: SortOrder
  }

  export type TenantMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    graceEndsAt?: SortOrder
    planId?: SortOrder
    slug?: SortOrder
    stripeCustomerId?: SortOrder
    stripeSubscriptionId?: SortOrder
    subscriptionStatus?: SortOrder
    trialEndsAt?: SortOrder
    freeTrialActivations?: SortOrder
    freeTrialCardsCreated?: SortOrder
    freeTrialLimit?: SortOrder
    trialExpiredNotified?: SortOrder
    currentCardBalance?: SortOrder
    subscriptionCardLimit?: SortOrder
    subscriptionCardsUsed?: SortOrder
    totalCardAllowance?: SortOrder
  }

  export type TenantSumOrderByAggregateInput = {
    freeTrialActivations?: SortOrder
    freeTrialCardsCreated?: SortOrder
    freeTrialLimit?: SortOrder
    currentCardBalance?: SortOrder
    subscriptionCardLimit?: SortOrder
    subscriptionCardsUsed?: SortOrder
    totalCardAllowance?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumSubscriptionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusWithAggregatesFilter<$PrismaModel> | $Enums.SubscriptionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
    _max?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type TenantRelationFilter = {
    is?: TenantWhereInput
    isNot?: TenantWhereInput
  }

  export type StoreCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrder
    address?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StoreMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrder
    address?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StoreMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrder
    address?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type StoreNullableRelationFilter = {
    is?: StoreWhereInput | null
    isNot?: StoreWhereInput | null
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    storeId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    storeId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    storeId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrder
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type EnumTierFilter<$PrismaModel = never> = {
    equals?: $Enums.Tier | EnumTierFieldRefInput<$PrismaModel>
    in?: $Enums.Tier[] | ListEnumTierFieldRefInput<$PrismaModel>
    notIn?: $Enums.Tier[] | ListEnumTierFieldRefInput<$PrismaModel>
    not?: NestedEnumTierFilter<$PrismaModel> | $Enums.Tier
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type CustomerCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    tier?: SortOrder
    totalSpend?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerAvgOrderByAggregateInput = {
    totalSpend?: SortOrder
  }

  export type CustomerMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    tier?: SortOrder
    totalSpend?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    tier?: SortOrder
    totalSpend?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerSumOrderByAggregateInput = {
    totalSpend?: SortOrder
  }

  export type EnumTierWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Tier | EnumTierFieldRefInput<$PrismaModel>
    in?: $Enums.Tier[] | ListEnumTierFieldRefInput<$PrismaModel>
    notIn?: $Enums.Tier[] | ListEnumTierFieldRefInput<$PrismaModel>
    not?: NestedEnumTierWithAggregatesFilter<$PrismaModel> | $Enums.Tier
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTierFilter<$PrismaModel>
    _max?: NestedEnumTierFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type EnumCardStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CardStatus | EnumCardStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CardStatus[] | ListEnumCardStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CardStatus[] | ListEnumCardStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCardStatusFilter<$PrismaModel> | $Enums.CardStatus
  }

  export type CustomerNullableRelationFilter = {
    is?: CustomerWhereInput | null
    isNot?: CustomerWhereInput | null
  }

  export type CardCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    cardUid?: SortOrder
    customerId?: SortOrder
    activatedAt?: SortOrder
    storeId?: SortOrder
    status?: SortOrder
    qrUrl?: SortOrder
    balanceCents?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CardAvgOrderByAggregateInput = {
    balanceCents?: SortOrder
  }

  export type CardMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    cardUid?: SortOrder
    customerId?: SortOrder
    activatedAt?: SortOrder
    storeId?: SortOrder
    status?: SortOrder
    qrUrl?: SortOrder
    balanceCents?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CardMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    cardUid?: SortOrder
    customerId?: SortOrder
    activatedAt?: SortOrder
    storeId?: SortOrder
    status?: SortOrder
    qrUrl?: SortOrder
    balanceCents?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CardSumOrderByAggregateInput = {
    balanceCents?: SortOrder
  }

  export type EnumCardStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CardStatus | EnumCardStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CardStatus[] | ListEnumCardStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CardStatus[] | ListEnumCardStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCardStatusWithAggregatesFilter<$PrismaModel> | $Enums.CardStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCardStatusFilter<$PrismaModel>
    _max?: NestedEnumCardStatusFilter<$PrismaModel>
  }

  export type EnumTxTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TxType | EnumTxTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TxType[] | ListEnumTxTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TxType[] | ListEnumTxTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTxTypeFilter<$PrismaModel> | $Enums.TxType
  }

  export type EnumTxCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.TxCategory | EnumTxCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.TxCategory[] | ListEnumTxCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.TxCategory[] | ListEnumTxCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumTxCategoryFilter<$PrismaModel> | $Enums.TxCategory
  }

  export type CardRelationFilter = {
    is?: CardWhereInput
    isNot?: CardWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CustomerRelationFilter = {
    is?: CustomerWhereInput
    isNot?: CustomerWhereInput
  }

  export type StoreRelationFilter = {
    is?: StoreWhereInput
    isNot?: StoreWhereInput
  }

  export type TransactionCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    storeId?: SortOrder
    cardId?: SortOrder
    customerId?: SortOrder
    cashierId?: SortOrder
    type?: SortOrder
    category?: SortOrder
    amountCents?: SortOrder
    cashbackCents?: SortOrder
    beforeBalanceCents?: SortOrder
    afterBalanceCents?: SortOrder
    note?: SortOrder
    sourceIp?: SortOrder
    createdAt?: SortOrder
  }

  export type TransactionAvgOrderByAggregateInput = {
    amountCents?: SortOrder
    cashbackCents?: SortOrder
    beforeBalanceCents?: SortOrder
    afterBalanceCents?: SortOrder
  }

  export type TransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    storeId?: SortOrder
    cardId?: SortOrder
    customerId?: SortOrder
    cashierId?: SortOrder
    type?: SortOrder
    category?: SortOrder
    amountCents?: SortOrder
    cashbackCents?: SortOrder
    beforeBalanceCents?: SortOrder
    afterBalanceCents?: SortOrder
    note?: SortOrder
    sourceIp?: SortOrder
    createdAt?: SortOrder
  }

  export type TransactionMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    storeId?: SortOrder
    cardId?: SortOrder
    customerId?: SortOrder
    cashierId?: SortOrder
    type?: SortOrder
    category?: SortOrder
    amountCents?: SortOrder
    cashbackCents?: SortOrder
    beforeBalanceCents?: SortOrder
    afterBalanceCents?: SortOrder
    note?: SortOrder
    sourceIp?: SortOrder
    createdAt?: SortOrder
  }

  export type TransactionSumOrderByAggregateInput = {
    amountCents?: SortOrder
    cashbackCents?: SortOrder
    beforeBalanceCents?: SortOrder
    afterBalanceCents?: SortOrder
  }

  export type EnumTxTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TxType | EnumTxTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TxType[] | ListEnumTxTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TxType[] | ListEnumTxTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTxTypeWithAggregatesFilter<$PrismaModel> | $Enums.TxType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTxTypeFilter<$PrismaModel>
    _max?: NestedEnumTxTypeFilter<$PrismaModel>
  }

  export type EnumTxCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TxCategory | EnumTxCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.TxCategory[] | ListEnumTxCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.TxCategory[] | ListEnumTxCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumTxCategoryWithAggregatesFilter<$PrismaModel> | $Enums.TxCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTxCategoryFilter<$PrismaModel>
    _max?: NestedEnumTxCategoryFilter<$PrismaModel>
  }

  export type TierRuleTenantIdTierCompoundUniqueInput = {
    tenantId: string
    tier: $Enums.Tier
  }

  export type TierRuleCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    tier?: SortOrder
    name?: SortOrder
    minTotalSpendCents?: SortOrder
    baseRateBps?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TierRuleAvgOrderByAggregateInput = {
    minTotalSpendCents?: SortOrder
    baseRateBps?: SortOrder
  }

  export type TierRuleMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    tier?: SortOrder
    name?: SortOrder
    minTotalSpendCents?: SortOrder
    baseRateBps?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TierRuleMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    tier?: SortOrder
    name?: SortOrder
    minTotalSpendCents?: SortOrder
    baseRateBps?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TierRuleSumOrderByAggregateInput = {
    minTotalSpendCents?: SortOrder
    baseRateBps?: SortOrder
  }

  export type CashbackRuleTenantIdCategoryCompoundUniqueInput = {
    tenantId: string
    category: $Enums.TxCategory
  }

  export type CashbackRuleCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    category?: SortOrder
    baseRateBps?: SortOrder
    startAt?: SortOrder
    endAt?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CashbackRuleAvgOrderByAggregateInput = {
    baseRateBps?: SortOrder
  }

  export type CashbackRuleMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    category?: SortOrder
    baseRateBps?: SortOrder
    startAt?: SortOrder
    endAt?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CashbackRuleMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    category?: SortOrder
    baseRateBps?: SortOrder
    startAt?: SortOrder
    endAt?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CashbackRuleSumOrderByAggregateInput = {
    baseRateBps?: SortOrder
  }

  export type OfferCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    rateMultiplierBps?: SortOrder
    startAt?: SortOrder
    endAt?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OfferAvgOrderByAggregateInput = {
    rateMultiplierBps?: SortOrder
  }

  export type OfferMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    rateMultiplierBps?: SortOrder
    startAt?: SortOrder
    endAt?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OfferMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    rateMultiplierBps?: SortOrder
    startAt?: SortOrder
    endAt?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OfferSumOrderByAggregateInput = {
    rateMultiplierBps?: SortOrder
  }

  export type EnumNotifChannelFilter<$PrismaModel = never> = {
    equals?: $Enums.NotifChannel | EnumNotifChannelFieldRefInput<$PrismaModel>
    in?: $Enums.NotifChannel[] | ListEnumNotifChannelFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotifChannel[] | ListEnumNotifChannelFieldRefInput<$PrismaModel>
    not?: NestedEnumNotifChannelFilter<$PrismaModel> | $Enums.NotifChannel
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type EnumNotifStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.NotifStatus | EnumNotifStatusFieldRefInput<$PrismaModel>
    in?: $Enums.NotifStatus[] | ListEnumNotifStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotifStatus[] | ListEnumNotifStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumNotifStatusFilter<$PrismaModel> | $Enums.NotifStatus
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    customerId?: SortOrder
    channel?: SortOrder
    template?: SortOrder
    payload?: SortOrder
    status?: SortOrder
    error?: SortOrder
    createdAt?: SortOrder
    sentAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    customerId?: SortOrder
    channel?: SortOrder
    template?: SortOrder
    status?: SortOrder
    error?: SortOrder
    createdAt?: SortOrder
    sentAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    customerId?: SortOrder
    channel?: SortOrder
    template?: SortOrder
    status?: SortOrder
    error?: SortOrder
    createdAt?: SortOrder
    sentAt?: SortOrder
  }

  export type EnumNotifChannelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotifChannel | EnumNotifChannelFieldRefInput<$PrismaModel>
    in?: $Enums.NotifChannel[] | ListEnumNotifChannelFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotifChannel[] | ListEnumNotifChannelFieldRefInput<$PrismaModel>
    not?: NestedEnumNotifChannelWithAggregatesFilter<$PrismaModel> | $Enums.NotifChannel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotifChannelFilter<$PrismaModel>
    _max?: NestedEnumNotifChannelFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type EnumNotifStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotifStatus | EnumNotifStatusFieldRefInput<$PrismaModel>
    in?: $Enums.NotifStatus[] | ListEnumNotifStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotifStatus[] | ListEnumNotifStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumNotifStatusWithAggregatesFilter<$PrismaModel> | $Enums.NotifStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotifStatusFilter<$PrismaModel>
    _max?: NestedEnumNotifStatusFilter<$PrismaModel>
  }

  export type EnumCardTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CardType | EnumCardTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CardType[] | ListEnumCardTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CardType[] | ListEnumCardTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCardTypeFilter<$PrismaModel> | $Enums.CardType
  }

  export type EnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type EnumOrderSourceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderSourceType | EnumOrderSourceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OrderSourceType[] | ListEnumOrderSourceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderSourceType[] | ListEnumOrderSourceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderSourceTypeFilter<$PrismaModel> | $Enums.OrderSourceType
  }

  export type CardOrderCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    cardType?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    status?: SortOrder
    storeName?: SortOrder
    storePhone?: SortOrder
    storeAddress?: SortOrder
    customDesign?: SortOrder
    shippingAddress?: SortOrder
    trackingNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    shippedAt?: SortOrder
    deliveredAt?: SortOrder
    approvedAt?: SortOrder
    approvedBy?: SortOrder
    deductFromBalance?: SortOrder
    paidAt?: SortOrder
    sourceType?: SortOrder
    stripePaymentId?: SortOrder
    stripeSessionId?: SortOrder
  }

  export type CardOrderAvgOrderByAggregateInput = {
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
  }

  export type CardOrderMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    cardType?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    status?: SortOrder
    storeName?: SortOrder
    storePhone?: SortOrder
    storeAddress?: SortOrder
    customDesign?: SortOrder
    shippingAddress?: SortOrder
    trackingNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    shippedAt?: SortOrder
    deliveredAt?: SortOrder
    approvedAt?: SortOrder
    approvedBy?: SortOrder
    deductFromBalance?: SortOrder
    paidAt?: SortOrder
    sourceType?: SortOrder
    stripePaymentId?: SortOrder
    stripeSessionId?: SortOrder
  }

  export type CardOrderMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    cardType?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    status?: SortOrder
    storeName?: SortOrder
    storePhone?: SortOrder
    storeAddress?: SortOrder
    customDesign?: SortOrder
    shippingAddress?: SortOrder
    trackingNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    shippedAt?: SortOrder
    deliveredAt?: SortOrder
    approvedAt?: SortOrder
    approvedBy?: SortOrder
    deductFromBalance?: SortOrder
    paidAt?: SortOrder
    sourceType?: SortOrder
    stripePaymentId?: SortOrder
    stripeSessionId?: SortOrder
  }

  export type CardOrderSumOrderByAggregateInput = {
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
  }

  export type EnumCardTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CardType | EnumCardTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CardType[] | ListEnumCardTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CardType[] | ListEnumCardTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCardTypeWithAggregatesFilter<$PrismaModel> | $Enums.CardType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCardTypeFilter<$PrismaModel>
    _max?: NestedEnumCardTypeFilter<$PrismaModel>
  }

  export type EnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type EnumOrderSourceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderSourceType | EnumOrderSourceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OrderSourceType[] | ListEnumOrderSourceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderSourceType[] | ListEnumOrderSourceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderSourceTypeWithAggregatesFilter<$PrismaModel> | $Enums.OrderSourceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderSourceTypeFilter<$PrismaModel>
    _max?: NestedEnumOrderSourceTypeFilter<$PrismaModel>
  }

  export type EnumBillingPeriodFilter<$PrismaModel = never> = {
    equals?: $Enums.BillingPeriod | EnumBillingPeriodFieldRefInput<$PrismaModel>
    in?: $Enums.BillingPeriod[] | ListEnumBillingPeriodFieldRefInput<$PrismaModel>
    notIn?: $Enums.BillingPeriod[] | ListEnumBillingPeriodFieldRefInput<$PrismaModel>
    not?: NestedEnumBillingPeriodFilter<$PrismaModel> | $Enums.BillingPeriod
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type TenantListRelationFilter = {
    every?: TenantWhereInput
    some?: TenantWhereInput
    none?: TenantWhereInput
  }

  export type TenantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlanCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    priceMonthly?: SortOrder
    billingPeriod?: SortOrder
    billingPeriodMultiplier?: SortOrder
    stripePriceId?: SortOrder
    features?: SortOrder
    maxStores?: SortOrder
    maxStaff?: SortOrder
    maxCards?: SortOrder
    maxTransactions?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    allowCardOrdering?: SortOrder
    cardAllowance?: SortOrder
  }

  export type PlanAvgOrderByAggregateInput = {
    priceMonthly?: SortOrder
    billingPeriodMultiplier?: SortOrder
    maxStores?: SortOrder
    maxStaff?: SortOrder
    maxCards?: SortOrder
    maxTransactions?: SortOrder
    cardAllowance?: SortOrder
  }

  export type PlanMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    priceMonthly?: SortOrder
    billingPeriod?: SortOrder
    billingPeriodMultiplier?: SortOrder
    stripePriceId?: SortOrder
    maxStores?: SortOrder
    maxStaff?: SortOrder
    maxCards?: SortOrder
    maxTransactions?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    allowCardOrdering?: SortOrder
    cardAllowance?: SortOrder
  }

  export type PlanMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    priceMonthly?: SortOrder
    billingPeriod?: SortOrder
    billingPeriodMultiplier?: SortOrder
    stripePriceId?: SortOrder
    maxStores?: SortOrder
    maxStaff?: SortOrder
    maxCards?: SortOrder
    maxTransactions?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    allowCardOrdering?: SortOrder
    cardAllowance?: SortOrder
  }

  export type PlanSumOrderByAggregateInput = {
    priceMonthly?: SortOrder
    billingPeriodMultiplier?: SortOrder
    maxStores?: SortOrder
    maxStaff?: SortOrder
    maxCards?: SortOrder
    maxTransactions?: SortOrder
    cardAllowance?: SortOrder
  }

  export type EnumBillingPeriodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BillingPeriod | EnumBillingPeriodFieldRefInput<$PrismaModel>
    in?: $Enums.BillingPeriod[] | ListEnumBillingPeriodFieldRefInput<$PrismaModel>
    notIn?: $Enums.BillingPeriod[] | ListEnumBillingPeriodFieldRefInput<$PrismaModel>
    not?: NestedEnumBillingPeriodWithAggregatesFilter<$PrismaModel> | $Enums.BillingPeriod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBillingPeriodFilter<$PrismaModel>
    _max?: NestedEnumBillingPeriodFilter<$PrismaModel>
  }

  export type EnumCardLimitTransactionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CardLimitTransactionType | EnumCardLimitTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CardLimitTransactionType[] | ListEnumCardLimitTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CardLimitTransactionType[] | ListEnumCardLimitTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCardLimitTransactionTypeFilter<$PrismaModel> | $Enums.CardLimitTransactionType
  }

  export type EnumCardLimitTransactionSourceFilter<$PrismaModel = never> = {
    equals?: $Enums.CardLimitTransactionSource | EnumCardLimitTransactionSourceFieldRefInput<$PrismaModel>
    in?: $Enums.CardLimitTransactionSource[] | ListEnumCardLimitTransactionSourceFieldRefInput<$PrismaModel>
    notIn?: $Enums.CardLimitTransactionSource[] | ListEnumCardLimitTransactionSourceFieldRefInput<$PrismaModel>
    not?: NestedEnumCardLimitTransactionSourceFilter<$PrismaModel> | $Enums.CardLimitTransactionSource
  }

  export type CardOrderNullableRelationFilter = {
    is?: CardOrderWhereInput | null
    isNot?: CardOrderWhereInput | null
  }

  export type CardLimitTransactionCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    type?: SortOrder
    source?: SortOrder
    amount?: SortOrder
    previousBalance?: SortOrder
    newBalance?: SortOrder
    description?: SortOrder
    relatedOrderId?: SortOrder
    relatedPlanId?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
  }

  export type CardLimitTransactionAvgOrderByAggregateInput = {
    amount?: SortOrder
    previousBalance?: SortOrder
    newBalance?: SortOrder
  }

  export type CardLimitTransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    type?: SortOrder
    source?: SortOrder
    amount?: SortOrder
    previousBalance?: SortOrder
    newBalance?: SortOrder
    description?: SortOrder
    relatedOrderId?: SortOrder
    relatedPlanId?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
  }

  export type CardLimitTransactionMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    type?: SortOrder
    source?: SortOrder
    amount?: SortOrder
    previousBalance?: SortOrder
    newBalance?: SortOrder
    description?: SortOrder
    relatedOrderId?: SortOrder
    relatedPlanId?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
  }

  export type CardLimitTransactionSumOrderByAggregateInput = {
    amount?: SortOrder
    previousBalance?: SortOrder
    newBalance?: SortOrder
  }

  export type EnumCardLimitTransactionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CardLimitTransactionType | EnumCardLimitTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CardLimitTransactionType[] | ListEnumCardLimitTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CardLimitTransactionType[] | ListEnumCardLimitTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCardLimitTransactionTypeWithAggregatesFilter<$PrismaModel> | $Enums.CardLimitTransactionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCardLimitTransactionTypeFilter<$PrismaModel>
    _max?: NestedEnumCardLimitTransactionTypeFilter<$PrismaModel>
  }

  export type EnumCardLimitTransactionSourceWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CardLimitTransactionSource | EnumCardLimitTransactionSourceFieldRefInput<$PrismaModel>
    in?: $Enums.CardLimitTransactionSource[] | ListEnumCardLimitTransactionSourceFieldRefInput<$PrismaModel>
    notIn?: $Enums.CardLimitTransactionSource[] | ListEnumCardLimitTransactionSourceFieldRefInput<$PrismaModel>
    not?: NestedEnumCardLimitTransactionSourceWithAggregatesFilter<$PrismaModel> | $Enums.CardLimitTransactionSource
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCardLimitTransactionSourceFilter<$PrismaModel>
    _max?: NestedEnumCardLimitTransactionSourceFilter<$PrismaModel>
  }

  export type PlanRelationFilter = {
    is?: PlanWhereInput
    isNot?: PlanWhereInput
  }

  export type PaymentCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    planId?: SortOrder
    stripeSubscriptionId?: SortOrder
    stripeInvoiceId?: SortOrder
    stripePaymentIntentId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    description?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type PaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    planId?: SortOrder
    stripeSubscriptionId?: SortOrder
    stripeInvoiceId?: SortOrder
    stripePaymentIntentId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    description?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    planId?: SortOrder
    stripeSubscriptionId?: SortOrder
    stripeInvoiceId?: SortOrder
    stripePaymentIntentId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    description?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type SubscriptionEventCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    planId?: SortOrder
    eventType?: SortOrder
    previousPlanId?: SortOrder
    stripeSubscriptionId?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type SubscriptionEventMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    planId?: SortOrder
    eventType?: SortOrder
    previousPlanId?: SortOrder
    stripeSubscriptionId?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type SubscriptionEventMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    planId?: SortOrder
    eventType?: SortOrder
    previousPlanId?: SortOrder
    stripeSubscriptionId?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type CardLimitTransactionCreateNestedManyWithoutTenantInput = {
    create?: XOR<CardLimitTransactionCreateWithoutTenantInput, CardLimitTransactionUncheckedCreateWithoutTenantInput> | CardLimitTransactionCreateWithoutTenantInput[] | CardLimitTransactionUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CardLimitTransactionCreateOrConnectWithoutTenantInput | CardLimitTransactionCreateOrConnectWithoutTenantInput[]
    createMany?: CardLimitTransactionCreateManyTenantInputEnvelope
    connect?: CardLimitTransactionWhereUniqueInput | CardLimitTransactionWhereUniqueInput[]
  }

  export type CardOrderCreateNestedManyWithoutTenantInput = {
    create?: XOR<CardOrderCreateWithoutTenantInput, CardOrderUncheckedCreateWithoutTenantInput> | CardOrderCreateWithoutTenantInput[] | CardOrderUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CardOrderCreateOrConnectWithoutTenantInput | CardOrderCreateOrConnectWithoutTenantInput[]
    createMany?: CardOrderCreateManyTenantInputEnvelope
    connect?: CardOrderWhereUniqueInput | CardOrderWhereUniqueInput[]
  }

  export type CardCreateNestedManyWithoutTenantInput = {
    create?: XOR<CardCreateWithoutTenantInput, CardUncheckedCreateWithoutTenantInput> | CardCreateWithoutTenantInput[] | CardUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CardCreateOrConnectWithoutTenantInput | CardCreateOrConnectWithoutTenantInput[]
    createMany?: CardCreateManyTenantInputEnvelope
    connect?: CardWhereUniqueInput | CardWhereUniqueInput[]
  }

  export type CashbackRuleCreateNestedManyWithoutTenantInput = {
    create?: XOR<CashbackRuleCreateWithoutTenantInput, CashbackRuleUncheckedCreateWithoutTenantInput> | CashbackRuleCreateWithoutTenantInput[] | CashbackRuleUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CashbackRuleCreateOrConnectWithoutTenantInput | CashbackRuleCreateOrConnectWithoutTenantInput[]
    createMany?: CashbackRuleCreateManyTenantInputEnvelope
    connect?: CashbackRuleWhereUniqueInput | CashbackRuleWhereUniqueInput[]
  }

  export type CustomerCreateNestedManyWithoutTenantInput = {
    create?: XOR<CustomerCreateWithoutTenantInput, CustomerUncheckedCreateWithoutTenantInput> | CustomerCreateWithoutTenantInput[] | CustomerUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutTenantInput | CustomerCreateOrConnectWithoutTenantInput[]
    createMany?: CustomerCreateManyTenantInputEnvelope
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutTenantInput = {
    create?: XOR<NotificationCreateWithoutTenantInput, NotificationUncheckedCreateWithoutTenantInput> | NotificationCreateWithoutTenantInput[] | NotificationUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutTenantInput | NotificationCreateOrConnectWithoutTenantInput[]
    createMany?: NotificationCreateManyTenantInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type OfferCreateNestedManyWithoutTenantInput = {
    create?: XOR<OfferCreateWithoutTenantInput, OfferUncheckedCreateWithoutTenantInput> | OfferCreateWithoutTenantInput[] | OfferUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: OfferCreateOrConnectWithoutTenantInput | OfferCreateOrConnectWithoutTenantInput[]
    createMany?: OfferCreateManyTenantInputEnvelope
    connect?: OfferWhereUniqueInput | OfferWhereUniqueInput[]
  }

  export type StoreCreateNestedManyWithoutTenantInput = {
    create?: XOR<StoreCreateWithoutTenantInput, StoreUncheckedCreateWithoutTenantInput> | StoreCreateWithoutTenantInput[] | StoreUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: StoreCreateOrConnectWithoutTenantInput | StoreCreateOrConnectWithoutTenantInput[]
    createMany?: StoreCreateManyTenantInputEnvelope
    connect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
  }

  export type PlanCreateNestedOneWithoutTenantsInput = {
    create?: XOR<PlanCreateWithoutTenantsInput, PlanUncheckedCreateWithoutTenantsInput>
    connectOrCreate?: PlanCreateOrConnectWithoutTenantsInput
    connect?: PlanWhereUniqueInput
  }

  export type TierRuleCreateNestedManyWithoutTenantInput = {
    create?: XOR<TierRuleCreateWithoutTenantInput, TierRuleUncheckedCreateWithoutTenantInput> | TierRuleCreateWithoutTenantInput[] | TierRuleUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: TierRuleCreateOrConnectWithoutTenantInput | TierRuleCreateOrConnectWithoutTenantInput[]
    createMany?: TierRuleCreateManyTenantInputEnvelope
    connect?: TierRuleWhereUniqueInput | TierRuleWhereUniqueInput[]
  }

  export type TransactionCreateNestedManyWithoutTenantInput = {
    create?: XOR<TransactionCreateWithoutTenantInput, TransactionUncheckedCreateWithoutTenantInput> | TransactionCreateWithoutTenantInput[] | TransactionUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutTenantInput | TransactionCreateOrConnectWithoutTenantInput[]
    createMany?: TransactionCreateManyTenantInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutTenantInput = {
    create?: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput> | UserCreateWithoutTenantInput[] | UserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTenantInput | UserCreateOrConnectWithoutTenantInput[]
    createMany?: UserCreateManyTenantInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type PaymentCreateNestedManyWithoutTenantInput = {
    create?: XOR<PaymentCreateWithoutTenantInput, PaymentUncheckedCreateWithoutTenantInput> | PaymentCreateWithoutTenantInput[] | PaymentUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutTenantInput | PaymentCreateOrConnectWithoutTenantInput[]
    createMany?: PaymentCreateManyTenantInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type SubscriptionEventCreateNestedManyWithoutTenantInput = {
    create?: XOR<SubscriptionEventCreateWithoutTenantInput, SubscriptionEventUncheckedCreateWithoutTenantInput> | SubscriptionEventCreateWithoutTenantInput[] | SubscriptionEventUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: SubscriptionEventCreateOrConnectWithoutTenantInput | SubscriptionEventCreateOrConnectWithoutTenantInput[]
    createMany?: SubscriptionEventCreateManyTenantInputEnvelope
    connect?: SubscriptionEventWhereUniqueInput | SubscriptionEventWhereUniqueInput[]
  }

  export type CardLimitTransactionUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<CardLimitTransactionCreateWithoutTenantInput, CardLimitTransactionUncheckedCreateWithoutTenantInput> | CardLimitTransactionCreateWithoutTenantInput[] | CardLimitTransactionUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CardLimitTransactionCreateOrConnectWithoutTenantInput | CardLimitTransactionCreateOrConnectWithoutTenantInput[]
    createMany?: CardLimitTransactionCreateManyTenantInputEnvelope
    connect?: CardLimitTransactionWhereUniqueInput | CardLimitTransactionWhereUniqueInput[]
  }

  export type CardOrderUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<CardOrderCreateWithoutTenantInput, CardOrderUncheckedCreateWithoutTenantInput> | CardOrderCreateWithoutTenantInput[] | CardOrderUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CardOrderCreateOrConnectWithoutTenantInput | CardOrderCreateOrConnectWithoutTenantInput[]
    createMany?: CardOrderCreateManyTenantInputEnvelope
    connect?: CardOrderWhereUniqueInput | CardOrderWhereUniqueInput[]
  }

  export type CardUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<CardCreateWithoutTenantInput, CardUncheckedCreateWithoutTenantInput> | CardCreateWithoutTenantInput[] | CardUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CardCreateOrConnectWithoutTenantInput | CardCreateOrConnectWithoutTenantInput[]
    createMany?: CardCreateManyTenantInputEnvelope
    connect?: CardWhereUniqueInput | CardWhereUniqueInput[]
  }

  export type CashbackRuleUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<CashbackRuleCreateWithoutTenantInput, CashbackRuleUncheckedCreateWithoutTenantInput> | CashbackRuleCreateWithoutTenantInput[] | CashbackRuleUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CashbackRuleCreateOrConnectWithoutTenantInput | CashbackRuleCreateOrConnectWithoutTenantInput[]
    createMany?: CashbackRuleCreateManyTenantInputEnvelope
    connect?: CashbackRuleWhereUniqueInput | CashbackRuleWhereUniqueInput[]
  }

  export type CustomerUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<CustomerCreateWithoutTenantInput, CustomerUncheckedCreateWithoutTenantInput> | CustomerCreateWithoutTenantInput[] | CustomerUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutTenantInput | CustomerCreateOrConnectWithoutTenantInput[]
    createMany?: CustomerCreateManyTenantInputEnvelope
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<NotificationCreateWithoutTenantInput, NotificationUncheckedCreateWithoutTenantInput> | NotificationCreateWithoutTenantInput[] | NotificationUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutTenantInput | NotificationCreateOrConnectWithoutTenantInput[]
    createMany?: NotificationCreateManyTenantInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type OfferUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<OfferCreateWithoutTenantInput, OfferUncheckedCreateWithoutTenantInput> | OfferCreateWithoutTenantInput[] | OfferUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: OfferCreateOrConnectWithoutTenantInput | OfferCreateOrConnectWithoutTenantInput[]
    createMany?: OfferCreateManyTenantInputEnvelope
    connect?: OfferWhereUniqueInput | OfferWhereUniqueInput[]
  }

  export type StoreUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<StoreCreateWithoutTenantInput, StoreUncheckedCreateWithoutTenantInput> | StoreCreateWithoutTenantInput[] | StoreUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: StoreCreateOrConnectWithoutTenantInput | StoreCreateOrConnectWithoutTenantInput[]
    createMany?: StoreCreateManyTenantInputEnvelope
    connect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
  }

  export type TierRuleUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<TierRuleCreateWithoutTenantInput, TierRuleUncheckedCreateWithoutTenantInput> | TierRuleCreateWithoutTenantInput[] | TierRuleUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: TierRuleCreateOrConnectWithoutTenantInput | TierRuleCreateOrConnectWithoutTenantInput[]
    createMany?: TierRuleCreateManyTenantInputEnvelope
    connect?: TierRuleWhereUniqueInput | TierRuleWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<TransactionCreateWithoutTenantInput, TransactionUncheckedCreateWithoutTenantInput> | TransactionCreateWithoutTenantInput[] | TransactionUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutTenantInput | TransactionCreateOrConnectWithoutTenantInput[]
    createMany?: TransactionCreateManyTenantInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput> | UserCreateWithoutTenantInput[] | UserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTenantInput | UserCreateOrConnectWithoutTenantInput[]
    createMany?: UserCreateManyTenantInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<PaymentCreateWithoutTenantInput, PaymentUncheckedCreateWithoutTenantInput> | PaymentCreateWithoutTenantInput[] | PaymentUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutTenantInput | PaymentCreateOrConnectWithoutTenantInput[]
    createMany?: PaymentCreateManyTenantInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type SubscriptionEventUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<SubscriptionEventCreateWithoutTenantInput, SubscriptionEventUncheckedCreateWithoutTenantInput> | SubscriptionEventCreateWithoutTenantInput[] | SubscriptionEventUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: SubscriptionEventCreateOrConnectWithoutTenantInput | SubscriptionEventCreateOrConnectWithoutTenantInput[]
    createMany?: SubscriptionEventCreateManyTenantInputEnvelope
    connect?: SubscriptionEventWhereUniqueInput | SubscriptionEventWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumSubscriptionStatusFieldUpdateOperationsInput = {
    set?: $Enums.SubscriptionStatus
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type CardLimitTransactionUpdateManyWithoutTenantNestedInput = {
    create?: XOR<CardLimitTransactionCreateWithoutTenantInput, CardLimitTransactionUncheckedCreateWithoutTenantInput> | CardLimitTransactionCreateWithoutTenantInput[] | CardLimitTransactionUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CardLimitTransactionCreateOrConnectWithoutTenantInput | CardLimitTransactionCreateOrConnectWithoutTenantInput[]
    upsert?: CardLimitTransactionUpsertWithWhereUniqueWithoutTenantInput | CardLimitTransactionUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: CardLimitTransactionCreateManyTenantInputEnvelope
    set?: CardLimitTransactionWhereUniqueInput | CardLimitTransactionWhereUniqueInput[]
    disconnect?: CardLimitTransactionWhereUniqueInput | CardLimitTransactionWhereUniqueInput[]
    delete?: CardLimitTransactionWhereUniqueInput | CardLimitTransactionWhereUniqueInput[]
    connect?: CardLimitTransactionWhereUniqueInput | CardLimitTransactionWhereUniqueInput[]
    update?: CardLimitTransactionUpdateWithWhereUniqueWithoutTenantInput | CardLimitTransactionUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: CardLimitTransactionUpdateManyWithWhereWithoutTenantInput | CardLimitTransactionUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: CardLimitTransactionScalarWhereInput | CardLimitTransactionScalarWhereInput[]
  }

  export type CardOrderUpdateManyWithoutTenantNestedInput = {
    create?: XOR<CardOrderCreateWithoutTenantInput, CardOrderUncheckedCreateWithoutTenantInput> | CardOrderCreateWithoutTenantInput[] | CardOrderUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CardOrderCreateOrConnectWithoutTenantInput | CardOrderCreateOrConnectWithoutTenantInput[]
    upsert?: CardOrderUpsertWithWhereUniqueWithoutTenantInput | CardOrderUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: CardOrderCreateManyTenantInputEnvelope
    set?: CardOrderWhereUniqueInput | CardOrderWhereUniqueInput[]
    disconnect?: CardOrderWhereUniqueInput | CardOrderWhereUniqueInput[]
    delete?: CardOrderWhereUniqueInput | CardOrderWhereUniqueInput[]
    connect?: CardOrderWhereUniqueInput | CardOrderWhereUniqueInput[]
    update?: CardOrderUpdateWithWhereUniqueWithoutTenantInput | CardOrderUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: CardOrderUpdateManyWithWhereWithoutTenantInput | CardOrderUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: CardOrderScalarWhereInput | CardOrderScalarWhereInput[]
  }

  export type CardUpdateManyWithoutTenantNestedInput = {
    create?: XOR<CardCreateWithoutTenantInput, CardUncheckedCreateWithoutTenantInput> | CardCreateWithoutTenantInput[] | CardUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CardCreateOrConnectWithoutTenantInput | CardCreateOrConnectWithoutTenantInput[]
    upsert?: CardUpsertWithWhereUniqueWithoutTenantInput | CardUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: CardCreateManyTenantInputEnvelope
    set?: CardWhereUniqueInput | CardWhereUniqueInput[]
    disconnect?: CardWhereUniqueInput | CardWhereUniqueInput[]
    delete?: CardWhereUniqueInput | CardWhereUniqueInput[]
    connect?: CardWhereUniqueInput | CardWhereUniqueInput[]
    update?: CardUpdateWithWhereUniqueWithoutTenantInput | CardUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: CardUpdateManyWithWhereWithoutTenantInput | CardUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: CardScalarWhereInput | CardScalarWhereInput[]
  }

  export type CashbackRuleUpdateManyWithoutTenantNestedInput = {
    create?: XOR<CashbackRuleCreateWithoutTenantInput, CashbackRuleUncheckedCreateWithoutTenantInput> | CashbackRuleCreateWithoutTenantInput[] | CashbackRuleUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CashbackRuleCreateOrConnectWithoutTenantInput | CashbackRuleCreateOrConnectWithoutTenantInput[]
    upsert?: CashbackRuleUpsertWithWhereUniqueWithoutTenantInput | CashbackRuleUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: CashbackRuleCreateManyTenantInputEnvelope
    set?: CashbackRuleWhereUniqueInput | CashbackRuleWhereUniqueInput[]
    disconnect?: CashbackRuleWhereUniqueInput | CashbackRuleWhereUniqueInput[]
    delete?: CashbackRuleWhereUniqueInput | CashbackRuleWhereUniqueInput[]
    connect?: CashbackRuleWhereUniqueInput | CashbackRuleWhereUniqueInput[]
    update?: CashbackRuleUpdateWithWhereUniqueWithoutTenantInput | CashbackRuleUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: CashbackRuleUpdateManyWithWhereWithoutTenantInput | CashbackRuleUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: CashbackRuleScalarWhereInput | CashbackRuleScalarWhereInput[]
  }

  export type CustomerUpdateManyWithoutTenantNestedInput = {
    create?: XOR<CustomerCreateWithoutTenantInput, CustomerUncheckedCreateWithoutTenantInput> | CustomerCreateWithoutTenantInput[] | CustomerUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutTenantInput | CustomerCreateOrConnectWithoutTenantInput[]
    upsert?: CustomerUpsertWithWhereUniqueWithoutTenantInput | CustomerUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: CustomerCreateManyTenantInputEnvelope
    set?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    disconnect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    delete?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    update?: CustomerUpdateWithWhereUniqueWithoutTenantInput | CustomerUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: CustomerUpdateManyWithWhereWithoutTenantInput | CustomerUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutTenantNestedInput = {
    create?: XOR<NotificationCreateWithoutTenantInput, NotificationUncheckedCreateWithoutTenantInput> | NotificationCreateWithoutTenantInput[] | NotificationUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutTenantInput | NotificationCreateOrConnectWithoutTenantInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutTenantInput | NotificationUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: NotificationCreateManyTenantInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutTenantInput | NotificationUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutTenantInput | NotificationUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type OfferUpdateManyWithoutTenantNestedInput = {
    create?: XOR<OfferCreateWithoutTenantInput, OfferUncheckedCreateWithoutTenantInput> | OfferCreateWithoutTenantInput[] | OfferUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: OfferCreateOrConnectWithoutTenantInput | OfferCreateOrConnectWithoutTenantInput[]
    upsert?: OfferUpsertWithWhereUniqueWithoutTenantInput | OfferUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: OfferCreateManyTenantInputEnvelope
    set?: OfferWhereUniqueInput | OfferWhereUniqueInput[]
    disconnect?: OfferWhereUniqueInput | OfferWhereUniqueInput[]
    delete?: OfferWhereUniqueInput | OfferWhereUniqueInput[]
    connect?: OfferWhereUniqueInput | OfferWhereUniqueInput[]
    update?: OfferUpdateWithWhereUniqueWithoutTenantInput | OfferUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: OfferUpdateManyWithWhereWithoutTenantInput | OfferUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: OfferScalarWhereInput | OfferScalarWhereInput[]
  }

  export type StoreUpdateManyWithoutTenantNestedInput = {
    create?: XOR<StoreCreateWithoutTenantInput, StoreUncheckedCreateWithoutTenantInput> | StoreCreateWithoutTenantInput[] | StoreUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: StoreCreateOrConnectWithoutTenantInput | StoreCreateOrConnectWithoutTenantInput[]
    upsert?: StoreUpsertWithWhereUniqueWithoutTenantInput | StoreUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: StoreCreateManyTenantInputEnvelope
    set?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    disconnect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    delete?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    connect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    update?: StoreUpdateWithWhereUniqueWithoutTenantInput | StoreUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: StoreUpdateManyWithWhereWithoutTenantInput | StoreUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: StoreScalarWhereInput | StoreScalarWhereInput[]
  }

  export type PlanUpdateOneWithoutTenantsNestedInput = {
    create?: XOR<PlanCreateWithoutTenantsInput, PlanUncheckedCreateWithoutTenantsInput>
    connectOrCreate?: PlanCreateOrConnectWithoutTenantsInput
    upsert?: PlanUpsertWithoutTenantsInput
    disconnect?: PlanWhereInput | boolean
    delete?: PlanWhereInput | boolean
    connect?: PlanWhereUniqueInput
    update?: XOR<XOR<PlanUpdateToOneWithWhereWithoutTenantsInput, PlanUpdateWithoutTenantsInput>, PlanUncheckedUpdateWithoutTenantsInput>
  }

  export type TierRuleUpdateManyWithoutTenantNestedInput = {
    create?: XOR<TierRuleCreateWithoutTenantInput, TierRuleUncheckedCreateWithoutTenantInput> | TierRuleCreateWithoutTenantInput[] | TierRuleUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: TierRuleCreateOrConnectWithoutTenantInput | TierRuleCreateOrConnectWithoutTenantInput[]
    upsert?: TierRuleUpsertWithWhereUniqueWithoutTenantInput | TierRuleUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: TierRuleCreateManyTenantInputEnvelope
    set?: TierRuleWhereUniqueInput | TierRuleWhereUniqueInput[]
    disconnect?: TierRuleWhereUniqueInput | TierRuleWhereUniqueInput[]
    delete?: TierRuleWhereUniqueInput | TierRuleWhereUniqueInput[]
    connect?: TierRuleWhereUniqueInput | TierRuleWhereUniqueInput[]
    update?: TierRuleUpdateWithWhereUniqueWithoutTenantInput | TierRuleUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: TierRuleUpdateManyWithWhereWithoutTenantInput | TierRuleUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: TierRuleScalarWhereInput | TierRuleScalarWhereInput[]
  }

  export type TransactionUpdateManyWithoutTenantNestedInput = {
    create?: XOR<TransactionCreateWithoutTenantInput, TransactionUncheckedCreateWithoutTenantInput> | TransactionCreateWithoutTenantInput[] | TransactionUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutTenantInput | TransactionCreateOrConnectWithoutTenantInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutTenantInput | TransactionUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: TransactionCreateManyTenantInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutTenantInput | TransactionUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutTenantInput | TransactionUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type UserUpdateManyWithoutTenantNestedInput = {
    create?: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput> | UserCreateWithoutTenantInput[] | UserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTenantInput | UserCreateOrConnectWithoutTenantInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTenantInput | UserUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: UserCreateManyTenantInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTenantInput | UserUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTenantInput | UserUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type PaymentUpdateManyWithoutTenantNestedInput = {
    create?: XOR<PaymentCreateWithoutTenantInput, PaymentUncheckedCreateWithoutTenantInput> | PaymentCreateWithoutTenantInput[] | PaymentUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutTenantInput | PaymentCreateOrConnectWithoutTenantInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutTenantInput | PaymentUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: PaymentCreateManyTenantInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutTenantInput | PaymentUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutTenantInput | PaymentUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type SubscriptionEventUpdateManyWithoutTenantNestedInput = {
    create?: XOR<SubscriptionEventCreateWithoutTenantInput, SubscriptionEventUncheckedCreateWithoutTenantInput> | SubscriptionEventCreateWithoutTenantInput[] | SubscriptionEventUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: SubscriptionEventCreateOrConnectWithoutTenantInput | SubscriptionEventCreateOrConnectWithoutTenantInput[]
    upsert?: SubscriptionEventUpsertWithWhereUniqueWithoutTenantInput | SubscriptionEventUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: SubscriptionEventCreateManyTenantInputEnvelope
    set?: SubscriptionEventWhereUniqueInput | SubscriptionEventWhereUniqueInput[]
    disconnect?: SubscriptionEventWhereUniqueInput | SubscriptionEventWhereUniqueInput[]
    delete?: SubscriptionEventWhereUniqueInput | SubscriptionEventWhereUniqueInput[]
    connect?: SubscriptionEventWhereUniqueInput | SubscriptionEventWhereUniqueInput[]
    update?: SubscriptionEventUpdateWithWhereUniqueWithoutTenantInput | SubscriptionEventUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: SubscriptionEventUpdateManyWithWhereWithoutTenantInput | SubscriptionEventUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: SubscriptionEventScalarWhereInput | SubscriptionEventScalarWhereInput[]
  }

  export type CardLimitTransactionUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<CardLimitTransactionCreateWithoutTenantInput, CardLimitTransactionUncheckedCreateWithoutTenantInput> | CardLimitTransactionCreateWithoutTenantInput[] | CardLimitTransactionUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CardLimitTransactionCreateOrConnectWithoutTenantInput | CardLimitTransactionCreateOrConnectWithoutTenantInput[]
    upsert?: CardLimitTransactionUpsertWithWhereUniqueWithoutTenantInput | CardLimitTransactionUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: CardLimitTransactionCreateManyTenantInputEnvelope
    set?: CardLimitTransactionWhereUniqueInput | CardLimitTransactionWhereUniqueInput[]
    disconnect?: CardLimitTransactionWhereUniqueInput | CardLimitTransactionWhereUniqueInput[]
    delete?: CardLimitTransactionWhereUniqueInput | CardLimitTransactionWhereUniqueInput[]
    connect?: CardLimitTransactionWhereUniqueInput | CardLimitTransactionWhereUniqueInput[]
    update?: CardLimitTransactionUpdateWithWhereUniqueWithoutTenantInput | CardLimitTransactionUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: CardLimitTransactionUpdateManyWithWhereWithoutTenantInput | CardLimitTransactionUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: CardLimitTransactionScalarWhereInput | CardLimitTransactionScalarWhereInput[]
  }

  export type CardOrderUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<CardOrderCreateWithoutTenantInput, CardOrderUncheckedCreateWithoutTenantInput> | CardOrderCreateWithoutTenantInput[] | CardOrderUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CardOrderCreateOrConnectWithoutTenantInput | CardOrderCreateOrConnectWithoutTenantInput[]
    upsert?: CardOrderUpsertWithWhereUniqueWithoutTenantInput | CardOrderUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: CardOrderCreateManyTenantInputEnvelope
    set?: CardOrderWhereUniqueInput | CardOrderWhereUniqueInput[]
    disconnect?: CardOrderWhereUniqueInput | CardOrderWhereUniqueInput[]
    delete?: CardOrderWhereUniqueInput | CardOrderWhereUniqueInput[]
    connect?: CardOrderWhereUniqueInput | CardOrderWhereUniqueInput[]
    update?: CardOrderUpdateWithWhereUniqueWithoutTenantInput | CardOrderUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: CardOrderUpdateManyWithWhereWithoutTenantInput | CardOrderUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: CardOrderScalarWhereInput | CardOrderScalarWhereInput[]
  }

  export type CardUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<CardCreateWithoutTenantInput, CardUncheckedCreateWithoutTenantInput> | CardCreateWithoutTenantInput[] | CardUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CardCreateOrConnectWithoutTenantInput | CardCreateOrConnectWithoutTenantInput[]
    upsert?: CardUpsertWithWhereUniqueWithoutTenantInput | CardUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: CardCreateManyTenantInputEnvelope
    set?: CardWhereUniqueInput | CardWhereUniqueInput[]
    disconnect?: CardWhereUniqueInput | CardWhereUniqueInput[]
    delete?: CardWhereUniqueInput | CardWhereUniqueInput[]
    connect?: CardWhereUniqueInput | CardWhereUniqueInput[]
    update?: CardUpdateWithWhereUniqueWithoutTenantInput | CardUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: CardUpdateManyWithWhereWithoutTenantInput | CardUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: CardScalarWhereInput | CardScalarWhereInput[]
  }

  export type CashbackRuleUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<CashbackRuleCreateWithoutTenantInput, CashbackRuleUncheckedCreateWithoutTenantInput> | CashbackRuleCreateWithoutTenantInput[] | CashbackRuleUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CashbackRuleCreateOrConnectWithoutTenantInput | CashbackRuleCreateOrConnectWithoutTenantInput[]
    upsert?: CashbackRuleUpsertWithWhereUniqueWithoutTenantInput | CashbackRuleUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: CashbackRuleCreateManyTenantInputEnvelope
    set?: CashbackRuleWhereUniqueInput | CashbackRuleWhereUniqueInput[]
    disconnect?: CashbackRuleWhereUniqueInput | CashbackRuleWhereUniqueInput[]
    delete?: CashbackRuleWhereUniqueInput | CashbackRuleWhereUniqueInput[]
    connect?: CashbackRuleWhereUniqueInput | CashbackRuleWhereUniqueInput[]
    update?: CashbackRuleUpdateWithWhereUniqueWithoutTenantInput | CashbackRuleUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: CashbackRuleUpdateManyWithWhereWithoutTenantInput | CashbackRuleUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: CashbackRuleScalarWhereInput | CashbackRuleScalarWhereInput[]
  }

  export type CustomerUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<CustomerCreateWithoutTenantInput, CustomerUncheckedCreateWithoutTenantInput> | CustomerCreateWithoutTenantInput[] | CustomerUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutTenantInput | CustomerCreateOrConnectWithoutTenantInput[]
    upsert?: CustomerUpsertWithWhereUniqueWithoutTenantInput | CustomerUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: CustomerCreateManyTenantInputEnvelope
    set?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    disconnect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    delete?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    update?: CustomerUpdateWithWhereUniqueWithoutTenantInput | CustomerUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: CustomerUpdateManyWithWhereWithoutTenantInput | CustomerUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<NotificationCreateWithoutTenantInput, NotificationUncheckedCreateWithoutTenantInput> | NotificationCreateWithoutTenantInput[] | NotificationUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutTenantInput | NotificationCreateOrConnectWithoutTenantInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutTenantInput | NotificationUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: NotificationCreateManyTenantInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutTenantInput | NotificationUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutTenantInput | NotificationUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type OfferUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<OfferCreateWithoutTenantInput, OfferUncheckedCreateWithoutTenantInput> | OfferCreateWithoutTenantInput[] | OfferUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: OfferCreateOrConnectWithoutTenantInput | OfferCreateOrConnectWithoutTenantInput[]
    upsert?: OfferUpsertWithWhereUniqueWithoutTenantInput | OfferUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: OfferCreateManyTenantInputEnvelope
    set?: OfferWhereUniqueInput | OfferWhereUniqueInput[]
    disconnect?: OfferWhereUniqueInput | OfferWhereUniqueInput[]
    delete?: OfferWhereUniqueInput | OfferWhereUniqueInput[]
    connect?: OfferWhereUniqueInput | OfferWhereUniqueInput[]
    update?: OfferUpdateWithWhereUniqueWithoutTenantInput | OfferUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: OfferUpdateManyWithWhereWithoutTenantInput | OfferUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: OfferScalarWhereInput | OfferScalarWhereInput[]
  }

  export type StoreUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<StoreCreateWithoutTenantInput, StoreUncheckedCreateWithoutTenantInput> | StoreCreateWithoutTenantInput[] | StoreUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: StoreCreateOrConnectWithoutTenantInput | StoreCreateOrConnectWithoutTenantInput[]
    upsert?: StoreUpsertWithWhereUniqueWithoutTenantInput | StoreUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: StoreCreateManyTenantInputEnvelope
    set?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    disconnect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    delete?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    connect?: StoreWhereUniqueInput | StoreWhereUniqueInput[]
    update?: StoreUpdateWithWhereUniqueWithoutTenantInput | StoreUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: StoreUpdateManyWithWhereWithoutTenantInput | StoreUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: StoreScalarWhereInput | StoreScalarWhereInput[]
  }

  export type TierRuleUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<TierRuleCreateWithoutTenantInput, TierRuleUncheckedCreateWithoutTenantInput> | TierRuleCreateWithoutTenantInput[] | TierRuleUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: TierRuleCreateOrConnectWithoutTenantInput | TierRuleCreateOrConnectWithoutTenantInput[]
    upsert?: TierRuleUpsertWithWhereUniqueWithoutTenantInput | TierRuleUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: TierRuleCreateManyTenantInputEnvelope
    set?: TierRuleWhereUniqueInput | TierRuleWhereUniqueInput[]
    disconnect?: TierRuleWhereUniqueInput | TierRuleWhereUniqueInput[]
    delete?: TierRuleWhereUniqueInput | TierRuleWhereUniqueInput[]
    connect?: TierRuleWhereUniqueInput | TierRuleWhereUniqueInput[]
    update?: TierRuleUpdateWithWhereUniqueWithoutTenantInput | TierRuleUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: TierRuleUpdateManyWithWhereWithoutTenantInput | TierRuleUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: TierRuleScalarWhereInput | TierRuleScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<TransactionCreateWithoutTenantInput, TransactionUncheckedCreateWithoutTenantInput> | TransactionCreateWithoutTenantInput[] | TransactionUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutTenantInput | TransactionCreateOrConnectWithoutTenantInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutTenantInput | TransactionUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: TransactionCreateManyTenantInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutTenantInput | TransactionUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutTenantInput | TransactionUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput> | UserCreateWithoutTenantInput[] | UserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTenantInput | UserCreateOrConnectWithoutTenantInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTenantInput | UserUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: UserCreateManyTenantInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTenantInput | UserUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTenantInput | UserUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<PaymentCreateWithoutTenantInput, PaymentUncheckedCreateWithoutTenantInput> | PaymentCreateWithoutTenantInput[] | PaymentUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutTenantInput | PaymentCreateOrConnectWithoutTenantInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutTenantInput | PaymentUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: PaymentCreateManyTenantInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutTenantInput | PaymentUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutTenantInput | PaymentUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type SubscriptionEventUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<SubscriptionEventCreateWithoutTenantInput, SubscriptionEventUncheckedCreateWithoutTenantInput> | SubscriptionEventCreateWithoutTenantInput[] | SubscriptionEventUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: SubscriptionEventCreateOrConnectWithoutTenantInput | SubscriptionEventCreateOrConnectWithoutTenantInput[]
    upsert?: SubscriptionEventUpsertWithWhereUniqueWithoutTenantInput | SubscriptionEventUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: SubscriptionEventCreateManyTenantInputEnvelope
    set?: SubscriptionEventWhereUniqueInput | SubscriptionEventWhereUniqueInput[]
    disconnect?: SubscriptionEventWhereUniqueInput | SubscriptionEventWhereUniqueInput[]
    delete?: SubscriptionEventWhereUniqueInput | SubscriptionEventWhereUniqueInput[]
    connect?: SubscriptionEventWhereUniqueInput | SubscriptionEventWhereUniqueInput[]
    update?: SubscriptionEventUpdateWithWhereUniqueWithoutTenantInput | SubscriptionEventUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: SubscriptionEventUpdateManyWithWhereWithoutTenantInput | SubscriptionEventUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: SubscriptionEventScalarWhereInput | SubscriptionEventScalarWhereInput[]
  }

  export type CardCreateNestedManyWithoutStoreInput = {
    create?: XOR<CardCreateWithoutStoreInput, CardUncheckedCreateWithoutStoreInput> | CardCreateWithoutStoreInput[] | CardUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: CardCreateOrConnectWithoutStoreInput | CardCreateOrConnectWithoutStoreInput[]
    createMany?: CardCreateManyStoreInputEnvelope
    connect?: CardWhereUniqueInput | CardWhereUniqueInput[]
  }

  export type TenantCreateNestedOneWithoutStoresInput = {
    create?: XOR<TenantCreateWithoutStoresInput, TenantUncheckedCreateWithoutStoresInput>
    connectOrCreate?: TenantCreateOrConnectWithoutStoresInput
    connect?: TenantWhereUniqueInput
  }

  export type TransactionCreateNestedManyWithoutStoreInput = {
    create?: XOR<TransactionCreateWithoutStoreInput, TransactionUncheckedCreateWithoutStoreInput> | TransactionCreateWithoutStoreInput[] | TransactionUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutStoreInput | TransactionCreateOrConnectWithoutStoreInput[]
    createMany?: TransactionCreateManyStoreInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutStoreInput = {
    create?: XOR<UserCreateWithoutStoreInput, UserUncheckedCreateWithoutStoreInput> | UserCreateWithoutStoreInput[] | UserUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStoreInput | UserCreateOrConnectWithoutStoreInput[]
    createMany?: UserCreateManyStoreInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CardUncheckedCreateNestedManyWithoutStoreInput = {
    create?: XOR<CardCreateWithoutStoreInput, CardUncheckedCreateWithoutStoreInput> | CardCreateWithoutStoreInput[] | CardUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: CardCreateOrConnectWithoutStoreInput | CardCreateOrConnectWithoutStoreInput[]
    createMany?: CardCreateManyStoreInputEnvelope
    connect?: CardWhereUniqueInput | CardWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutStoreInput = {
    create?: XOR<TransactionCreateWithoutStoreInput, TransactionUncheckedCreateWithoutStoreInput> | TransactionCreateWithoutStoreInput[] | TransactionUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutStoreInput | TransactionCreateOrConnectWithoutStoreInput[]
    createMany?: TransactionCreateManyStoreInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutStoreInput = {
    create?: XOR<UserCreateWithoutStoreInput, UserUncheckedCreateWithoutStoreInput> | UserCreateWithoutStoreInput[] | UserUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStoreInput | UserCreateOrConnectWithoutStoreInput[]
    createMany?: UserCreateManyStoreInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CardUpdateManyWithoutStoreNestedInput = {
    create?: XOR<CardCreateWithoutStoreInput, CardUncheckedCreateWithoutStoreInput> | CardCreateWithoutStoreInput[] | CardUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: CardCreateOrConnectWithoutStoreInput | CardCreateOrConnectWithoutStoreInput[]
    upsert?: CardUpsertWithWhereUniqueWithoutStoreInput | CardUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: CardCreateManyStoreInputEnvelope
    set?: CardWhereUniqueInput | CardWhereUniqueInput[]
    disconnect?: CardWhereUniqueInput | CardWhereUniqueInput[]
    delete?: CardWhereUniqueInput | CardWhereUniqueInput[]
    connect?: CardWhereUniqueInput | CardWhereUniqueInput[]
    update?: CardUpdateWithWhereUniqueWithoutStoreInput | CardUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: CardUpdateManyWithWhereWithoutStoreInput | CardUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: CardScalarWhereInput | CardScalarWhereInput[]
  }

  export type TenantUpdateOneRequiredWithoutStoresNestedInput = {
    create?: XOR<TenantCreateWithoutStoresInput, TenantUncheckedCreateWithoutStoresInput>
    connectOrCreate?: TenantCreateOrConnectWithoutStoresInput
    upsert?: TenantUpsertWithoutStoresInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutStoresInput, TenantUpdateWithoutStoresInput>, TenantUncheckedUpdateWithoutStoresInput>
  }

  export type TransactionUpdateManyWithoutStoreNestedInput = {
    create?: XOR<TransactionCreateWithoutStoreInput, TransactionUncheckedCreateWithoutStoreInput> | TransactionCreateWithoutStoreInput[] | TransactionUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutStoreInput | TransactionCreateOrConnectWithoutStoreInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutStoreInput | TransactionUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: TransactionCreateManyStoreInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutStoreInput | TransactionUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutStoreInput | TransactionUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type UserUpdateManyWithoutStoreNestedInput = {
    create?: XOR<UserCreateWithoutStoreInput, UserUncheckedCreateWithoutStoreInput> | UserCreateWithoutStoreInput[] | UserUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStoreInput | UserCreateOrConnectWithoutStoreInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutStoreInput | UserUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: UserCreateManyStoreInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutStoreInput | UserUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: UserUpdateManyWithWhereWithoutStoreInput | UserUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CardUncheckedUpdateManyWithoutStoreNestedInput = {
    create?: XOR<CardCreateWithoutStoreInput, CardUncheckedCreateWithoutStoreInput> | CardCreateWithoutStoreInput[] | CardUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: CardCreateOrConnectWithoutStoreInput | CardCreateOrConnectWithoutStoreInput[]
    upsert?: CardUpsertWithWhereUniqueWithoutStoreInput | CardUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: CardCreateManyStoreInputEnvelope
    set?: CardWhereUniqueInput | CardWhereUniqueInput[]
    disconnect?: CardWhereUniqueInput | CardWhereUniqueInput[]
    delete?: CardWhereUniqueInput | CardWhereUniqueInput[]
    connect?: CardWhereUniqueInput | CardWhereUniqueInput[]
    update?: CardUpdateWithWhereUniqueWithoutStoreInput | CardUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: CardUpdateManyWithWhereWithoutStoreInput | CardUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: CardScalarWhereInput | CardScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutStoreNestedInput = {
    create?: XOR<TransactionCreateWithoutStoreInput, TransactionUncheckedCreateWithoutStoreInput> | TransactionCreateWithoutStoreInput[] | TransactionUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutStoreInput | TransactionCreateOrConnectWithoutStoreInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutStoreInput | TransactionUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: TransactionCreateManyStoreInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutStoreInput | TransactionUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutStoreInput | TransactionUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutStoreNestedInput = {
    create?: XOR<UserCreateWithoutStoreInput, UserUncheckedCreateWithoutStoreInput> | UserCreateWithoutStoreInput[] | UserUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStoreInput | UserCreateOrConnectWithoutStoreInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutStoreInput | UserUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: UserCreateManyStoreInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutStoreInput | UserUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: UserUpdateManyWithWhereWithoutStoreInput | UserUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type TransactionCreateNestedManyWithoutCashierInput = {
    create?: XOR<TransactionCreateWithoutCashierInput, TransactionUncheckedCreateWithoutCashierInput> | TransactionCreateWithoutCashierInput[] | TransactionUncheckedCreateWithoutCashierInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCashierInput | TransactionCreateOrConnectWithoutCashierInput[]
    createMany?: TransactionCreateManyCashierInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type StoreCreateNestedOneWithoutUsersInput = {
    create?: XOR<StoreCreateWithoutUsersInput, StoreUncheckedCreateWithoutUsersInput>
    connectOrCreate?: StoreCreateOrConnectWithoutUsersInput
    connect?: StoreWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutUsersInput = {
    create?: XOR<TenantCreateWithoutUsersInput, TenantUncheckedCreateWithoutUsersInput>
    connectOrCreate?: TenantCreateOrConnectWithoutUsersInput
    connect?: TenantWhereUniqueInput
  }

  export type TransactionUncheckedCreateNestedManyWithoutCashierInput = {
    create?: XOR<TransactionCreateWithoutCashierInput, TransactionUncheckedCreateWithoutCashierInput> | TransactionCreateWithoutCashierInput[] | TransactionUncheckedCreateWithoutCashierInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCashierInput | TransactionCreateOrConnectWithoutCashierInput[]
    createMany?: TransactionCreateManyCashierInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type TransactionUpdateManyWithoutCashierNestedInput = {
    create?: XOR<TransactionCreateWithoutCashierInput, TransactionUncheckedCreateWithoutCashierInput> | TransactionCreateWithoutCashierInput[] | TransactionUncheckedCreateWithoutCashierInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCashierInput | TransactionCreateOrConnectWithoutCashierInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutCashierInput | TransactionUpsertWithWhereUniqueWithoutCashierInput[]
    createMany?: TransactionCreateManyCashierInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutCashierInput | TransactionUpdateWithWhereUniqueWithoutCashierInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutCashierInput | TransactionUpdateManyWithWhereWithoutCashierInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type StoreUpdateOneWithoutUsersNestedInput = {
    create?: XOR<StoreCreateWithoutUsersInput, StoreUncheckedCreateWithoutUsersInput>
    connectOrCreate?: StoreCreateOrConnectWithoutUsersInput
    upsert?: StoreUpsertWithoutUsersInput
    disconnect?: StoreWhereInput | boolean
    delete?: StoreWhereInput | boolean
    connect?: StoreWhereUniqueInput
    update?: XOR<XOR<StoreUpdateToOneWithWhereWithoutUsersInput, StoreUpdateWithoutUsersInput>, StoreUncheckedUpdateWithoutUsersInput>
  }

  export type TenantUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<TenantCreateWithoutUsersInput, TenantUncheckedCreateWithoutUsersInput>
    connectOrCreate?: TenantCreateOrConnectWithoutUsersInput
    upsert?: TenantUpsertWithoutUsersInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutUsersInput, TenantUpdateWithoutUsersInput>, TenantUncheckedUpdateWithoutUsersInput>
  }

  export type TransactionUncheckedUpdateManyWithoutCashierNestedInput = {
    create?: XOR<TransactionCreateWithoutCashierInput, TransactionUncheckedCreateWithoutCashierInput> | TransactionCreateWithoutCashierInput[] | TransactionUncheckedCreateWithoutCashierInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCashierInput | TransactionCreateOrConnectWithoutCashierInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutCashierInput | TransactionUpsertWithWhereUniqueWithoutCashierInput[]
    createMany?: TransactionCreateManyCashierInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutCashierInput | TransactionUpdateWithWhereUniqueWithoutCashierInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutCashierInput | TransactionUpdateManyWithWhereWithoutCashierInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type CardCreateNestedManyWithoutCustomerInput = {
    create?: XOR<CardCreateWithoutCustomerInput, CardUncheckedCreateWithoutCustomerInput> | CardCreateWithoutCustomerInput[] | CardUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CardCreateOrConnectWithoutCustomerInput | CardCreateOrConnectWithoutCustomerInput[]
    createMany?: CardCreateManyCustomerInputEnvelope
    connect?: CardWhereUniqueInput | CardWhereUniqueInput[]
  }

  export type TenantCreateNestedOneWithoutCustomersInput = {
    create?: XOR<TenantCreateWithoutCustomersInput, TenantUncheckedCreateWithoutCustomersInput>
    connectOrCreate?: TenantCreateOrConnectWithoutCustomersInput
    connect?: TenantWhereUniqueInput
  }

  export type NotificationCreateNestedManyWithoutCustomerInput = {
    create?: XOR<NotificationCreateWithoutCustomerInput, NotificationUncheckedCreateWithoutCustomerInput> | NotificationCreateWithoutCustomerInput[] | NotificationUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutCustomerInput | NotificationCreateOrConnectWithoutCustomerInput[]
    createMany?: NotificationCreateManyCustomerInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type TransactionCreateNestedManyWithoutCustomerInput = {
    create?: XOR<TransactionCreateWithoutCustomerInput, TransactionUncheckedCreateWithoutCustomerInput> | TransactionCreateWithoutCustomerInput[] | TransactionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCustomerInput | TransactionCreateOrConnectWithoutCustomerInput[]
    createMany?: TransactionCreateManyCustomerInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type CardUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<CardCreateWithoutCustomerInput, CardUncheckedCreateWithoutCustomerInput> | CardCreateWithoutCustomerInput[] | CardUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CardCreateOrConnectWithoutCustomerInput | CardCreateOrConnectWithoutCustomerInput[]
    createMany?: CardCreateManyCustomerInputEnvelope
    connect?: CardWhereUniqueInput | CardWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<NotificationCreateWithoutCustomerInput, NotificationUncheckedCreateWithoutCustomerInput> | NotificationCreateWithoutCustomerInput[] | NotificationUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutCustomerInput | NotificationCreateOrConnectWithoutCustomerInput[]
    createMany?: NotificationCreateManyCustomerInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<TransactionCreateWithoutCustomerInput, TransactionUncheckedCreateWithoutCustomerInput> | TransactionCreateWithoutCustomerInput[] | TransactionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCustomerInput | TransactionCreateOrConnectWithoutCustomerInput[]
    createMany?: TransactionCreateManyCustomerInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type EnumTierFieldUpdateOperationsInput = {
    set?: $Enums.Tier
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type CardUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<CardCreateWithoutCustomerInput, CardUncheckedCreateWithoutCustomerInput> | CardCreateWithoutCustomerInput[] | CardUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CardCreateOrConnectWithoutCustomerInput | CardCreateOrConnectWithoutCustomerInput[]
    upsert?: CardUpsertWithWhereUniqueWithoutCustomerInput | CardUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: CardCreateManyCustomerInputEnvelope
    set?: CardWhereUniqueInput | CardWhereUniqueInput[]
    disconnect?: CardWhereUniqueInput | CardWhereUniqueInput[]
    delete?: CardWhereUniqueInput | CardWhereUniqueInput[]
    connect?: CardWhereUniqueInput | CardWhereUniqueInput[]
    update?: CardUpdateWithWhereUniqueWithoutCustomerInput | CardUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: CardUpdateManyWithWhereWithoutCustomerInput | CardUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: CardScalarWhereInput | CardScalarWhereInput[]
  }

  export type TenantUpdateOneRequiredWithoutCustomersNestedInput = {
    create?: XOR<TenantCreateWithoutCustomersInput, TenantUncheckedCreateWithoutCustomersInput>
    connectOrCreate?: TenantCreateOrConnectWithoutCustomersInput
    upsert?: TenantUpsertWithoutCustomersInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutCustomersInput, TenantUpdateWithoutCustomersInput>, TenantUncheckedUpdateWithoutCustomersInput>
  }

  export type NotificationUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<NotificationCreateWithoutCustomerInput, NotificationUncheckedCreateWithoutCustomerInput> | NotificationCreateWithoutCustomerInput[] | NotificationUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutCustomerInput | NotificationCreateOrConnectWithoutCustomerInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutCustomerInput | NotificationUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: NotificationCreateManyCustomerInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutCustomerInput | NotificationUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutCustomerInput | NotificationUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type TransactionUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<TransactionCreateWithoutCustomerInput, TransactionUncheckedCreateWithoutCustomerInput> | TransactionCreateWithoutCustomerInput[] | TransactionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCustomerInput | TransactionCreateOrConnectWithoutCustomerInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutCustomerInput | TransactionUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: TransactionCreateManyCustomerInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutCustomerInput | TransactionUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutCustomerInput | TransactionUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type CardUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<CardCreateWithoutCustomerInput, CardUncheckedCreateWithoutCustomerInput> | CardCreateWithoutCustomerInput[] | CardUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CardCreateOrConnectWithoutCustomerInput | CardCreateOrConnectWithoutCustomerInput[]
    upsert?: CardUpsertWithWhereUniqueWithoutCustomerInput | CardUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: CardCreateManyCustomerInputEnvelope
    set?: CardWhereUniqueInput | CardWhereUniqueInput[]
    disconnect?: CardWhereUniqueInput | CardWhereUniqueInput[]
    delete?: CardWhereUniqueInput | CardWhereUniqueInput[]
    connect?: CardWhereUniqueInput | CardWhereUniqueInput[]
    update?: CardUpdateWithWhereUniqueWithoutCustomerInput | CardUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: CardUpdateManyWithWhereWithoutCustomerInput | CardUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: CardScalarWhereInput | CardScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<NotificationCreateWithoutCustomerInput, NotificationUncheckedCreateWithoutCustomerInput> | NotificationCreateWithoutCustomerInput[] | NotificationUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutCustomerInput | NotificationCreateOrConnectWithoutCustomerInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutCustomerInput | NotificationUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: NotificationCreateManyCustomerInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutCustomerInput | NotificationUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutCustomerInput | NotificationUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<TransactionCreateWithoutCustomerInput, TransactionUncheckedCreateWithoutCustomerInput> | TransactionCreateWithoutCustomerInput[] | TransactionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCustomerInput | TransactionCreateOrConnectWithoutCustomerInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutCustomerInput | TransactionUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: TransactionCreateManyCustomerInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutCustomerInput | TransactionUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutCustomerInput | TransactionUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type CustomerCreateNestedOneWithoutCardsInput = {
    create?: XOR<CustomerCreateWithoutCardsInput, CustomerUncheckedCreateWithoutCardsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutCardsInput
    connect?: CustomerWhereUniqueInput
  }

  export type StoreCreateNestedOneWithoutCardsInput = {
    create?: XOR<StoreCreateWithoutCardsInput, StoreUncheckedCreateWithoutCardsInput>
    connectOrCreate?: StoreCreateOrConnectWithoutCardsInput
    connect?: StoreWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutCardsInput = {
    create?: XOR<TenantCreateWithoutCardsInput, TenantUncheckedCreateWithoutCardsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutCardsInput
    connect?: TenantWhereUniqueInput
  }

  export type TransactionCreateNestedManyWithoutCardInput = {
    create?: XOR<TransactionCreateWithoutCardInput, TransactionUncheckedCreateWithoutCardInput> | TransactionCreateWithoutCardInput[] | TransactionUncheckedCreateWithoutCardInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCardInput | TransactionCreateOrConnectWithoutCardInput[]
    createMany?: TransactionCreateManyCardInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutCardInput = {
    create?: XOR<TransactionCreateWithoutCardInput, TransactionUncheckedCreateWithoutCardInput> | TransactionCreateWithoutCardInput[] | TransactionUncheckedCreateWithoutCardInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCardInput | TransactionCreateOrConnectWithoutCardInput[]
    createMany?: TransactionCreateManyCardInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type EnumCardStatusFieldUpdateOperationsInput = {
    set?: $Enums.CardStatus
  }

  export type CustomerUpdateOneWithoutCardsNestedInput = {
    create?: XOR<CustomerCreateWithoutCardsInput, CustomerUncheckedCreateWithoutCardsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutCardsInput
    upsert?: CustomerUpsertWithoutCardsInput
    disconnect?: CustomerWhereInput | boolean
    delete?: CustomerWhereInput | boolean
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutCardsInput, CustomerUpdateWithoutCardsInput>, CustomerUncheckedUpdateWithoutCardsInput>
  }

  export type StoreUpdateOneWithoutCardsNestedInput = {
    create?: XOR<StoreCreateWithoutCardsInput, StoreUncheckedCreateWithoutCardsInput>
    connectOrCreate?: StoreCreateOrConnectWithoutCardsInput
    upsert?: StoreUpsertWithoutCardsInput
    disconnect?: StoreWhereInput | boolean
    delete?: StoreWhereInput | boolean
    connect?: StoreWhereUniqueInput
    update?: XOR<XOR<StoreUpdateToOneWithWhereWithoutCardsInput, StoreUpdateWithoutCardsInput>, StoreUncheckedUpdateWithoutCardsInput>
  }

  export type TenantUpdateOneRequiredWithoutCardsNestedInput = {
    create?: XOR<TenantCreateWithoutCardsInput, TenantUncheckedCreateWithoutCardsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutCardsInput
    upsert?: TenantUpsertWithoutCardsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutCardsInput, TenantUpdateWithoutCardsInput>, TenantUncheckedUpdateWithoutCardsInput>
  }

  export type TransactionUpdateManyWithoutCardNestedInput = {
    create?: XOR<TransactionCreateWithoutCardInput, TransactionUncheckedCreateWithoutCardInput> | TransactionCreateWithoutCardInput[] | TransactionUncheckedCreateWithoutCardInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCardInput | TransactionCreateOrConnectWithoutCardInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutCardInput | TransactionUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: TransactionCreateManyCardInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutCardInput | TransactionUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutCardInput | TransactionUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutCardNestedInput = {
    create?: XOR<TransactionCreateWithoutCardInput, TransactionUncheckedCreateWithoutCardInput> | TransactionCreateWithoutCardInput[] | TransactionUncheckedCreateWithoutCardInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCardInput | TransactionCreateOrConnectWithoutCardInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutCardInput | TransactionUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: TransactionCreateManyCardInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutCardInput | TransactionUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutCardInput | TransactionUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type CardCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<CardCreateWithoutTransactionsInput, CardUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: CardCreateOrConnectWithoutTransactionsInput
    connect?: CardWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTransactionsProcessedInput = {
    create?: XOR<UserCreateWithoutTransactionsProcessedInput, UserUncheckedCreateWithoutTransactionsProcessedInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsProcessedInput
    connect?: UserWhereUniqueInput
  }

  export type CustomerCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<CustomerCreateWithoutTransactionsInput, CustomerUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutTransactionsInput
    connect?: CustomerWhereUniqueInput
  }

  export type StoreCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<StoreCreateWithoutTransactionsInput, StoreUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: StoreCreateOrConnectWithoutTransactionsInput
    connect?: StoreWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<TenantCreateWithoutTransactionsInput, TenantUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutTransactionsInput
    connect?: TenantWhereUniqueInput
  }

  export type EnumTxTypeFieldUpdateOperationsInput = {
    set?: $Enums.TxType
  }

  export type EnumTxCategoryFieldUpdateOperationsInput = {
    set?: $Enums.TxCategory
  }

  export type CardUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<CardCreateWithoutTransactionsInput, CardUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: CardCreateOrConnectWithoutTransactionsInput
    upsert?: CardUpsertWithoutTransactionsInput
    connect?: CardWhereUniqueInput
    update?: XOR<XOR<CardUpdateToOneWithWhereWithoutTransactionsInput, CardUpdateWithoutTransactionsInput>, CardUncheckedUpdateWithoutTransactionsInput>
  }

  export type UserUpdateOneRequiredWithoutTransactionsProcessedNestedInput = {
    create?: XOR<UserCreateWithoutTransactionsProcessedInput, UserUncheckedCreateWithoutTransactionsProcessedInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsProcessedInput
    upsert?: UserUpsertWithoutTransactionsProcessedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTransactionsProcessedInput, UserUpdateWithoutTransactionsProcessedInput>, UserUncheckedUpdateWithoutTransactionsProcessedInput>
  }

  export type CustomerUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<CustomerCreateWithoutTransactionsInput, CustomerUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutTransactionsInput
    upsert?: CustomerUpsertWithoutTransactionsInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutTransactionsInput, CustomerUpdateWithoutTransactionsInput>, CustomerUncheckedUpdateWithoutTransactionsInput>
  }

  export type StoreUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<StoreCreateWithoutTransactionsInput, StoreUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: StoreCreateOrConnectWithoutTransactionsInput
    upsert?: StoreUpsertWithoutTransactionsInput
    connect?: StoreWhereUniqueInput
    update?: XOR<XOR<StoreUpdateToOneWithWhereWithoutTransactionsInput, StoreUpdateWithoutTransactionsInput>, StoreUncheckedUpdateWithoutTransactionsInput>
  }

  export type TenantUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<TenantCreateWithoutTransactionsInput, TenantUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutTransactionsInput
    upsert?: TenantUpsertWithoutTransactionsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutTransactionsInput, TenantUpdateWithoutTransactionsInput>, TenantUncheckedUpdateWithoutTransactionsInput>
  }

  export type TenantCreateNestedOneWithoutTierRulesInput = {
    create?: XOR<TenantCreateWithoutTierRulesInput, TenantUncheckedCreateWithoutTierRulesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutTierRulesInput
    connect?: TenantWhereUniqueInput
  }

  export type TenantUpdateOneRequiredWithoutTierRulesNestedInput = {
    create?: XOR<TenantCreateWithoutTierRulesInput, TenantUncheckedCreateWithoutTierRulesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutTierRulesInput
    upsert?: TenantUpsertWithoutTierRulesInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutTierRulesInput, TenantUpdateWithoutTierRulesInput>, TenantUncheckedUpdateWithoutTierRulesInput>
  }

  export type TenantCreateNestedOneWithoutCashbackRulesInput = {
    create?: XOR<TenantCreateWithoutCashbackRulesInput, TenantUncheckedCreateWithoutCashbackRulesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutCashbackRulesInput
    connect?: TenantWhereUniqueInput
  }

  export type TenantUpdateOneRequiredWithoutCashbackRulesNestedInput = {
    create?: XOR<TenantCreateWithoutCashbackRulesInput, TenantUncheckedCreateWithoutCashbackRulesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutCashbackRulesInput
    upsert?: TenantUpsertWithoutCashbackRulesInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutCashbackRulesInput, TenantUpdateWithoutCashbackRulesInput>, TenantUncheckedUpdateWithoutCashbackRulesInput>
  }

  export type TenantCreateNestedOneWithoutOffersInput = {
    create?: XOR<TenantCreateWithoutOffersInput, TenantUncheckedCreateWithoutOffersInput>
    connectOrCreate?: TenantCreateOrConnectWithoutOffersInput
    connect?: TenantWhereUniqueInput
  }

  export type TenantUpdateOneRequiredWithoutOffersNestedInput = {
    create?: XOR<TenantCreateWithoutOffersInput, TenantUncheckedCreateWithoutOffersInput>
    connectOrCreate?: TenantCreateOrConnectWithoutOffersInput
    upsert?: TenantUpsertWithoutOffersInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutOffersInput, TenantUpdateWithoutOffersInput>, TenantUncheckedUpdateWithoutOffersInput>
  }

  export type CustomerCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<CustomerCreateWithoutNotificationsInput, CustomerUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutNotificationsInput
    connect?: CustomerWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<TenantCreateWithoutNotificationsInput, TenantUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutNotificationsInput
    connect?: TenantWhereUniqueInput
  }

  export type EnumNotifChannelFieldUpdateOperationsInput = {
    set?: $Enums.NotifChannel
  }

  export type EnumNotifStatusFieldUpdateOperationsInput = {
    set?: $Enums.NotifStatus
  }

  export type CustomerUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<CustomerCreateWithoutNotificationsInput, CustomerUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutNotificationsInput
    upsert?: CustomerUpsertWithoutNotificationsInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutNotificationsInput, CustomerUpdateWithoutNotificationsInput>, CustomerUncheckedUpdateWithoutNotificationsInput>
  }

  export type TenantUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<TenantCreateWithoutNotificationsInput, TenantUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutNotificationsInput
    upsert?: TenantUpsertWithoutNotificationsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutNotificationsInput, TenantUpdateWithoutNotificationsInput>, TenantUncheckedUpdateWithoutNotificationsInput>
  }

  export type CardLimitTransactionCreateNestedManyWithoutRelatedOrderInput = {
    create?: XOR<CardLimitTransactionCreateWithoutRelatedOrderInput, CardLimitTransactionUncheckedCreateWithoutRelatedOrderInput> | CardLimitTransactionCreateWithoutRelatedOrderInput[] | CardLimitTransactionUncheckedCreateWithoutRelatedOrderInput[]
    connectOrCreate?: CardLimitTransactionCreateOrConnectWithoutRelatedOrderInput | CardLimitTransactionCreateOrConnectWithoutRelatedOrderInput[]
    createMany?: CardLimitTransactionCreateManyRelatedOrderInputEnvelope
    connect?: CardLimitTransactionWhereUniqueInput | CardLimitTransactionWhereUniqueInput[]
  }

  export type TenantCreateNestedOneWithoutCardOrdersInput = {
    create?: XOR<TenantCreateWithoutCardOrdersInput, TenantUncheckedCreateWithoutCardOrdersInput>
    connectOrCreate?: TenantCreateOrConnectWithoutCardOrdersInput
    connect?: TenantWhereUniqueInput
  }

  export type CardLimitTransactionUncheckedCreateNestedManyWithoutRelatedOrderInput = {
    create?: XOR<CardLimitTransactionCreateWithoutRelatedOrderInput, CardLimitTransactionUncheckedCreateWithoutRelatedOrderInput> | CardLimitTransactionCreateWithoutRelatedOrderInput[] | CardLimitTransactionUncheckedCreateWithoutRelatedOrderInput[]
    connectOrCreate?: CardLimitTransactionCreateOrConnectWithoutRelatedOrderInput | CardLimitTransactionCreateOrConnectWithoutRelatedOrderInput[]
    createMany?: CardLimitTransactionCreateManyRelatedOrderInputEnvelope
    connect?: CardLimitTransactionWhereUniqueInput | CardLimitTransactionWhereUniqueInput[]
  }

  export type EnumCardTypeFieldUpdateOperationsInput = {
    set?: $Enums.CardType
  }

  export type EnumOrderStatusFieldUpdateOperationsInput = {
    set?: $Enums.OrderStatus
  }

  export type EnumOrderSourceTypeFieldUpdateOperationsInput = {
    set?: $Enums.OrderSourceType
  }

  export type CardLimitTransactionUpdateManyWithoutRelatedOrderNestedInput = {
    create?: XOR<CardLimitTransactionCreateWithoutRelatedOrderInput, CardLimitTransactionUncheckedCreateWithoutRelatedOrderInput> | CardLimitTransactionCreateWithoutRelatedOrderInput[] | CardLimitTransactionUncheckedCreateWithoutRelatedOrderInput[]
    connectOrCreate?: CardLimitTransactionCreateOrConnectWithoutRelatedOrderInput | CardLimitTransactionCreateOrConnectWithoutRelatedOrderInput[]
    upsert?: CardLimitTransactionUpsertWithWhereUniqueWithoutRelatedOrderInput | CardLimitTransactionUpsertWithWhereUniqueWithoutRelatedOrderInput[]
    createMany?: CardLimitTransactionCreateManyRelatedOrderInputEnvelope
    set?: CardLimitTransactionWhereUniqueInput | CardLimitTransactionWhereUniqueInput[]
    disconnect?: CardLimitTransactionWhereUniqueInput | CardLimitTransactionWhereUniqueInput[]
    delete?: CardLimitTransactionWhereUniqueInput | CardLimitTransactionWhereUniqueInput[]
    connect?: CardLimitTransactionWhereUniqueInput | CardLimitTransactionWhereUniqueInput[]
    update?: CardLimitTransactionUpdateWithWhereUniqueWithoutRelatedOrderInput | CardLimitTransactionUpdateWithWhereUniqueWithoutRelatedOrderInput[]
    updateMany?: CardLimitTransactionUpdateManyWithWhereWithoutRelatedOrderInput | CardLimitTransactionUpdateManyWithWhereWithoutRelatedOrderInput[]
    deleteMany?: CardLimitTransactionScalarWhereInput | CardLimitTransactionScalarWhereInput[]
  }

  export type TenantUpdateOneRequiredWithoutCardOrdersNestedInput = {
    create?: XOR<TenantCreateWithoutCardOrdersInput, TenantUncheckedCreateWithoutCardOrdersInput>
    connectOrCreate?: TenantCreateOrConnectWithoutCardOrdersInput
    upsert?: TenantUpsertWithoutCardOrdersInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutCardOrdersInput, TenantUpdateWithoutCardOrdersInput>, TenantUncheckedUpdateWithoutCardOrdersInput>
  }

  export type CardLimitTransactionUncheckedUpdateManyWithoutRelatedOrderNestedInput = {
    create?: XOR<CardLimitTransactionCreateWithoutRelatedOrderInput, CardLimitTransactionUncheckedCreateWithoutRelatedOrderInput> | CardLimitTransactionCreateWithoutRelatedOrderInput[] | CardLimitTransactionUncheckedCreateWithoutRelatedOrderInput[]
    connectOrCreate?: CardLimitTransactionCreateOrConnectWithoutRelatedOrderInput | CardLimitTransactionCreateOrConnectWithoutRelatedOrderInput[]
    upsert?: CardLimitTransactionUpsertWithWhereUniqueWithoutRelatedOrderInput | CardLimitTransactionUpsertWithWhereUniqueWithoutRelatedOrderInput[]
    createMany?: CardLimitTransactionCreateManyRelatedOrderInputEnvelope
    set?: CardLimitTransactionWhereUniqueInput | CardLimitTransactionWhereUniqueInput[]
    disconnect?: CardLimitTransactionWhereUniqueInput | CardLimitTransactionWhereUniqueInput[]
    delete?: CardLimitTransactionWhereUniqueInput | CardLimitTransactionWhereUniqueInput[]
    connect?: CardLimitTransactionWhereUniqueInput | CardLimitTransactionWhereUniqueInput[]
    update?: CardLimitTransactionUpdateWithWhereUniqueWithoutRelatedOrderInput | CardLimitTransactionUpdateWithWhereUniqueWithoutRelatedOrderInput[]
    updateMany?: CardLimitTransactionUpdateManyWithWhereWithoutRelatedOrderInput | CardLimitTransactionUpdateManyWithWhereWithoutRelatedOrderInput[]
    deleteMany?: CardLimitTransactionScalarWhereInput | CardLimitTransactionScalarWhereInput[]
  }

  export type PlanCreatefeaturesInput = {
    set: string[]
  }

  export type CardLimitTransactionCreateNestedManyWithoutRelatedPlanInput = {
    create?: XOR<CardLimitTransactionCreateWithoutRelatedPlanInput, CardLimitTransactionUncheckedCreateWithoutRelatedPlanInput> | CardLimitTransactionCreateWithoutRelatedPlanInput[] | CardLimitTransactionUncheckedCreateWithoutRelatedPlanInput[]
    connectOrCreate?: CardLimitTransactionCreateOrConnectWithoutRelatedPlanInput | CardLimitTransactionCreateOrConnectWithoutRelatedPlanInput[]
    createMany?: CardLimitTransactionCreateManyRelatedPlanInputEnvelope
    connect?: CardLimitTransactionWhereUniqueInput | CardLimitTransactionWhereUniqueInput[]
  }

  export type TenantCreateNestedManyWithoutPlanInput = {
    create?: XOR<TenantCreateWithoutPlanInput, TenantUncheckedCreateWithoutPlanInput> | TenantCreateWithoutPlanInput[] | TenantUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: TenantCreateOrConnectWithoutPlanInput | TenantCreateOrConnectWithoutPlanInput[]
    createMany?: TenantCreateManyPlanInputEnvelope
    connect?: TenantWhereUniqueInput | TenantWhereUniqueInput[]
  }

  export type PaymentCreateNestedManyWithoutPlanInput = {
    create?: XOR<PaymentCreateWithoutPlanInput, PaymentUncheckedCreateWithoutPlanInput> | PaymentCreateWithoutPlanInput[] | PaymentUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutPlanInput | PaymentCreateOrConnectWithoutPlanInput[]
    createMany?: PaymentCreateManyPlanInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type SubscriptionEventCreateNestedManyWithoutPlanInput = {
    create?: XOR<SubscriptionEventCreateWithoutPlanInput, SubscriptionEventUncheckedCreateWithoutPlanInput> | SubscriptionEventCreateWithoutPlanInput[] | SubscriptionEventUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: SubscriptionEventCreateOrConnectWithoutPlanInput | SubscriptionEventCreateOrConnectWithoutPlanInput[]
    createMany?: SubscriptionEventCreateManyPlanInputEnvelope
    connect?: SubscriptionEventWhereUniqueInput | SubscriptionEventWhereUniqueInput[]
  }

  export type SubscriptionEventCreateNestedManyWithoutPreviousPlanInput = {
    create?: XOR<SubscriptionEventCreateWithoutPreviousPlanInput, SubscriptionEventUncheckedCreateWithoutPreviousPlanInput> | SubscriptionEventCreateWithoutPreviousPlanInput[] | SubscriptionEventUncheckedCreateWithoutPreviousPlanInput[]
    connectOrCreate?: SubscriptionEventCreateOrConnectWithoutPreviousPlanInput | SubscriptionEventCreateOrConnectWithoutPreviousPlanInput[]
    createMany?: SubscriptionEventCreateManyPreviousPlanInputEnvelope
    connect?: SubscriptionEventWhereUniqueInput | SubscriptionEventWhereUniqueInput[]
  }

  export type CardLimitTransactionUncheckedCreateNestedManyWithoutRelatedPlanInput = {
    create?: XOR<CardLimitTransactionCreateWithoutRelatedPlanInput, CardLimitTransactionUncheckedCreateWithoutRelatedPlanInput> | CardLimitTransactionCreateWithoutRelatedPlanInput[] | CardLimitTransactionUncheckedCreateWithoutRelatedPlanInput[]
    connectOrCreate?: CardLimitTransactionCreateOrConnectWithoutRelatedPlanInput | CardLimitTransactionCreateOrConnectWithoutRelatedPlanInput[]
    createMany?: CardLimitTransactionCreateManyRelatedPlanInputEnvelope
    connect?: CardLimitTransactionWhereUniqueInput | CardLimitTransactionWhereUniqueInput[]
  }

  export type TenantUncheckedCreateNestedManyWithoutPlanInput = {
    create?: XOR<TenantCreateWithoutPlanInput, TenantUncheckedCreateWithoutPlanInput> | TenantCreateWithoutPlanInput[] | TenantUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: TenantCreateOrConnectWithoutPlanInput | TenantCreateOrConnectWithoutPlanInput[]
    createMany?: TenantCreateManyPlanInputEnvelope
    connect?: TenantWhereUniqueInput | TenantWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutPlanInput = {
    create?: XOR<PaymentCreateWithoutPlanInput, PaymentUncheckedCreateWithoutPlanInput> | PaymentCreateWithoutPlanInput[] | PaymentUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutPlanInput | PaymentCreateOrConnectWithoutPlanInput[]
    createMany?: PaymentCreateManyPlanInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type SubscriptionEventUncheckedCreateNestedManyWithoutPlanInput = {
    create?: XOR<SubscriptionEventCreateWithoutPlanInput, SubscriptionEventUncheckedCreateWithoutPlanInput> | SubscriptionEventCreateWithoutPlanInput[] | SubscriptionEventUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: SubscriptionEventCreateOrConnectWithoutPlanInput | SubscriptionEventCreateOrConnectWithoutPlanInput[]
    createMany?: SubscriptionEventCreateManyPlanInputEnvelope
    connect?: SubscriptionEventWhereUniqueInput | SubscriptionEventWhereUniqueInput[]
  }

  export type SubscriptionEventUncheckedCreateNestedManyWithoutPreviousPlanInput = {
    create?: XOR<SubscriptionEventCreateWithoutPreviousPlanInput, SubscriptionEventUncheckedCreateWithoutPreviousPlanInput> | SubscriptionEventCreateWithoutPreviousPlanInput[] | SubscriptionEventUncheckedCreateWithoutPreviousPlanInput[]
    connectOrCreate?: SubscriptionEventCreateOrConnectWithoutPreviousPlanInput | SubscriptionEventCreateOrConnectWithoutPreviousPlanInput[]
    createMany?: SubscriptionEventCreateManyPreviousPlanInputEnvelope
    connect?: SubscriptionEventWhereUniqueInput | SubscriptionEventWhereUniqueInput[]
  }

  export type EnumBillingPeriodFieldUpdateOperationsInput = {
    set?: $Enums.BillingPeriod
  }

  export type PlanUpdatefeaturesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CardLimitTransactionUpdateManyWithoutRelatedPlanNestedInput = {
    create?: XOR<CardLimitTransactionCreateWithoutRelatedPlanInput, CardLimitTransactionUncheckedCreateWithoutRelatedPlanInput> | CardLimitTransactionCreateWithoutRelatedPlanInput[] | CardLimitTransactionUncheckedCreateWithoutRelatedPlanInput[]
    connectOrCreate?: CardLimitTransactionCreateOrConnectWithoutRelatedPlanInput | CardLimitTransactionCreateOrConnectWithoutRelatedPlanInput[]
    upsert?: CardLimitTransactionUpsertWithWhereUniqueWithoutRelatedPlanInput | CardLimitTransactionUpsertWithWhereUniqueWithoutRelatedPlanInput[]
    createMany?: CardLimitTransactionCreateManyRelatedPlanInputEnvelope
    set?: CardLimitTransactionWhereUniqueInput | CardLimitTransactionWhereUniqueInput[]
    disconnect?: CardLimitTransactionWhereUniqueInput | CardLimitTransactionWhereUniqueInput[]
    delete?: CardLimitTransactionWhereUniqueInput | CardLimitTransactionWhereUniqueInput[]
    connect?: CardLimitTransactionWhereUniqueInput | CardLimitTransactionWhereUniqueInput[]
    update?: CardLimitTransactionUpdateWithWhereUniqueWithoutRelatedPlanInput | CardLimitTransactionUpdateWithWhereUniqueWithoutRelatedPlanInput[]
    updateMany?: CardLimitTransactionUpdateManyWithWhereWithoutRelatedPlanInput | CardLimitTransactionUpdateManyWithWhereWithoutRelatedPlanInput[]
    deleteMany?: CardLimitTransactionScalarWhereInput | CardLimitTransactionScalarWhereInput[]
  }

  export type TenantUpdateManyWithoutPlanNestedInput = {
    create?: XOR<TenantCreateWithoutPlanInput, TenantUncheckedCreateWithoutPlanInput> | TenantCreateWithoutPlanInput[] | TenantUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: TenantCreateOrConnectWithoutPlanInput | TenantCreateOrConnectWithoutPlanInput[]
    upsert?: TenantUpsertWithWhereUniqueWithoutPlanInput | TenantUpsertWithWhereUniqueWithoutPlanInput[]
    createMany?: TenantCreateManyPlanInputEnvelope
    set?: TenantWhereUniqueInput | TenantWhereUniqueInput[]
    disconnect?: TenantWhereUniqueInput | TenantWhereUniqueInput[]
    delete?: TenantWhereUniqueInput | TenantWhereUniqueInput[]
    connect?: TenantWhereUniqueInput | TenantWhereUniqueInput[]
    update?: TenantUpdateWithWhereUniqueWithoutPlanInput | TenantUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: TenantUpdateManyWithWhereWithoutPlanInput | TenantUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: TenantScalarWhereInput | TenantScalarWhereInput[]
  }

  export type PaymentUpdateManyWithoutPlanNestedInput = {
    create?: XOR<PaymentCreateWithoutPlanInput, PaymentUncheckedCreateWithoutPlanInput> | PaymentCreateWithoutPlanInput[] | PaymentUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutPlanInput | PaymentCreateOrConnectWithoutPlanInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutPlanInput | PaymentUpsertWithWhereUniqueWithoutPlanInput[]
    createMany?: PaymentCreateManyPlanInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutPlanInput | PaymentUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutPlanInput | PaymentUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type SubscriptionEventUpdateManyWithoutPlanNestedInput = {
    create?: XOR<SubscriptionEventCreateWithoutPlanInput, SubscriptionEventUncheckedCreateWithoutPlanInput> | SubscriptionEventCreateWithoutPlanInput[] | SubscriptionEventUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: SubscriptionEventCreateOrConnectWithoutPlanInput | SubscriptionEventCreateOrConnectWithoutPlanInput[]
    upsert?: SubscriptionEventUpsertWithWhereUniqueWithoutPlanInput | SubscriptionEventUpsertWithWhereUniqueWithoutPlanInput[]
    createMany?: SubscriptionEventCreateManyPlanInputEnvelope
    set?: SubscriptionEventWhereUniqueInput | SubscriptionEventWhereUniqueInput[]
    disconnect?: SubscriptionEventWhereUniqueInput | SubscriptionEventWhereUniqueInput[]
    delete?: SubscriptionEventWhereUniqueInput | SubscriptionEventWhereUniqueInput[]
    connect?: SubscriptionEventWhereUniqueInput | SubscriptionEventWhereUniqueInput[]
    update?: SubscriptionEventUpdateWithWhereUniqueWithoutPlanInput | SubscriptionEventUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: SubscriptionEventUpdateManyWithWhereWithoutPlanInput | SubscriptionEventUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: SubscriptionEventScalarWhereInput | SubscriptionEventScalarWhereInput[]
  }

  export type SubscriptionEventUpdateManyWithoutPreviousPlanNestedInput = {
    create?: XOR<SubscriptionEventCreateWithoutPreviousPlanInput, SubscriptionEventUncheckedCreateWithoutPreviousPlanInput> | SubscriptionEventCreateWithoutPreviousPlanInput[] | SubscriptionEventUncheckedCreateWithoutPreviousPlanInput[]
    connectOrCreate?: SubscriptionEventCreateOrConnectWithoutPreviousPlanInput | SubscriptionEventCreateOrConnectWithoutPreviousPlanInput[]
    upsert?: SubscriptionEventUpsertWithWhereUniqueWithoutPreviousPlanInput | SubscriptionEventUpsertWithWhereUniqueWithoutPreviousPlanInput[]
    createMany?: SubscriptionEventCreateManyPreviousPlanInputEnvelope
    set?: SubscriptionEventWhereUniqueInput | SubscriptionEventWhereUniqueInput[]
    disconnect?: SubscriptionEventWhereUniqueInput | SubscriptionEventWhereUniqueInput[]
    delete?: SubscriptionEventWhereUniqueInput | SubscriptionEventWhereUniqueInput[]
    connect?: SubscriptionEventWhereUniqueInput | SubscriptionEventWhereUniqueInput[]
    update?: SubscriptionEventUpdateWithWhereUniqueWithoutPreviousPlanInput | SubscriptionEventUpdateWithWhereUniqueWithoutPreviousPlanInput[]
    updateMany?: SubscriptionEventUpdateManyWithWhereWithoutPreviousPlanInput | SubscriptionEventUpdateManyWithWhereWithoutPreviousPlanInput[]
    deleteMany?: SubscriptionEventScalarWhereInput | SubscriptionEventScalarWhereInput[]
  }

  export type CardLimitTransactionUncheckedUpdateManyWithoutRelatedPlanNestedInput = {
    create?: XOR<CardLimitTransactionCreateWithoutRelatedPlanInput, CardLimitTransactionUncheckedCreateWithoutRelatedPlanInput> | CardLimitTransactionCreateWithoutRelatedPlanInput[] | CardLimitTransactionUncheckedCreateWithoutRelatedPlanInput[]
    connectOrCreate?: CardLimitTransactionCreateOrConnectWithoutRelatedPlanInput | CardLimitTransactionCreateOrConnectWithoutRelatedPlanInput[]
    upsert?: CardLimitTransactionUpsertWithWhereUniqueWithoutRelatedPlanInput | CardLimitTransactionUpsertWithWhereUniqueWithoutRelatedPlanInput[]
    createMany?: CardLimitTransactionCreateManyRelatedPlanInputEnvelope
    set?: CardLimitTransactionWhereUniqueInput | CardLimitTransactionWhereUniqueInput[]
    disconnect?: CardLimitTransactionWhereUniqueInput | CardLimitTransactionWhereUniqueInput[]
    delete?: CardLimitTransactionWhereUniqueInput | CardLimitTransactionWhereUniqueInput[]
    connect?: CardLimitTransactionWhereUniqueInput | CardLimitTransactionWhereUniqueInput[]
    update?: CardLimitTransactionUpdateWithWhereUniqueWithoutRelatedPlanInput | CardLimitTransactionUpdateWithWhereUniqueWithoutRelatedPlanInput[]
    updateMany?: CardLimitTransactionUpdateManyWithWhereWithoutRelatedPlanInput | CardLimitTransactionUpdateManyWithWhereWithoutRelatedPlanInput[]
    deleteMany?: CardLimitTransactionScalarWhereInput | CardLimitTransactionScalarWhereInput[]
  }

  export type TenantUncheckedUpdateManyWithoutPlanNestedInput = {
    create?: XOR<TenantCreateWithoutPlanInput, TenantUncheckedCreateWithoutPlanInput> | TenantCreateWithoutPlanInput[] | TenantUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: TenantCreateOrConnectWithoutPlanInput | TenantCreateOrConnectWithoutPlanInput[]
    upsert?: TenantUpsertWithWhereUniqueWithoutPlanInput | TenantUpsertWithWhereUniqueWithoutPlanInput[]
    createMany?: TenantCreateManyPlanInputEnvelope
    set?: TenantWhereUniqueInput | TenantWhereUniqueInput[]
    disconnect?: TenantWhereUniqueInput | TenantWhereUniqueInput[]
    delete?: TenantWhereUniqueInput | TenantWhereUniqueInput[]
    connect?: TenantWhereUniqueInput | TenantWhereUniqueInput[]
    update?: TenantUpdateWithWhereUniqueWithoutPlanInput | TenantUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: TenantUpdateManyWithWhereWithoutPlanInput | TenantUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: TenantScalarWhereInput | TenantScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutPlanNestedInput = {
    create?: XOR<PaymentCreateWithoutPlanInput, PaymentUncheckedCreateWithoutPlanInput> | PaymentCreateWithoutPlanInput[] | PaymentUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutPlanInput | PaymentCreateOrConnectWithoutPlanInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutPlanInput | PaymentUpsertWithWhereUniqueWithoutPlanInput[]
    createMany?: PaymentCreateManyPlanInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutPlanInput | PaymentUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutPlanInput | PaymentUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type SubscriptionEventUncheckedUpdateManyWithoutPlanNestedInput = {
    create?: XOR<SubscriptionEventCreateWithoutPlanInput, SubscriptionEventUncheckedCreateWithoutPlanInput> | SubscriptionEventCreateWithoutPlanInput[] | SubscriptionEventUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: SubscriptionEventCreateOrConnectWithoutPlanInput | SubscriptionEventCreateOrConnectWithoutPlanInput[]
    upsert?: SubscriptionEventUpsertWithWhereUniqueWithoutPlanInput | SubscriptionEventUpsertWithWhereUniqueWithoutPlanInput[]
    createMany?: SubscriptionEventCreateManyPlanInputEnvelope
    set?: SubscriptionEventWhereUniqueInput | SubscriptionEventWhereUniqueInput[]
    disconnect?: SubscriptionEventWhereUniqueInput | SubscriptionEventWhereUniqueInput[]
    delete?: SubscriptionEventWhereUniqueInput | SubscriptionEventWhereUniqueInput[]
    connect?: SubscriptionEventWhereUniqueInput | SubscriptionEventWhereUniqueInput[]
    update?: SubscriptionEventUpdateWithWhereUniqueWithoutPlanInput | SubscriptionEventUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: SubscriptionEventUpdateManyWithWhereWithoutPlanInput | SubscriptionEventUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: SubscriptionEventScalarWhereInput | SubscriptionEventScalarWhereInput[]
  }

  export type SubscriptionEventUncheckedUpdateManyWithoutPreviousPlanNestedInput = {
    create?: XOR<SubscriptionEventCreateWithoutPreviousPlanInput, SubscriptionEventUncheckedCreateWithoutPreviousPlanInput> | SubscriptionEventCreateWithoutPreviousPlanInput[] | SubscriptionEventUncheckedCreateWithoutPreviousPlanInput[]
    connectOrCreate?: SubscriptionEventCreateOrConnectWithoutPreviousPlanInput | SubscriptionEventCreateOrConnectWithoutPreviousPlanInput[]
    upsert?: SubscriptionEventUpsertWithWhereUniqueWithoutPreviousPlanInput | SubscriptionEventUpsertWithWhereUniqueWithoutPreviousPlanInput[]
    createMany?: SubscriptionEventCreateManyPreviousPlanInputEnvelope
    set?: SubscriptionEventWhereUniqueInput | SubscriptionEventWhereUniqueInput[]
    disconnect?: SubscriptionEventWhereUniqueInput | SubscriptionEventWhereUniqueInput[]
    delete?: SubscriptionEventWhereUniqueInput | SubscriptionEventWhereUniqueInput[]
    connect?: SubscriptionEventWhereUniqueInput | SubscriptionEventWhereUniqueInput[]
    update?: SubscriptionEventUpdateWithWhereUniqueWithoutPreviousPlanInput | SubscriptionEventUpdateWithWhereUniqueWithoutPreviousPlanInput[]
    updateMany?: SubscriptionEventUpdateManyWithWhereWithoutPreviousPlanInput | SubscriptionEventUpdateManyWithWhereWithoutPreviousPlanInput[]
    deleteMany?: SubscriptionEventScalarWhereInput | SubscriptionEventScalarWhereInput[]
  }

  export type CardOrderCreateNestedOneWithoutCardLimitTransactionsInput = {
    create?: XOR<CardOrderCreateWithoutCardLimitTransactionsInput, CardOrderUncheckedCreateWithoutCardLimitTransactionsInput>
    connectOrCreate?: CardOrderCreateOrConnectWithoutCardLimitTransactionsInput
    connect?: CardOrderWhereUniqueInput
  }

  export type PlanCreateNestedOneWithoutCardLimitTransactionsInput = {
    create?: XOR<PlanCreateWithoutCardLimitTransactionsInput, PlanUncheckedCreateWithoutCardLimitTransactionsInput>
    connectOrCreate?: PlanCreateOrConnectWithoutCardLimitTransactionsInput
    connect?: PlanWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutCardLimitTransactionsInput = {
    create?: XOR<TenantCreateWithoutCardLimitTransactionsInput, TenantUncheckedCreateWithoutCardLimitTransactionsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutCardLimitTransactionsInput
    connect?: TenantWhereUniqueInput
  }

  export type EnumCardLimitTransactionTypeFieldUpdateOperationsInput = {
    set?: $Enums.CardLimitTransactionType
  }

  export type EnumCardLimitTransactionSourceFieldUpdateOperationsInput = {
    set?: $Enums.CardLimitTransactionSource
  }

  export type CardOrderUpdateOneWithoutCardLimitTransactionsNestedInput = {
    create?: XOR<CardOrderCreateWithoutCardLimitTransactionsInput, CardOrderUncheckedCreateWithoutCardLimitTransactionsInput>
    connectOrCreate?: CardOrderCreateOrConnectWithoutCardLimitTransactionsInput
    upsert?: CardOrderUpsertWithoutCardLimitTransactionsInput
    disconnect?: CardOrderWhereInput | boolean
    delete?: CardOrderWhereInput | boolean
    connect?: CardOrderWhereUniqueInput
    update?: XOR<XOR<CardOrderUpdateToOneWithWhereWithoutCardLimitTransactionsInput, CardOrderUpdateWithoutCardLimitTransactionsInput>, CardOrderUncheckedUpdateWithoutCardLimitTransactionsInput>
  }

  export type PlanUpdateOneWithoutCardLimitTransactionsNestedInput = {
    create?: XOR<PlanCreateWithoutCardLimitTransactionsInput, PlanUncheckedCreateWithoutCardLimitTransactionsInput>
    connectOrCreate?: PlanCreateOrConnectWithoutCardLimitTransactionsInput
    upsert?: PlanUpsertWithoutCardLimitTransactionsInput
    disconnect?: PlanWhereInput | boolean
    delete?: PlanWhereInput | boolean
    connect?: PlanWhereUniqueInput
    update?: XOR<XOR<PlanUpdateToOneWithWhereWithoutCardLimitTransactionsInput, PlanUpdateWithoutCardLimitTransactionsInput>, PlanUncheckedUpdateWithoutCardLimitTransactionsInput>
  }

  export type TenantUpdateOneRequiredWithoutCardLimitTransactionsNestedInput = {
    create?: XOR<TenantCreateWithoutCardLimitTransactionsInput, TenantUncheckedCreateWithoutCardLimitTransactionsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutCardLimitTransactionsInput
    upsert?: TenantUpsertWithoutCardLimitTransactionsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutCardLimitTransactionsInput, TenantUpdateWithoutCardLimitTransactionsInput>, TenantUncheckedUpdateWithoutCardLimitTransactionsInput>
  }

  export type TenantCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<TenantCreateWithoutPaymentsInput, TenantUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutPaymentsInput
    connect?: TenantWhereUniqueInput
  }

  export type PlanCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<PlanCreateWithoutPaymentsInput, PlanUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: PlanCreateOrConnectWithoutPaymentsInput
    connect?: PlanWhereUniqueInput
  }

  export type TenantUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<TenantCreateWithoutPaymentsInput, TenantUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutPaymentsInput
    upsert?: TenantUpsertWithoutPaymentsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutPaymentsInput, TenantUpdateWithoutPaymentsInput>, TenantUncheckedUpdateWithoutPaymentsInput>
  }

  export type PlanUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<PlanCreateWithoutPaymentsInput, PlanUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: PlanCreateOrConnectWithoutPaymentsInput
    upsert?: PlanUpsertWithoutPaymentsInput
    connect?: PlanWhereUniqueInput
    update?: XOR<XOR<PlanUpdateToOneWithWhereWithoutPaymentsInput, PlanUpdateWithoutPaymentsInput>, PlanUncheckedUpdateWithoutPaymentsInput>
  }

  export type TenantCreateNestedOneWithoutSubscriptionEventsInput = {
    create?: XOR<TenantCreateWithoutSubscriptionEventsInput, TenantUncheckedCreateWithoutSubscriptionEventsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutSubscriptionEventsInput
    connect?: TenantWhereUniqueInput
  }

  export type PlanCreateNestedOneWithoutSubscriptionEventsInput = {
    create?: XOR<PlanCreateWithoutSubscriptionEventsInput, PlanUncheckedCreateWithoutSubscriptionEventsInput>
    connectOrCreate?: PlanCreateOrConnectWithoutSubscriptionEventsInput
    connect?: PlanWhereUniqueInput
  }

  export type PlanCreateNestedOneWithoutPreviousSubscriptionEventsInput = {
    create?: XOR<PlanCreateWithoutPreviousSubscriptionEventsInput, PlanUncheckedCreateWithoutPreviousSubscriptionEventsInput>
    connectOrCreate?: PlanCreateOrConnectWithoutPreviousSubscriptionEventsInput
    connect?: PlanWhereUniqueInput
  }

  export type TenantUpdateOneRequiredWithoutSubscriptionEventsNestedInput = {
    create?: XOR<TenantCreateWithoutSubscriptionEventsInput, TenantUncheckedCreateWithoutSubscriptionEventsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutSubscriptionEventsInput
    upsert?: TenantUpsertWithoutSubscriptionEventsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutSubscriptionEventsInput, TenantUpdateWithoutSubscriptionEventsInput>, TenantUncheckedUpdateWithoutSubscriptionEventsInput>
  }

  export type PlanUpdateOneRequiredWithoutSubscriptionEventsNestedInput = {
    create?: XOR<PlanCreateWithoutSubscriptionEventsInput, PlanUncheckedCreateWithoutSubscriptionEventsInput>
    connectOrCreate?: PlanCreateOrConnectWithoutSubscriptionEventsInput
    upsert?: PlanUpsertWithoutSubscriptionEventsInput
    connect?: PlanWhereUniqueInput
    update?: XOR<XOR<PlanUpdateToOneWithWhereWithoutSubscriptionEventsInput, PlanUpdateWithoutSubscriptionEventsInput>, PlanUncheckedUpdateWithoutSubscriptionEventsInput>
  }

  export type PlanUpdateOneWithoutPreviousSubscriptionEventsNestedInput = {
    create?: XOR<PlanCreateWithoutPreviousSubscriptionEventsInput, PlanUncheckedCreateWithoutPreviousSubscriptionEventsInput>
    connectOrCreate?: PlanCreateOrConnectWithoutPreviousSubscriptionEventsInput
    upsert?: PlanUpsertWithoutPreviousSubscriptionEventsInput
    disconnect?: PlanWhereInput | boolean
    delete?: PlanWhereInput | boolean
    connect?: PlanWhereUniqueInput
    update?: XOR<XOR<PlanUpdateToOneWithWhereWithoutPreviousSubscriptionEventsInput, PlanUpdateWithoutPreviousSubscriptionEventsInput>, PlanUncheckedUpdateWithoutPreviousSubscriptionEventsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumSubscriptionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusFilter<$PrismaModel> | $Enums.SubscriptionStatus
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumSubscriptionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusWithAggregatesFilter<$PrismaModel> | $Enums.SubscriptionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
    _max?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedEnumTierFilter<$PrismaModel = never> = {
    equals?: $Enums.Tier | EnumTierFieldRefInput<$PrismaModel>
    in?: $Enums.Tier[] | ListEnumTierFieldRefInput<$PrismaModel>
    notIn?: $Enums.Tier[] | ListEnumTierFieldRefInput<$PrismaModel>
    not?: NestedEnumTierFilter<$PrismaModel> | $Enums.Tier
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedEnumTierWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Tier | EnumTierFieldRefInput<$PrismaModel>
    in?: $Enums.Tier[] | ListEnumTierFieldRefInput<$PrismaModel>
    notIn?: $Enums.Tier[] | ListEnumTierFieldRefInput<$PrismaModel>
    not?: NestedEnumTierWithAggregatesFilter<$PrismaModel> | $Enums.Tier
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTierFilter<$PrismaModel>
    _max?: NestedEnumTierFilter<$PrismaModel>
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumCardStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CardStatus | EnumCardStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CardStatus[] | ListEnumCardStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CardStatus[] | ListEnumCardStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCardStatusFilter<$PrismaModel> | $Enums.CardStatus
  }

  export type NestedEnumCardStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CardStatus | EnumCardStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CardStatus[] | ListEnumCardStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CardStatus[] | ListEnumCardStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCardStatusWithAggregatesFilter<$PrismaModel> | $Enums.CardStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCardStatusFilter<$PrismaModel>
    _max?: NestedEnumCardStatusFilter<$PrismaModel>
  }

  export type NestedEnumTxTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TxType | EnumTxTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TxType[] | ListEnumTxTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TxType[] | ListEnumTxTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTxTypeFilter<$PrismaModel> | $Enums.TxType
  }

  export type NestedEnumTxCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.TxCategory | EnumTxCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.TxCategory[] | ListEnumTxCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.TxCategory[] | ListEnumTxCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumTxCategoryFilter<$PrismaModel> | $Enums.TxCategory
  }

  export type NestedEnumTxTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TxType | EnumTxTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TxType[] | ListEnumTxTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TxType[] | ListEnumTxTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTxTypeWithAggregatesFilter<$PrismaModel> | $Enums.TxType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTxTypeFilter<$PrismaModel>
    _max?: NestedEnumTxTypeFilter<$PrismaModel>
  }

  export type NestedEnumTxCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TxCategory | EnumTxCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.TxCategory[] | ListEnumTxCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.TxCategory[] | ListEnumTxCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumTxCategoryWithAggregatesFilter<$PrismaModel> | $Enums.TxCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTxCategoryFilter<$PrismaModel>
    _max?: NestedEnumTxCategoryFilter<$PrismaModel>
  }

  export type NestedEnumNotifChannelFilter<$PrismaModel = never> = {
    equals?: $Enums.NotifChannel | EnumNotifChannelFieldRefInput<$PrismaModel>
    in?: $Enums.NotifChannel[] | ListEnumNotifChannelFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotifChannel[] | ListEnumNotifChannelFieldRefInput<$PrismaModel>
    not?: NestedEnumNotifChannelFilter<$PrismaModel> | $Enums.NotifChannel
  }

  export type NestedEnumNotifStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.NotifStatus | EnumNotifStatusFieldRefInput<$PrismaModel>
    in?: $Enums.NotifStatus[] | ListEnumNotifStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotifStatus[] | ListEnumNotifStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumNotifStatusFilter<$PrismaModel> | $Enums.NotifStatus
  }

  export type NestedEnumNotifChannelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotifChannel | EnumNotifChannelFieldRefInput<$PrismaModel>
    in?: $Enums.NotifChannel[] | ListEnumNotifChannelFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotifChannel[] | ListEnumNotifChannelFieldRefInput<$PrismaModel>
    not?: NestedEnumNotifChannelWithAggregatesFilter<$PrismaModel> | $Enums.NotifChannel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotifChannelFilter<$PrismaModel>
    _max?: NestedEnumNotifChannelFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumNotifStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotifStatus | EnumNotifStatusFieldRefInput<$PrismaModel>
    in?: $Enums.NotifStatus[] | ListEnumNotifStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotifStatus[] | ListEnumNotifStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumNotifStatusWithAggregatesFilter<$PrismaModel> | $Enums.NotifStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotifStatusFilter<$PrismaModel>
    _max?: NestedEnumNotifStatusFilter<$PrismaModel>
  }

  export type NestedEnumCardTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CardType | EnumCardTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CardType[] | ListEnumCardTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CardType[] | ListEnumCardTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCardTypeFilter<$PrismaModel> | $Enums.CardType
  }

  export type NestedEnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type NestedEnumOrderSourceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderSourceType | EnumOrderSourceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OrderSourceType[] | ListEnumOrderSourceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderSourceType[] | ListEnumOrderSourceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderSourceTypeFilter<$PrismaModel> | $Enums.OrderSourceType
  }

  export type NestedEnumCardTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CardType | EnumCardTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CardType[] | ListEnumCardTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CardType[] | ListEnumCardTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCardTypeWithAggregatesFilter<$PrismaModel> | $Enums.CardType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCardTypeFilter<$PrismaModel>
    _max?: NestedEnumCardTypeFilter<$PrismaModel>
  }

  export type NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type NestedEnumOrderSourceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderSourceType | EnumOrderSourceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OrderSourceType[] | ListEnumOrderSourceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderSourceType[] | ListEnumOrderSourceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderSourceTypeWithAggregatesFilter<$PrismaModel> | $Enums.OrderSourceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderSourceTypeFilter<$PrismaModel>
    _max?: NestedEnumOrderSourceTypeFilter<$PrismaModel>
  }

  export type NestedEnumBillingPeriodFilter<$PrismaModel = never> = {
    equals?: $Enums.BillingPeriod | EnumBillingPeriodFieldRefInput<$PrismaModel>
    in?: $Enums.BillingPeriod[] | ListEnumBillingPeriodFieldRefInput<$PrismaModel>
    notIn?: $Enums.BillingPeriod[] | ListEnumBillingPeriodFieldRefInput<$PrismaModel>
    not?: NestedEnumBillingPeriodFilter<$PrismaModel> | $Enums.BillingPeriod
  }

  export type NestedEnumBillingPeriodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BillingPeriod | EnumBillingPeriodFieldRefInput<$PrismaModel>
    in?: $Enums.BillingPeriod[] | ListEnumBillingPeriodFieldRefInput<$PrismaModel>
    notIn?: $Enums.BillingPeriod[] | ListEnumBillingPeriodFieldRefInput<$PrismaModel>
    not?: NestedEnumBillingPeriodWithAggregatesFilter<$PrismaModel> | $Enums.BillingPeriod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBillingPeriodFilter<$PrismaModel>
    _max?: NestedEnumBillingPeriodFilter<$PrismaModel>
  }

  export type NestedEnumCardLimitTransactionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CardLimitTransactionType | EnumCardLimitTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CardLimitTransactionType[] | ListEnumCardLimitTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CardLimitTransactionType[] | ListEnumCardLimitTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCardLimitTransactionTypeFilter<$PrismaModel> | $Enums.CardLimitTransactionType
  }

  export type NestedEnumCardLimitTransactionSourceFilter<$PrismaModel = never> = {
    equals?: $Enums.CardLimitTransactionSource | EnumCardLimitTransactionSourceFieldRefInput<$PrismaModel>
    in?: $Enums.CardLimitTransactionSource[] | ListEnumCardLimitTransactionSourceFieldRefInput<$PrismaModel>
    notIn?: $Enums.CardLimitTransactionSource[] | ListEnumCardLimitTransactionSourceFieldRefInput<$PrismaModel>
    not?: NestedEnumCardLimitTransactionSourceFilter<$PrismaModel> | $Enums.CardLimitTransactionSource
  }

  export type NestedEnumCardLimitTransactionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CardLimitTransactionType | EnumCardLimitTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CardLimitTransactionType[] | ListEnumCardLimitTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CardLimitTransactionType[] | ListEnumCardLimitTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCardLimitTransactionTypeWithAggregatesFilter<$PrismaModel> | $Enums.CardLimitTransactionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCardLimitTransactionTypeFilter<$PrismaModel>
    _max?: NestedEnumCardLimitTransactionTypeFilter<$PrismaModel>
  }

  export type NestedEnumCardLimitTransactionSourceWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CardLimitTransactionSource | EnumCardLimitTransactionSourceFieldRefInput<$PrismaModel>
    in?: $Enums.CardLimitTransactionSource[] | ListEnumCardLimitTransactionSourceFieldRefInput<$PrismaModel>
    notIn?: $Enums.CardLimitTransactionSource[] | ListEnumCardLimitTransactionSourceFieldRefInput<$PrismaModel>
    not?: NestedEnumCardLimitTransactionSourceWithAggregatesFilter<$PrismaModel> | $Enums.CardLimitTransactionSource
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCardLimitTransactionSourceFilter<$PrismaModel>
    _max?: NestedEnumCardLimitTransactionSourceFilter<$PrismaModel>
  }

  export type CardLimitTransactionCreateWithoutTenantInput = {
    id?: string
    type: $Enums.CardLimitTransactionType
    source: $Enums.CardLimitTransactionSource
    amount: number
    previousBalance: number
    newBalance: number
    description?: string | null
    createdAt?: Date | string
    createdBy?: string | null
    relatedOrder?: CardOrderCreateNestedOneWithoutCardLimitTransactionsInput
    relatedPlan?: PlanCreateNestedOneWithoutCardLimitTransactionsInput
  }

  export type CardLimitTransactionUncheckedCreateWithoutTenantInput = {
    id?: string
    type: $Enums.CardLimitTransactionType
    source: $Enums.CardLimitTransactionSource
    amount: number
    previousBalance: number
    newBalance: number
    description?: string | null
    relatedOrderId?: string | null
    relatedPlanId?: string | null
    createdAt?: Date | string
    createdBy?: string | null
  }

  export type CardLimitTransactionCreateOrConnectWithoutTenantInput = {
    where: CardLimitTransactionWhereUniqueInput
    create: XOR<CardLimitTransactionCreateWithoutTenantInput, CardLimitTransactionUncheckedCreateWithoutTenantInput>
  }

  export type CardLimitTransactionCreateManyTenantInputEnvelope = {
    data: CardLimitTransactionCreateManyTenantInput | CardLimitTransactionCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type CardOrderCreateWithoutTenantInput = {
    id?: string
    cardType: $Enums.CardType
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    status?: $Enums.OrderStatus
    storeName?: string | null
    storePhone?: string | null
    storeAddress?: string | null
    customDesign?: string | null
    shippingAddress?: string | null
    trackingNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shippedAt?: Date | string | null
    deliveredAt?: Date | string | null
    approvedAt?: Date | string | null
    approvedBy?: string | null
    deductFromBalance?: boolean
    paidAt?: Date | string | null
    sourceType?: $Enums.OrderSourceType
    stripePaymentId?: string | null
    stripeSessionId?: string | null
    cardLimitTransactions?: CardLimitTransactionCreateNestedManyWithoutRelatedOrderInput
  }

  export type CardOrderUncheckedCreateWithoutTenantInput = {
    id?: string
    cardType: $Enums.CardType
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    status?: $Enums.OrderStatus
    storeName?: string | null
    storePhone?: string | null
    storeAddress?: string | null
    customDesign?: string | null
    shippingAddress?: string | null
    trackingNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shippedAt?: Date | string | null
    deliveredAt?: Date | string | null
    approvedAt?: Date | string | null
    approvedBy?: string | null
    deductFromBalance?: boolean
    paidAt?: Date | string | null
    sourceType?: $Enums.OrderSourceType
    stripePaymentId?: string | null
    stripeSessionId?: string | null
    cardLimitTransactions?: CardLimitTransactionUncheckedCreateNestedManyWithoutRelatedOrderInput
  }

  export type CardOrderCreateOrConnectWithoutTenantInput = {
    where: CardOrderWhereUniqueInput
    create: XOR<CardOrderCreateWithoutTenantInput, CardOrderUncheckedCreateWithoutTenantInput>
  }

  export type CardOrderCreateManyTenantInputEnvelope = {
    data: CardOrderCreateManyTenantInput | CardOrderCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type CardCreateWithoutTenantInput = {
    id?: string
    cardUid: string
    activatedAt?: Date | string | null
    status?: $Enums.CardStatus
    qrUrl?: string | null
    balanceCents?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    customer?: CustomerCreateNestedOneWithoutCardsInput
    store?: StoreCreateNestedOneWithoutCardsInput
    transactions?: TransactionCreateNestedManyWithoutCardInput
  }

  export type CardUncheckedCreateWithoutTenantInput = {
    id?: string
    cardUid: string
    customerId?: string | null
    activatedAt?: Date | string | null
    storeId?: string | null
    status?: $Enums.CardStatus
    qrUrl?: string | null
    balanceCents?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionUncheckedCreateNestedManyWithoutCardInput
  }

  export type CardCreateOrConnectWithoutTenantInput = {
    where: CardWhereUniqueInput
    create: XOR<CardCreateWithoutTenantInput, CardUncheckedCreateWithoutTenantInput>
  }

  export type CardCreateManyTenantInputEnvelope = {
    data: CardCreateManyTenantInput | CardCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type CashbackRuleCreateWithoutTenantInput = {
    id?: string
    category: $Enums.TxCategory
    baseRateBps: number
    startAt?: Date | string | null
    endAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CashbackRuleUncheckedCreateWithoutTenantInput = {
    id?: string
    category: $Enums.TxCategory
    baseRateBps: number
    startAt?: Date | string | null
    endAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CashbackRuleCreateOrConnectWithoutTenantInput = {
    where: CashbackRuleWhereUniqueInput
    create: XOR<CashbackRuleCreateWithoutTenantInput, CashbackRuleUncheckedCreateWithoutTenantInput>
  }

  export type CashbackRuleCreateManyTenantInputEnvelope = {
    data: CashbackRuleCreateManyTenantInput | CashbackRuleCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type CustomerCreateWithoutTenantInput = {
    id?: string
    firstName: string
    lastName: string
    phone?: string | null
    email?: string | null
    tier?: $Enums.Tier
    totalSpend?: Decimal | DecimalJsLike | number | string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    cards?: CardCreateNestedManyWithoutCustomerInput
    notifications?: NotificationCreateNestedManyWithoutCustomerInput
    transactions?: TransactionCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutTenantInput = {
    id?: string
    firstName: string
    lastName: string
    phone?: string | null
    email?: string | null
    tier?: $Enums.Tier
    totalSpend?: Decimal | DecimalJsLike | number | string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    cards?: CardUncheckedCreateNestedManyWithoutCustomerInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutCustomerInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutTenantInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutTenantInput, CustomerUncheckedCreateWithoutTenantInput>
  }

  export type CustomerCreateManyTenantInputEnvelope = {
    data: CustomerCreateManyTenantInput | CustomerCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutTenantInput = {
    id?: string
    channel: $Enums.NotifChannel
    template: string
    payload: JsonNullValueInput | InputJsonValue
    status?: $Enums.NotifStatus
    error?: string | null
    createdAt?: Date | string
    sentAt?: Date | string | null
    customer: CustomerCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutTenantInput = {
    id?: string
    customerId: string
    channel: $Enums.NotifChannel
    template: string
    payload: JsonNullValueInput | InputJsonValue
    status?: $Enums.NotifStatus
    error?: string | null
    createdAt?: Date | string
    sentAt?: Date | string | null
  }

  export type NotificationCreateOrConnectWithoutTenantInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutTenantInput, NotificationUncheckedCreateWithoutTenantInput>
  }

  export type NotificationCreateManyTenantInputEnvelope = {
    data: NotificationCreateManyTenantInput | NotificationCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type OfferCreateWithoutTenantInput = {
    id?: string
    name: string
    description?: string | null
    rateMultiplierBps: number
    startAt: Date | string
    endAt: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OfferUncheckedCreateWithoutTenantInput = {
    id?: string
    name: string
    description?: string | null
    rateMultiplierBps: number
    startAt: Date | string
    endAt: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OfferCreateOrConnectWithoutTenantInput = {
    where: OfferWhereUniqueInput
    create: XOR<OfferCreateWithoutTenantInput, OfferUncheckedCreateWithoutTenantInput>
  }

  export type OfferCreateManyTenantInputEnvelope = {
    data: OfferCreateManyTenantInput | OfferCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type StoreCreateWithoutTenantInput = {
    id?: string
    name: string
    address?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    cards?: CardCreateNestedManyWithoutStoreInput
    transactions?: TransactionCreateNestedManyWithoutStoreInput
    users?: UserCreateNestedManyWithoutStoreInput
  }

  export type StoreUncheckedCreateWithoutTenantInput = {
    id?: string
    name: string
    address?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    cards?: CardUncheckedCreateNestedManyWithoutStoreInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutStoreInput
    users?: UserUncheckedCreateNestedManyWithoutStoreInput
  }

  export type StoreCreateOrConnectWithoutTenantInput = {
    where: StoreWhereUniqueInput
    create: XOR<StoreCreateWithoutTenantInput, StoreUncheckedCreateWithoutTenantInput>
  }

  export type StoreCreateManyTenantInputEnvelope = {
    data: StoreCreateManyTenantInput | StoreCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type PlanCreateWithoutTenantsInput = {
    id?: string
    name: string
    description: string
    priceMonthly: number
    billingPeriod?: $Enums.BillingPeriod
    billingPeriodMultiplier?: number
    stripePriceId: string
    features?: PlanCreatefeaturesInput | string[]
    maxStores?: number
    maxStaff?: number
    maxCards?: number
    maxTransactions?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    allowCardOrdering?: boolean
    cardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionCreateNestedManyWithoutRelatedPlanInput
    payments?: PaymentCreateNestedManyWithoutPlanInput
    subscriptionEvents?: SubscriptionEventCreateNestedManyWithoutPlanInput
    previousSubscriptionEvents?: SubscriptionEventCreateNestedManyWithoutPreviousPlanInput
  }

  export type PlanUncheckedCreateWithoutTenantsInput = {
    id?: string
    name: string
    description: string
    priceMonthly: number
    billingPeriod?: $Enums.BillingPeriod
    billingPeriodMultiplier?: number
    stripePriceId: string
    features?: PlanCreatefeaturesInput | string[]
    maxStores?: number
    maxStaff?: number
    maxCards?: number
    maxTransactions?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    allowCardOrdering?: boolean
    cardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionUncheckedCreateNestedManyWithoutRelatedPlanInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPlanInput
    subscriptionEvents?: SubscriptionEventUncheckedCreateNestedManyWithoutPlanInput
    previousSubscriptionEvents?: SubscriptionEventUncheckedCreateNestedManyWithoutPreviousPlanInput
  }

  export type PlanCreateOrConnectWithoutTenantsInput = {
    where: PlanWhereUniqueInput
    create: XOR<PlanCreateWithoutTenantsInput, PlanUncheckedCreateWithoutTenantsInput>
  }

  export type TierRuleCreateWithoutTenantInput = {
    id?: string
    tier: $Enums.Tier
    name: string
    minTotalSpendCents: number
    baseRateBps: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TierRuleUncheckedCreateWithoutTenantInput = {
    id?: string
    tier: $Enums.Tier
    name: string
    minTotalSpendCents: number
    baseRateBps: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TierRuleCreateOrConnectWithoutTenantInput = {
    where: TierRuleWhereUniqueInput
    create: XOR<TierRuleCreateWithoutTenantInput, TierRuleUncheckedCreateWithoutTenantInput>
  }

  export type TierRuleCreateManyTenantInputEnvelope = {
    data: TierRuleCreateManyTenantInput | TierRuleCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type TransactionCreateWithoutTenantInput = {
    id?: string
    type: $Enums.TxType
    category: $Enums.TxCategory
    amountCents: number
    cashbackCents?: number
    beforeBalanceCents: number
    afterBalanceCents: number
    note?: string | null
    sourceIp?: string | null
    createdAt?: Date | string
    card: CardCreateNestedOneWithoutTransactionsInput
    cashier: UserCreateNestedOneWithoutTransactionsProcessedInput
    customer: CustomerCreateNestedOneWithoutTransactionsInput
    store: StoreCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateWithoutTenantInput = {
    id?: string
    storeId: string
    cardId: string
    customerId: string
    cashierId: string
    type: $Enums.TxType
    category: $Enums.TxCategory
    amountCents: number
    cashbackCents?: number
    beforeBalanceCents: number
    afterBalanceCents: number
    note?: string | null
    sourceIp?: string | null
    createdAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutTenantInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutTenantInput, TransactionUncheckedCreateWithoutTenantInput>
  }

  export type TransactionCreateManyTenantInputEnvelope = {
    data: TransactionCreateManyTenantInput | TransactionCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutTenantInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    firstName?: string | null
    lastName?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    transactionsProcessed?: TransactionCreateNestedManyWithoutCashierInput
    store?: StoreCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutTenantInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    storeId?: string | null
    firstName?: string | null
    lastName?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    transactionsProcessed?: TransactionUncheckedCreateNestedManyWithoutCashierInput
  }

  export type UserCreateOrConnectWithoutTenantInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput>
  }

  export type UserCreateManyTenantInputEnvelope = {
    data: UserCreateManyTenantInput | UserCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type PaymentCreateWithoutTenantInput = {
    id?: string
    stripeSubscriptionId?: string | null
    stripeInvoiceId?: string | null
    stripePaymentIntentId?: string | null
    amount: number
    currency?: string
    status: string
    description?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    plan: PlanCreateNestedOneWithoutPaymentsInput
  }

  export type PaymentUncheckedCreateWithoutTenantInput = {
    id?: string
    planId: string
    stripeSubscriptionId?: string | null
    stripeInvoiceId?: string | null
    stripePaymentIntentId?: string | null
    amount: number
    currency?: string
    status: string
    description?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentCreateOrConnectWithoutTenantInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutTenantInput, PaymentUncheckedCreateWithoutTenantInput>
  }

  export type PaymentCreateManyTenantInputEnvelope = {
    data: PaymentCreateManyTenantInput | PaymentCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type SubscriptionEventCreateWithoutTenantInput = {
    id?: string
    eventType: string
    stripeSubscriptionId?: string | null
    metadata?: string | null
    createdAt?: Date | string
    plan: PlanCreateNestedOneWithoutSubscriptionEventsInput
    previousPlan?: PlanCreateNestedOneWithoutPreviousSubscriptionEventsInput
  }

  export type SubscriptionEventUncheckedCreateWithoutTenantInput = {
    id?: string
    planId: string
    eventType: string
    previousPlanId?: string | null
    stripeSubscriptionId?: string | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type SubscriptionEventCreateOrConnectWithoutTenantInput = {
    where: SubscriptionEventWhereUniqueInput
    create: XOR<SubscriptionEventCreateWithoutTenantInput, SubscriptionEventUncheckedCreateWithoutTenantInput>
  }

  export type SubscriptionEventCreateManyTenantInputEnvelope = {
    data: SubscriptionEventCreateManyTenantInput | SubscriptionEventCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type CardLimitTransactionUpsertWithWhereUniqueWithoutTenantInput = {
    where: CardLimitTransactionWhereUniqueInput
    update: XOR<CardLimitTransactionUpdateWithoutTenantInput, CardLimitTransactionUncheckedUpdateWithoutTenantInput>
    create: XOR<CardLimitTransactionCreateWithoutTenantInput, CardLimitTransactionUncheckedCreateWithoutTenantInput>
  }

  export type CardLimitTransactionUpdateWithWhereUniqueWithoutTenantInput = {
    where: CardLimitTransactionWhereUniqueInput
    data: XOR<CardLimitTransactionUpdateWithoutTenantInput, CardLimitTransactionUncheckedUpdateWithoutTenantInput>
  }

  export type CardLimitTransactionUpdateManyWithWhereWithoutTenantInput = {
    where: CardLimitTransactionScalarWhereInput
    data: XOR<CardLimitTransactionUpdateManyMutationInput, CardLimitTransactionUncheckedUpdateManyWithoutTenantInput>
  }

  export type CardLimitTransactionScalarWhereInput = {
    AND?: CardLimitTransactionScalarWhereInput | CardLimitTransactionScalarWhereInput[]
    OR?: CardLimitTransactionScalarWhereInput[]
    NOT?: CardLimitTransactionScalarWhereInput | CardLimitTransactionScalarWhereInput[]
    id?: StringFilter<"CardLimitTransaction"> | string
    tenantId?: StringFilter<"CardLimitTransaction"> | string
    type?: EnumCardLimitTransactionTypeFilter<"CardLimitTransaction"> | $Enums.CardLimitTransactionType
    source?: EnumCardLimitTransactionSourceFilter<"CardLimitTransaction"> | $Enums.CardLimitTransactionSource
    amount?: IntFilter<"CardLimitTransaction"> | number
    previousBalance?: IntFilter<"CardLimitTransaction"> | number
    newBalance?: IntFilter<"CardLimitTransaction"> | number
    description?: StringNullableFilter<"CardLimitTransaction"> | string | null
    relatedOrderId?: StringNullableFilter<"CardLimitTransaction"> | string | null
    relatedPlanId?: StringNullableFilter<"CardLimitTransaction"> | string | null
    createdAt?: DateTimeFilter<"CardLimitTransaction"> | Date | string
    createdBy?: StringNullableFilter<"CardLimitTransaction"> | string | null
  }

  export type CardOrderUpsertWithWhereUniqueWithoutTenantInput = {
    where: CardOrderWhereUniqueInput
    update: XOR<CardOrderUpdateWithoutTenantInput, CardOrderUncheckedUpdateWithoutTenantInput>
    create: XOR<CardOrderCreateWithoutTenantInput, CardOrderUncheckedCreateWithoutTenantInput>
  }

  export type CardOrderUpdateWithWhereUniqueWithoutTenantInput = {
    where: CardOrderWhereUniqueInput
    data: XOR<CardOrderUpdateWithoutTenantInput, CardOrderUncheckedUpdateWithoutTenantInput>
  }

  export type CardOrderUpdateManyWithWhereWithoutTenantInput = {
    where: CardOrderScalarWhereInput
    data: XOR<CardOrderUpdateManyMutationInput, CardOrderUncheckedUpdateManyWithoutTenantInput>
  }

  export type CardOrderScalarWhereInput = {
    AND?: CardOrderScalarWhereInput | CardOrderScalarWhereInput[]
    OR?: CardOrderScalarWhereInput[]
    NOT?: CardOrderScalarWhereInput | CardOrderScalarWhereInput[]
    id?: StringFilter<"CardOrder"> | string
    tenantId?: StringFilter<"CardOrder"> | string
    cardType?: EnumCardTypeFilter<"CardOrder"> | $Enums.CardType
    quantity?: IntFilter<"CardOrder"> | number
    unitPrice?: DecimalFilter<"CardOrder"> | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFilter<"CardOrder"> | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFilter<"CardOrder"> | $Enums.OrderStatus
    storeName?: StringNullableFilter<"CardOrder"> | string | null
    storePhone?: StringNullableFilter<"CardOrder"> | string | null
    storeAddress?: StringNullableFilter<"CardOrder"> | string | null
    customDesign?: StringNullableFilter<"CardOrder"> | string | null
    shippingAddress?: StringNullableFilter<"CardOrder"> | string | null
    trackingNumber?: StringNullableFilter<"CardOrder"> | string | null
    createdAt?: DateTimeFilter<"CardOrder"> | Date | string
    updatedAt?: DateTimeFilter<"CardOrder"> | Date | string
    shippedAt?: DateTimeNullableFilter<"CardOrder"> | Date | string | null
    deliveredAt?: DateTimeNullableFilter<"CardOrder"> | Date | string | null
    approvedAt?: DateTimeNullableFilter<"CardOrder"> | Date | string | null
    approvedBy?: StringNullableFilter<"CardOrder"> | string | null
    deductFromBalance?: BoolFilter<"CardOrder"> | boolean
    paidAt?: DateTimeNullableFilter<"CardOrder"> | Date | string | null
    sourceType?: EnumOrderSourceTypeFilter<"CardOrder"> | $Enums.OrderSourceType
    stripePaymentId?: StringNullableFilter<"CardOrder"> | string | null
    stripeSessionId?: StringNullableFilter<"CardOrder"> | string | null
  }

  export type CardUpsertWithWhereUniqueWithoutTenantInput = {
    where: CardWhereUniqueInput
    update: XOR<CardUpdateWithoutTenantInput, CardUncheckedUpdateWithoutTenantInput>
    create: XOR<CardCreateWithoutTenantInput, CardUncheckedCreateWithoutTenantInput>
  }

  export type CardUpdateWithWhereUniqueWithoutTenantInput = {
    where: CardWhereUniqueInput
    data: XOR<CardUpdateWithoutTenantInput, CardUncheckedUpdateWithoutTenantInput>
  }

  export type CardUpdateManyWithWhereWithoutTenantInput = {
    where: CardScalarWhereInput
    data: XOR<CardUpdateManyMutationInput, CardUncheckedUpdateManyWithoutTenantInput>
  }

  export type CardScalarWhereInput = {
    AND?: CardScalarWhereInput | CardScalarWhereInput[]
    OR?: CardScalarWhereInput[]
    NOT?: CardScalarWhereInput | CardScalarWhereInput[]
    id?: StringFilter<"Card"> | string
    tenantId?: StringFilter<"Card"> | string
    cardUid?: StringFilter<"Card"> | string
    customerId?: StringNullableFilter<"Card"> | string | null
    activatedAt?: DateTimeNullableFilter<"Card"> | Date | string | null
    storeId?: StringNullableFilter<"Card"> | string | null
    status?: EnumCardStatusFilter<"Card"> | $Enums.CardStatus
    qrUrl?: StringNullableFilter<"Card"> | string | null
    balanceCents?: IntFilter<"Card"> | number
    createdAt?: DateTimeFilter<"Card"> | Date | string
    updatedAt?: DateTimeFilter<"Card"> | Date | string
  }

  export type CashbackRuleUpsertWithWhereUniqueWithoutTenantInput = {
    where: CashbackRuleWhereUniqueInput
    update: XOR<CashbackRuleUpdateWithoutTenantInput, CashbackRuleUncheckedUpdateWithoutTenantInput>
    create: XOR<CashbackRuleCreateWithoutTenantInput, CashbackRuleUncheckedCreateWithoutTenantInput>
  }

  export type CashbackRuleUpdateWithWhereUniqueWithoutTenantInput = {
    where: CashbackRuleWhereUniqueInput
    data: XOR<CashbackRuleUpdateWithoutTenantInput, CashbackRuleUncheckedUpdateWithoutTenantInput>
  }

  export type CashbackRuleUpdateManyWithWhereWithoutTenantInput = {
    where: CashbackRuleScalarWhereInput
    data: XOR<CashbackRuleUpdateManyMutationInput, CashbackRuleUncheckedUpdateManyWithoutTenantInput>
  }

  export type CashbackRuleScalarWhereInput = {
    AND?: CashbackRuleScalarWhereInput | CashbackRuleScalarWhereInput[]
    OR?: CashbackRuleScalarWhereInput[]
    NOT?: CashbackRuleScalarWhereInput | CashbackRuleScalarWhereInput[]
    id?: StringFilter<"CashbackRule"> | string
    tenantId?: StringFilter<"CashbackRule"> | string
    category?: EnumTxCategoryFilter<"CashbackRule"> | $Enums.TxCategory
    baseRateBps?: IntFilter<"CashbackRule"> | number
    startAt?: DateTimeNullableFilter<"CashbackRule"> | Date | string | null
    endAt?: DateTimeNullableFilter<"CashbackRule"> | Date | string | null
    isActive?: BoolFilter<"CashbackRule"> | boolean
    createdAt?: DateTimeFilter<"CashbackRule"> | Date | string
    updatedAt?: DateTimeFilter<"CashbackRule"> | Date | string
  }

  export type CustomerUpsertWithWhereUniqueWithoutTenantInput = {
    where: CustomerWhereUniqueInput
    update: XOR<CustomerUpdateWithoutTenantInput, CustomerUncheckedUpdateWithoutTenantInput>
    create: XOR<CustomerCreateWithoutTenantInput, CustomerUncheckedCreateWithoutTenantInput>
  }

  export type CustomerUpdateWithWhereUniqueWithoutTenantInput = {
    where: CustomerWhereUniqueInput
    data: XOR<CustomerUpdateWithoutTenantInput, CustomerUncheckedUpdateWithoutTenantInput>
  }

  export type CustomerUpdateManyWithWhereWithoutTenantInput = {
    where: CustomerScalarWhereInput
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyWithoutTenantInput>
  }

  export type CustomerScalarWhereInput = {
    AND?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
    OR?: CustomerScalarWhereInput[]
    NOT?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
    id?: StringFilter<"Customer"> | string
    tenantId?: StringFilter<"Customer"> | string
    firstName?: StringFilter<"Customer"> | string
    lastName?: StringFilter<"Customer"> | string
    phone?: StringNullableFilter<"Customer"> | string | null
    email?: StringNullableFilter<"Customer"> | string | null
    tier?: EnumTierFilter<"Customer"> | $Enums.Tier
    totalSpend?: DecimalFilter<"Customer"> | Decimal | DecimalJsLike | number | string
    active?: BoolFilter<"Customer"> | boolean
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutTenantInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutTenantInput, NotificationUncheckedUpdateWithoutTenantInput>
    create: XOR<NotificationCreateWithoutTenantInput, NotificationUncheckedCreateWithoutTenantInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutTenantInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutTenantInput, NotificationUncheckedUpdateWithoutTenantInput>
  }

  export type NotificationUpdateManyWithWhereWithoutTenantInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutTenantInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    tenantId?: StringFilter<"Notification"> | string
    customerId?: StringFilter<"Notification"> | string
    channel?: EnumNotifChannelFilter<"Notification"> | $Enums.NotifChannel
    template?: StringFilter<"Notification"> | string
    payload?: JsonFilter<"Notification">
    status?: EnumNotifStatusFilter<"Notification"> | $Enums.NotifStatus
    error?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    sentAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
  }

  export type OfferUpsertWithWhereUniqueWithoutTenantInput = {
    where: OfferWhereUniqueInput
    update: XOR<OfferUpdateWithoutTenantInput, OfferUncheckedUpdateWithoutTenantInput>
    create: XOR<OfferCreateWithoutTenantInput, OfferUncheckedCreateWithoutTenantInput>
  }

  export type OfferUpdateWithWhereUniqueWithoutTenantInput = {
    where: OfferWhereUniqueInput
    data: XOR<OfferUpdateWithoutTenantInput, OfferUncheckedUpdateWithoutTenantInput>
  }

  export type OfferUpdateManyWithWhereWithoutTenantInput = {
    where: OfferScalarWhereInput
    data: XOR<OfferUpdateManyMutationInput, OfferUncheckedUpdateManyWithoutTenantInput>
  }

  export type OfferScalarWhereInput = {
    AND?: OfferScalarWhereInput | OfferScalarWhereInput[]
    OR?: OfferScalarWhereInput[]
    NOT?: OfferScalarWhereInput | OfferScalarWhereInput[]
    id?: StringFilter<"Offer"> | string
    tenantId?: StringFilter<"Offer"> | string
    name?: StringFilter<"Offer"> | string
    description?: StringNullableFilter<"Offer"> | string | null
    rateMultiplierBps?: IntFilter<"Offer"> | number
    startAt?: DateTimeFilter<"Offer"> | Date | string
    endAt?: DateTimeFilter<"Offer"> | Date | string
    isActive?: BoolFilter<"Offer"> | boolean
    createdAt?: DateTimeFilter<"Offer"> | Date | string
    updatedAt?: DateTimeFilter<"Offer"> | Date | string
  }

  export type StoreUpsertWithWhereUniqueWithoutTenantInput = {
    where: StoreWhereUniqueInput
    update: XOR<StoreUpdateWithoutTenantInput, StoreUncheckedUpdateWithoutTenantInput>
    create: XOR<StoreCreateWithoutTenantInput, StoreUncheckedCreateWithoutTenantInput>
  }

  export type StoreUpdateWithWhereUniqueWithoutTenantInput = {
    where: StoreWhereUniqueInput
    data: XOR<StoreUpdateWithoutTenantInput, StoreUncheckedUpdateWithoutTenantInput>
  }

  export type StoreUpdateManyWithWhereWithoutTenantInput = {
    where: StoreScalarWhereInput
    data: XOR<StoreUpdateManyMutationInput, StoreUncheckedUpdateManyWithoutTenantInput>
  }

  export type StoreScalarWhereInput = {
    AND?: StoreScalarWhereInput | StoreScalarWhereInput[]
    OR?: StoreScalarWhereInput[]
    NOT?: StoreScalarWhereInput | StoreScalarWhereInput[]
    id?: StringFilter<"Store"> | string
    tenantId?: StringFilter<"Store"> | string
    name?: StringFilter<"Store"> | string
    address?: StringNullableFilter<"Store"> | string | null
    active?: BoolFilter<"Store"> | boolean
    createdAt?: DateTimeFilter<"Store"> | Date | string
    updatedAt?: DateTimeFilter<"Store"> | Date | string
  }

  export type PlanUpsertWithoutTenantsInput = {
    update: XOR<PlanUpdateWithoutTenantsInput, PlanUncheckedUpdateWithoutTenantsInput>
    create: XOR<PlanCreateWithoutTenantsInput, PlanUncheckedCreateWithoutTenantsInput>
    where?: PlanWhereInput
  }

  export type PlanUpdateToOneWithWhereWithoutTenantsInput = {
    where?: PlanWhereInput
    data: XOR<PlanUpdateWithoutTenantsInput, PlanUncheckedUpdateWithoutTenantsInput>
  }

  export type PlanUpdateWithoutTenantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priceMonthly?: IntFieldUpdateOperationsInput | number
    billingPeriod?: EnumBillingPeriodFieldUpdateOperationsInput | $Enums.BillingPeriod
    billingPeriodMultiplier?: IntFieldUpdateOperationsInput | number
    stripePriceId?: StringFieldUpdateOperationsInput | string
    features?: PlanUpdatefeaturesInput | string[]
    maxStores?: IntFieldUpdateOperationsInput | number
    maxStaff?: IntFieldUpdateOperationsInput | number
    maxCards?: IntFieldUpdateOperationsInput | number
    maxTransactions?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowCardOrdering?: BoolFieldUpdateOperationsInput | boolean
    cardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUpdateManyWithoutRelatedPlanNestedInput
    payments?: PaymentUpdateManyWithoutPlanNestedInput
    subscriptionEvents?: SubscriptionEventUpdateManyWithoutPlanNestedInput
    previousSubscriptionEvents?: SubscriptionEventUpdateManyWithoutPreviousPlanNestedInput
  }

  export type PlanUncheckedUpdateWithoutTenantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priceMonthly?: IntFieldUpdateOperationsInput | number
    billingPeriod?: EnumBillingPeriodFieldUpdateOperationsInput | $Enums.BillingPeriod
    billingPeriodMultiplier?: IntFieldUpdateOperationsInput | number
    stripePriceId?: StringFieldUpdateOperationsInput | string
    features?: PlanUpdatefeaturesInput | string[]
    maxStores?: IntFieldUpdateOperationsInput | number
    maxStaff?: IntFieldUpdateOperationsInput | number
    maxCards?: IntFieldUpdateOperationsInput | number
    maxTransactions?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowCardOrdering?: BoolFieldUpdateOperationsInput | boolean
    cardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUncheckedUpdateManyWithoutRelatedPlanNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPlanNestedInput
    subscriptionEvents?: SubscriptionEventUncheckedUpdateManyWithoutPlanNestedInput
    previousSubscriptionEvents?: SubscriptionEventUncheckedUpdateManyWithoutPreviousPlanNestedInput
  }

  export type TierRuleUpsertWithWhereUniqueWithoutTenantInput = {
    where: TierRuleWhereUniqueInput
    update: XOR<TierRuleUpdateWithoutTenantInput, TierRuleUncheckedUpdateWithoutTenantInput>
    create: XOR<TierRuleCreateWithoutTenantInput, TierRuleUncheckedCreateWithoutTenantInput>
  }

  export type TierRuleUpdateWithWhereUniqueWithoutTenantInput = {
    where: TierRuleWhereUniqueInput
    data: XOR<TierRuleUpdateWithoutTenantInput, TierRuleUncheckedUpdateWithoutTenantInput>
  }

  export type TierRuleUpdateManyWithWhereWithoutTenantInput = {
    where: TierRuleScalarWhereInput
    data: XOR<TierRuleUpdateManyMutationInput, TierRuleUncheckedUpdateManyWithoutTenantInput>
  }

  export type TierRuleScalarWhereInput = {
    AND?: TierRuleScalarWhereInput | TierRuleScalarWhereInput[]
    OR?: TierRuleScalarWhereInput[]
    NOT?: TierRuleScalarWhereInput | TierRuleScalarWhereInput[]
    id?: StringFilter<"TierRule"> | string
    tenantId?: StringFilter<"TierRule"> | string
    tier?: EnumTierFilter<"TierRule"> | $Enums.Tier
    name?: StringFilter<"TierRule"> | string
    minTotalSpendCents?: IntFilter<"TierRule"> | number
    baseRateBps?: IntFilter<"TierRule"> | number
    isActive?: BoolFilter<"TierRule"> | boolean
    createdAt?: DateTimeFilter<"TierRule"> | Date | string
    updatedAt?: DateTimeFilter<"TierRule"> | Date | string
  }

  export type TransactionUpsertWithWhereUniqueWithoutTenantInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutTenantInput, TransactionUncheckedUpdateWithoutTenantInput>
    create: XOR<TransactionCreateWithoutTenantInput, TransactionUncheckedCreateWithoutTenantInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutTenantInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutTenantInput, TransactionUncheckedUpdateWithoutTenantInput>
  }

  export type TransactionUpdateManyWithWhereWithoutTenantInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutTenantInput>
  }

  export type TransactionScalarWhereInput = {
    AND?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    OR?: TransactionScalarWhereInput[]
    NOT?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    id?: StringFilter<"Transaction"> | string
    tenantId?: StringFilter<"Transaction"> | string
    storeId?: StringFilter<"Transaction"> | string
    cardId?: StringFilter<"Transaction"> | string
    customerId?: StringFilter<"Transaction"> | string
    cashierId?: StringFilter<"Transaction"> | string
    type?: EnumTxTypeFilter<"Transaction"> | $Enums.TxType
    category?: EnumTxCategoryFilter<"Transaction"> | $Enums.TxCategory
    amountCents?: IntFilter<"Transaction"> | number
    cashbackCents?: IntFilter<"Transaction"> | number
    beforeBalanceCents?: IntFilter<"Transaction"> | number
    afterBalanceCents?: IntFilter<"Transaction"> | number
    note?: StringNullableFilter<"Transaction"> | string | null
    sourceIp?: StringNullableFilter<"Transaction"> | string | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
  }

  export type UserUpsertWithWhereUniqueWithoutTenantInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutTenantInput, UserUncheckedUpdateWithoutTenantInput>
    create: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput>
  }

  export type UserUpdateWithWhereUniqueWithoutTenantInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutTenantInput, UserUncheckedUpdateWithoutTenantInput>
  }

  export type UserUpdateManyWithWhereWithoutTenantInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutTenantInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    tenantId?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    storeId?: StringNullableFilter<"User"> | string | null
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    active?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
  }

  export type PaymentUpsertWithWhereUniqueWithoutTenantInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutTenantInput, PaymentUncheckedUpdateWithoutTenantInput>
    create: XOR<PaymentCreateWithoutTenantInput, PaymentUncheckedCreateWithoutTenantInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutTenantInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutTenantInput, PaymentUncheckedUpdateWithoutTenantInput>
  }

  export type PaymentUpdateManyWithWhereWithoutTenantInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutTenantInput>
  }

  export type PaymentScalarWhereInput = {
    AND?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    OR?: PaymentScalarWhereInput[]
    NOT?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    id?: StringFilter<"Payment"> | string
    tenantId?: StringFilter<"Payment"> | string
    planId?: StringFilter<"Payment"> | string
    stripeSubscriptionId?: StringNullableFilter<"Payment"> | string | null
    stripeInvoiceId?: StringNullableFilter<"Payment"> | string | null
    stripePaymentIntentId?: StringNullableFilter<"Payment"> | string | null
    amount?: IntFilter<"Payment"> | number
    currency?: StringFilter<"Payment"> | string
    status?: StringFilter<"Payment"> | string
    description?: StringNullableFilter<"Payment"> | string | null
    metadata?: StringNullableFilter<"Payment"> | string | null
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
  }

  export type SubscriptionEventUpsertWithWhereUniqueWithoutTenantInput = {
    where: SubscriptionEventWhereUniqueInput
    update: XOR<SubscriptionEventUpdateWithoutTenantInput, SubscriptionEventUncheckedUpdateWithoutTenantInput>
    create: XOR<SubscriptionEventCreateWithoutTenantInput, SubscriptionEventUncheckedCreateWithoutTenantInput>
  }

  export type SubscriptionEventUpdateWithWhereUniqueWithoutTenantInput = {
    where: SubscriptionEventWhereUniqueInput
    data: XOR<SubscriptionEventUpdateWithoutTenantInput, SubscriptionEventUncheckedUpdateWithoutTenantInput>
  }

  export type SubscriptionEventUpdateManyWithWhereWithoutTenantInput = {
    where: SubscriptionEventScalarWhereInput
    data: XOR<SubscriptionEventUpdateManyMutationInput, SubscriptionEventUncheckedUpdateManyWithoutTenantInput>
  }

  export type SubscriptionEventScalarWhereInput = {
    AND?: SubscriptionEventScalarWhereInput | SubscriptionEventScalarWhereInput[]
    OR?: SubscriptionEventScalarWhereInput[]
    NOT?: SubscriptionEventScalarWhereInput | SubscriptionEventScalarWhereInput[]
    id?: StringFilter<"SubscriptionEvent"> | string
    tenantId?: StringFilter<"SubscriptionEvent"> | string
    planId?: StringFilter<"SubscriptionEvent"> | string
    eventType?: StringFilter<"SubscriptionEvent"> | string
    previousPlanId?: StringNullableFilter<"SubscriptionEvent"> | string | null
    stripeSubscriptionId?: StringNullableFilter<"SubscriptionEvent"> | string | null
    metadata?: StringNullableFilter<"SubscriptionEvent"> | string | null
    createdAt?: DateTimeFilter<"SubscriptionEvent"> | Date | string
  }

  export type CardCreateWithoutStoreInput = {
    id?: string
    cardUid: string
    activatedAt?: Date | string | null
    status?: $Enums.CardStatus
    qrUrl?: string | null
    balanceCents?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    customer?: CustomerCreateNestedOneWithoutCardsInput
    tenant: TenantCreateNestedOneWithoutCardsInput
    transactions?: TransactionCreateNestedManyWithoutCardInput
  }

  export type CardUncheckedCreateWithoutStoreInput = {
    id?: string
    tenantId: string
    cardUid: string
    customerId?: string | null
    activatedAt?: Date | string | null
    status?: $Enums.CardStatus
    qrUrl?: string | null
    balanceCents?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionUncheckedCreateNestedManyWithoutCardInput
  }

  export type CardCreateOrConnectWithoutStoreInput = {
    where: CardWhereUniqueInput
    create: XOR<CardCreateWithoutStoreInput, CardUncheckedCreateWithoutStoreInput>
  }

  export type CardCreateManyStoreInputEnvelope = {
    data: CardCreateManyStoreInput | CardCreateManyStoreInput[]
    skipDuplicates?: boolean
  }

  export type TenantCreateWithoutStoresInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    graceEndsAt?: Date | string | null
    slug: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    trialEndsAt?: Date | string | null
    freeTrialActivations?: number
    freeTrialCardsCreated?: number
    freeTrialLimit?: number
    trialExpiredNotified?: boolean
    currentCardBalance?: number
    subscriptionCardLimit?: number
    subscriptionCardsUsed?: number
    totalCardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionCreateNestedManyWithoutTenantInput
    cardOrders?: CardOrderCreateNestedManyWithoutTenantInput
    cards?: CardCreateNestedManyWithoutTenantInput
    cashbackRules?: CashbackRuleCreateNestedManyWithoutTenantInput
    customers?: CustomerCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    offers?: OfferCreateNestedManyWithoutTenantInput
    plan?: PlanCreateNestedOneWithoutTenantsInput
    tierRules?: TierRuleCreateNestedManyWithoutTenantInput
    transactions?: TransactionCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    payments?: PaymentCreateNestedManyWithoutTenantInput
    subscriptionEvents?: SubscriptionEventCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutStoresInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    graceEndsAt?: Date | string | null
    planId?: string | null
    slug: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    trialEndsAt?: Date | string | null
    freeTrialActivations?: number
    freeTrialCardsCreated?: number
    freeTrialLimit?: number
    trialExpiredNotified?: boolean
    currentCardBalance?: number
    subscriptionCardLimit?: number
    subscriptionCardsUsed?: number
    totalCardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionUncheckedCreateNestedManyWithoutTenantInput
    cardOrders?: CardOrderUncheckedCreateNestedManyWithoutTenantInput
    cards?: CardUncheckedCreateNestedManyWithoutTenantInput
    cashbackRules?: CashbackRuleUncheckedCreateNestedManyWithoutTenantInput
    customers?: CustomerUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    offers?: OfferUncheckedCreateNestedManyWithoutTenantInput
    tierRules?: TierRuleUncheckedCreateNestedManyWithoutTenantInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    payments?: PaymentUncheckedCreateNestedManyWithoutTenantInput
    subscriptionEvents?: SubscriptionEventUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutStoresInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutStoresInput, TenantUncheckedCreateWithoutStoresInput>
  }

  export type TransactionCreateWithoutStoreInput = {
    id?: string
    type: $Enums.TxType
    category: $Enums.TxCategory
    amountCents: number
    cashbackCents?: number
    beforeBalanceCents: number
    afterBalanceCents: number
    note?: string | null
    sourceIp?: string | null
    createdAt?: Date | string
    card: CardCreateNestedOneWithoutTransactionsInput
    cashier: UserCreateNestedOneWithoutTransactionsProcessedInput
    customer: CustomerCreateNestedOneWithoutTransactionsInput
    tenant: TenantCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateWithoutStoreInput = {
    id?: string
    tenantId: string
    cardId: string
    customerId: string
    cashierId: string
    type: $Enums.TxType
    category: $Enums.TxCategory
    amountCents: number
    cashbackCents?: number
    beforeBalanceCents: number
    afterBalanceCents: number
    note?: string | null
    sourceIp?: string | null
    createdAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutStoreInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutStoreInput, TransactionUncheckedCreateWithoutStoreInput>
  }

  export type TransactionCreateManyStoreInputEnvelope = {
    data: TransactionCreateManyStoreInput | TransactionCreateManyStoreInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutStoreInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    firstName?: string | null
    lastName?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    transactionsProcessed?: TransactionCreateNestedManyWithoutCashierInput
    tenant: TenantCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutStoreInput = {
    id?: string
    tenantId: string
    email: string
    passwordHash: string
    role: $Enums.Role
    firstName?: string | null
    lastName?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    transactionsProcessed?: TransactionUncheckedCreateNestedManyWithoutCashierInput
  }

  export type UserCreateOrConnectWithoutStoreInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStoreInput, UserUncheckedCreateWithoutStoreInput>
  }

  export type UserCreateManyStoreInputEnvelope = {
    data: UserCreateManyStoreInput | UserCreateManyStoreInput[]
    skipDuplicates?: boolean
  }

  export type CardUpsertWithWhereUniqueWithoutStoreInput = {
    where: CardWhereUniqueInput
    update: XOR<CardUpdateWithoutStoreInput, CardUncheckedUpdateWithoutStoreInput>
    create: XOR<CardCreateWithoutStoreInput, CardUncheckedCreateWithoutStoreInput>
  }

  export type CardUpdateWithWhereUniqueWithoutStoreInput = {
    where: CardWhereUniqueInput
    data: XOR<CardUpdateWithoutStoreInput, CardUncheckedUpdateWithoutStoreInput>
  }

  export type CardUpdateManyWithWhereWithoutStoreInput = {
    where: CardScalarWhereInput
    data: XOR<CardUpdateManyMutationInput, CardUncheckedUpdateManyWithoutStoreInput>
  }

  export type TenantUpsertWithoutStoresInput = {
    update: XOR<TenantUpdateWithoutStoresInput, TenantUncheckedUpdateWithoutStoresInput>
    create: XOR<TenantCreateWithoutStoresInput, TenantUncheckedCreateWithoutStoresInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutStoresInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutStoresInput, TenantUncheckedUpdateWithoutStoresInput>
  }

  export type TenantUpdateWithoutStoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graceEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slug?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeTrialActivations?: IntFieldUpdateOperationsInput | number
    freeTrialCardsCreated?: IntFieldUpdateOperationsInput | number
    freeTrialLimit?: IntFieldUpdateOperationsInput | number
    trialExpiredNotified?: BoolFieldUpdateOperationsInput | boolean
    currentCardBalance?: IntFieldUpdateOperationsInput | number
    subscriptionCardLimit?: IntFieldUpdateOperationsInput | number
    subscriptionCardsUsed?: IntFieldUpdateOperationsInput | number
    totalCardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUpdateManyWithoutTenantNestedInput
    cardOrders?: CardOrderUpdateManyWithoutTenantNestedInput
    cards?: CardUpdateManyWithoutTenantNestedInput
    cashbackRules?: CashbackRuleUpdateManyWithoutTenantNestedInput
    customers?: CustomerUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    offers?: OfferUpdateManyWithoutTenantNestedInput
    plan?: PlanUpdateOneWithoutTenantsNestedInput
    tierRules?: TierRuleUpdateManyWithoutTenantNestedInput
    transactions?: TransactionUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    payments?: PaymentUpdateManyWithoutTenantNestedInput
    subscriptionEvents?: SubscriptionEventUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutStoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graceEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    planId?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeTrialActivations?: IntFieldUpdateOperationsInput | number
    freeTrialCardsCreated?: IntFieldUpdateOperationsInput | number
    freeTrialLimit?: IntFieldUpdateOperationsInput | number
    trialExpiredNotified?: BoolFieldUpdateOperationsInput | boolean
    currentCardBalance?: IntFieldUpdateOperationsInput | number
    subscriptionCardLimit?: IntFieldUpdateOperationsInput | number
    subscriptionCardsUsed?: IntFieldUpdateOperationsInput | number
    totalCardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUncheckedUpdateManyWithoutTenantNestedInput
    cardOrders?: CardOrderUncheckedUpdateManyWithoutTenantNestedInput
    cards?: CardUncheckedUpdateManyWithoutTenantNestedInput
    cashbackRules?: CashbackRuleUncheckedUpdateManyWithoutTenantNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    offers?: OfferUncheckedUpdateManyWithoutTenantNestedInput
    tierRules?: TierRuleUncheckedUpdateManyWithoutTenantNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutTenantNestedInput
    subscriptionEvents?: SubscriptionEventUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TransactionUpsertWithWhereUniqueWithoutStoreInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutStoreInput, TransactionUncheckedUpdateWithoutStoreInput>
    create: XOR<TransactionCreateWithoutStoreInput, TransactionUncheckedCreateWithoutStoreInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutStoreInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutStoreInput, TransactionUncheckedUpdateWithoutStoreInput>
  }

  export type TransactionUpdateManyWithWhereWithoutStoreInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutStoreInput>
  }

  export type UserUpsertWithWhereUniqueWithoutStoreInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutStoreInput, UserUncheckedUpdateWithoutStoreInput>
    create: XOR<UserCreateWithoutStoreInput, UserUncheckedCreateWithoutStoreInput>
  }

  export type UserUpdateWithWhereUniqueWithoutStoreInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutStoreInput, UserUncheckedUpdateWithoutStoreInput>
  }

  export type UserUpdateManyWithWhereWithoutStoreInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutStoreInput>
  }

  export type TransactionCreateWithoutCashierInput = {
    id?: string
    type: $Enums.TxType
    category: $Enums.TxCategory
    amountCents: number
    cashbackCents?: number
    beforeBalanceCents: number
    afterBalanceCents: number
    note?: string | null
    sourceIp?: string | null
    createdAt?: Date | string
    card: CardCreateNestedOneWithoutTransactionsInput
    customer: CustomerCreateNestedOneWithoutTransactionsInput
    store: StoreCreateNestedOneWithoutTransactionsInput
    tenant: TenantCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateWithoutCashierInput = {
    id?: string
    tenantId: string
    storeId: string
    cardId: string
    customerId: string
    type: $Enums.TxType
    category: $Enums.TxCategory
    amountCents: number
    cashbackCents?: number
    beforeBalanceCents: number
    afterBalanceCents: number
    note?: string | null
    sourceIp?: string | null
    createdAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutCashierInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutCashierInput, TransactionUncheckedCreateWithoutCashierInput>
  }

  export type TransactionCreateManyCashierInputEnvelope = {
    data: TransactionCreateManyCashierInput | TransactionCreateManyCashierInput[]
    skipDuplicates?: boolean
  }

  export type StoreCreateWithoutUsersInput = {
    id?: string
    name: string
    address?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    cards?: CardCreateNestedManyWithoutStoreInput
    tenant: TenantCreateNestedOneWithoutStoresInput
    transactions?: TransactionCreateNestedManyWithoutStoreInput
  }

  export type StoreUncheckedCreateWithoutUsersInput = {
    id?: string
    tenantId: string
    name: string
    address?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    cards?: CardUncheckedCreateNestedManyWithoutStoreInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutStoreInput
  }

  export type StoreCreateOrConnectWithoutUsersInput = {
    where: StoreWhereUniqueInput
    create: XOR<StoreCreateWithoutUsersInput, StoreUncheckedCreateWithoutUsersInput>
  }

  export type TenantCreateWithoutUsersInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    graceEndsAt?: Date | string | null
    slug: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    trialEndsAt?: Date | string | null
    freeTrialActivations?: number
    freeTrialCardsCreated?: number
    freeTrialLimit?: number
    trialExpiredNotified?: boolean
    currentCardBalance?: number
    subscriptionCardLimit?: number
    subscriptionCardsUsed?: number
    totalCardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionCreateNestedManyWithoutTenantInput
    cardOrders?: CardOrderCreateNestedManyWithoutTenantInput
    cards?: CardCreateNestedManyWithoutTenantInput
    cashbackRules?: CashbackRuleCreateNestedManyWithoutTenantInput
    customers?: CustomerCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    offers?: OfferCreateNestedManyWithoutTenantInput
    stores?: StoreCreateNestedManyWithoutTenantInput
    plan?: PlanCreateNestedOneWithoutTenantsInput
    tierRules?: TierRuleCreateNestedManyWithoutTenantInput
    transactions?: TransactionCreateNestedManyWithoutTenantInput
    payments?: PaymentCreateNestedManyWithoutTenantInput
    subscriptionEvents?: SubscriptionEventCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutUsersInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    graceEndsAt?: Date | string | null
    planId?: string | null
    slug: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    trialEndsAt?: Date | string | null
    freeTrialActivations?: number
    freeTrialCardsCreated?: number
    freeTrialLimit?: number
    trialExpiredNotified?: boolean
    currentCardBalance?: number
    subscriptionCardLimit?: number
    subscriptionCardsUsed?: number
    totalCardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionUncheckedCreateNestedManyWithoutTenantInput
    cardOrders?: CardOrderUncheckedCreateNestedManyWithoutTenantInput
    cards?: CardUncheckedCreateNestedManyWithoutTenantInput
    cashbackRules?: CashbackRuleUncheckedCreateNestedManyWithoutTenantInput
    customers?: CustomerUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    offers?: OfferUncheckedCreateNestedManyWithoutTenantInput
    stores?: StoreUncheckedCreateNestedManyWithoutTenantInput
    tierRules?: TierRuleUncheckedCreateNestedManyWithoutTenantInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutTenantInput
    payments?: PaymentUncheckedCreateNestedManyWithoutTenantInput
    subscriptionEvents?: SubscriptionEventUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutUsersInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutUsersInput, TenantUncheckedCreateWithoutUsersInput>
  }

  export type TransactionUpsertWithWhereUniqueWithoutCashierInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutCashierInput, TransactionUncheckedUpdateWithoutCashierInput>
    create: XOR<TransactionCreateWithoutCashierInput, TransactionUncheckedCreateWithoutCashierInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutCashierInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutCashierInput, TransactionUncheckedUpdateWithoutCashierInput>
  }

  export type TransactionUpdateManyWithWhereWithoutCashierInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutCashierInput>
  }

  export type StoreUpsertWithoutUsersInput = {
    update: XOR<StoreUpdateWithoutUsersInput, StoreUncheckedUpdateWithoutUsersInput>
    create: XOR<StoreCreateWithoutUsersInput, StoreUncheckedCreateWithoutUsersInput>
    where?: StoreWhereInput
  }

  export type StoreUpdateToOneWithWhereWithoutUsersInput = {
    where?: StoreWhereInput
    data: XOR<StoreUpdateWithoutUsersInput, StoreUncheckedUpdateWithoutUsersInput>
  }

  export type StoreUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cards?: CardUpdateManyWithoutStoreNestedInput
    tenant?: TenantUpdateOneRequiredWithoutStoresNestedInput
    transactions?: TransactionUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cards?: CardUncheckedUpdateManyWithoutStoreNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type TenantUpsertWithoutUsersInput = {
    update: XOR<TenantUpdateWithoutUsersInput, TenantUncheckedUpdateWithoutUsersInput>
    create: XOR<TenantCreateWithoutUsersInput, TenantUncheckedCreateWithoutUsersInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutUsersInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutUsersInput, TenantUncheckedUpdateWithoutUsersInput>
  }

  export type TenantUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graceEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slug?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeTrialActivations?: IntFieldUpdateOperationsInput | number
    freeTrialCardsCreated?: IntFieldUpdateOperationsInput | number
    freeTrialLimit?: IntFieldUpdateOperationsInput | number
    trialExpiredNotified?: BoolFieldUpdateOperationsInput | boolean
    currentCardBalance?: IntFieldUpdateOperationsInput | number
    subscriptionCardLimit?: IntFieldUpdateOperationsInput | number
    subscriptionCardsUsed?: IntFieldUpdateOperationsInput | number
    totalCardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUpdateManyWithoutTenantNestedInput
    cardOrders?: CardOrderUpdateManyWithoutTenantNestedInput
    cards?: CardUpdateManyWithoutTenantNestedInput
    cashbackRules?: CashbackRuleUpdateManyWithoutTenantNestedInput
    customers?: CustomerUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    offers?: OfferUpdateManyWithoutTenantNestedInput
    stores?: StoreUpdateManyWithoutTenantNestedInput
    plan?: PlanUpdateOneWithoutTenantsNestedInput
    tierRules?: TierRuleUpdateManyWithoutTenantNestedInput
    transactions?: TransactionUpdateManyWithoutTenantNestedInput
    payments?: PaymentUpdateManyWithoutTenantNestedInput
    subscriptionEvents?: SubscriptionEventUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graceEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    planId?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeTrialActivations?: IntFieldUpdateOperationsInput | number
    freeTrialCardsCreated?: IntFieldUpdateOperationsInput | number
    freeTrialLimit?: IntFieldUpdateOperationsInput | number
    trialExpiredNotified?: BoolFieldUpdateOperationsInput | boolean
    currentCardBalance?: IntFieldUpdateOperationsInput | number
    subscriptionCardLimit?: IntFieldUpdateOperationsInput | number
    subscriptionCardsUsed?: IntFieldUpdateOperationsInput | number
    totalCardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUncheckedUpdateManyWithoutTenantNestedInput
    cardOrders?: CardOrderUncheckedUpdateManyWithoutTenantNestedInput
    cards?: CardUncheckedUpdateManyWithoutTenantNestedInput
    cashbackRules?: CashbackRuleUncheckedUpdateManyWithoutTenantNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    offers?: OfferUncheckedUpdateManyWithoutTenantNestedInput
    stores?: StoreUncheckedUpdateManyWithoutTenantNestedInput
    tierRules?: TierRuleUncheckedUpdateManyWithoutTenantNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutTenantNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutTenantNestedInput
    subscriptionEvents?: SubscriptionEventUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type CardCreateWithoutCustomerInput = {
    id?: string
    cardUid: string
    activatedAt?: Date | string | null
    status?: $Enums.CardStatus
    qrUrl?: string | null
    balanceCents?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    store?: StoreCreateNestedOneWithoutCardsInput
    tenant: TenantCreateNestedOneWithoutCardsInput
    transactions?: TransactionCreateNestedManyWithoutCardInput
  }

  export type CardUncheckedCreateWithoutCustomerInput = {
    id?: string
    tenantId: string
    cardUid: string
    activatedAt?: Date | string | null
    storeId?: string | null
    status?: $Enums.CardStatus
    qrUrl?: string | null
    balanceCents?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionUncheckedCreateNestedManyWithoutCardInput
  }

  export type CardCreateOrConnectWithoutCustomerInput = {
    where: CardWhereUniqueInput
    create: XOR<CardCreateWithoutCustomerInput, CardUncheckedCreateWithoutCustomerInput>
  }

  export type CardCreateManyCustomerInputEnvelope = {
    data: CardCreateManyCustomerInput | CardCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type TenantCreateWithoutCustomersInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    graceEndsAt?: Date | string | null
    slug: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    trialEndsAt?: Date | string | null
    freeTrialActivations?: number
    freeTrialCardsCreated?: number
    freeTrialLimit?: number
    trialExpiredNotified?: boolean
    currentCardBalance?: number
    subscriptionCardLimit?: number
    subscriptionCardsUsed?: number
    totalCardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionCreateNestedManyWithoutTenantInput
    cardOrders?: CardOrderCreateNestedManyWithoutTenantInput
    cards?: CardCreateNestedManyWithoutTenantInput
    cashbackRules?: CashbackRuleCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    offers?: OfferCreateNestedManyWithoutTenantInput
    stores?: StoreCreateNestedManyWithoutTenantInput
    plan?: PlanCreateNestedOneWithoutTenantsInput
    tierRules?: TierRuleCreateNestedManyWithoutTenantInput
    transactions?: TransactionCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    payments?: PaymentCreateNestedManyWithoutTenantInput
    subscriptionEvents?: SubscriptionEventCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutCustomersInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    graceEndsAt?: Date | string | null
    planId?: string | null
    slug: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    trialEndsAt?: Date | string | null
    freeTrialActivations?: number
    freeTrialCardsCreated?: number
    freeTrialLimit?: number
    trialExpiredNotified?: boolean
    currentCardBalance?: number
    subscriptionCardLimit?: number
    subscriptionCardsUsed?: number
    totalCardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionUncheckedCreateNestedManyWithoutTenantInput
    cardOrders?: CardOrderUncheckedCreateNestedManyWithoutTenantInput
    cards?: CardUncheckedCreateNestedManyWithoutTenantInput
    cashbackRules?: CashbackRuleUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    offers?: OfferUncheckedCreateNestedManyWithoutTenantInput
    stores?: StoreUncheckedCreateNestedManyWithoutTenantInput
    tierRules?: TierRuleUncheckedCreateNestedManyWithoutTenantInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    payments?: PaymentUncheckedCreateNestedManyWithoutTenantInput
    subscriptionEvents?: SubscriptionEventUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutCustomersInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutCustomersInput, TenantUncheckedCreateWithoutCustomersInput>
  }

  export type NotificationCreateWithoutCustomerInput = {
    id?: string
    channel: $Enums.NotifChannel
    template: string
    payload: JsonNullValueInput | InputJsonValue
    status?: $Enums.NotifStatus
    error?: string | null
    createdAt?: Date | string
    sentAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutCustomerInput = {
    id?: string
    tenantId: string
    channel: $Enums.NotifChannel
    template: string
    payload: JsonNullValueInput | InputJsonValue
    status?: $Enums.NotifStatus
    error?: string | null
    createdAt?: Date | string
    sentAt?: Date | string | null
  }

  export type NotificationCreateOrConnectWithoutCustomerInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutCustomerInput, NotificationUncheckedCreateWithoutCustomerInput>
  }

  export type NotificationCreateManyCustomerInputEnvelope = {
    data: NotificationCreateManyCustomerInput | NotificationCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type TransactionCreateWithoutCustomerInput = {
    id?: string
    type: $Enums.TxType
    category: $Enums.TxCategory
    amountCents: number
    cashbackCents?: number
    beforeBalanceCents: number
    afterBalanceCents: number
    note?: string | null
    sourceIp?: string | null
    createdAt?: Date | string
    card: CardCreateNestedOneWithoutTransactionsInput
    cashier: UserCreateNestedOneWithoutTransactionsProcessedInput
    store: StoreCreateNestedOneWithoutTransactionsInput
    tenant: TenantCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateWithoutCustomerInput = {
    id?: string
    tenantId: string
    storeId: string
    cardId: string
    cashierId: string
    type: $Enums.TxType
    category: $Enums.TxCategory
    amountCents: number
    cashbackCents?: number
    beforeBalanceCents: number
    afterBalanceCents: number
    note?: string | null
    sourceIp?: string | null
    createdAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutCustomerInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutCustomerInput, TransactionUncheckedCreateWithoutCustomerInput>
  }

  export type TransactionCreateManyCustomerInputEnvelope = {
    data: TransactionCreateManyCustomerInput | TransactionCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type CardUpsertWithWhereUniqueWithoutCustomerInput = {
    where: CardWhereUniqueInput
    update: XOR<CardUpdateWithoutCustomerInput, CardUncheckedUpdateWithoutCustomerInput>
    create: XOR<CardCreateWithoutCustomerInput, CardUncheckedCreateWithoutCustomerInput>
  }

  export type CardUpdateWithWhereUniqueWithoutCustomerInput = {
    where: CardWhereUniqueInput
    data: XOR<CardUpdateWithoutCustomerInput, CardUncheckedUpdateWithoutCustomerInput>
  }

  export type CardUpdateManyWithWhereWithoutCustomerInput = {
    where: CardScalarWhereInput
    data: XOR<CardUpdateManyMutationInput, CardUncheckedUpdateManyWithoutCustomerInput>
  }

  export type TenantUpsertWithoutCustomersInput = {
    update: XOR<TenantUpdateWithoutCustomersInput, TenantUncheckedUpdateWithoutCustomersInput>
    create: XOR<TenantCreateWithoutCustomersInput, TenantUncheckedCreateWithoutCustomersInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutCustomersInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutCustomersInput, TenantUncheckedUpdateWithoutCustomersInput>
  }

  export type TenantUpdateWithoutCustomersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graceEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slug?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeTrialActivations?: IntFieldUpdateOperationsInput | number
    freeTrialCardsCreated?: IntFieldUpdateOperationsInput | number
    freeTrialLimit?: IntFieldUpdateOperationsInput | number
    trialExpiredNotified?: BoolFieldUpdateOperationsInput | boolean
    currentCardBalance?: IntFieldUpdateOperationsInput | number
    subscriptionCardLimit?: IntFieldUpdateOperationsInput | number
    subscriptionCardsUsed?: IntFieldUpdateOperationsInput | number
    totalCardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUpdateManyWithoutTenantNestedInput
    cardOrders?: CardOrderUpdateManyWithoutTenantNestedInput
    cards?: CardUpdateManyWithoutTenantNestedInput
    cashbackRules?: CashbackRuleUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    offers?: OfferUpdateManyWithoutTenantNestedInput
    stores?: StoreUpdateManyWithoutTenantNestedInput
    plan?: PlanUpdateOneWithoutTenantsNestedInput
    tierRules?: TierRuleUpdateManyWithoutTenantNestedInput
    transactions?: TransactionUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    payments?: PaymentUpdateManyWithoutTenantNestedInput
    subscriptionEvents?: SubscriptionEventUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutCustomersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graceEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    planId?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeTrialActivations?: IntFieldUpdateOperationsInput | number
    freeTrialCardsCreated?: IntFieldUpdateOperationsInput | number
    freeTrialLimit?: IntFieldUpdateOperationsInput | number
    trialExpiredNotified?: BoolFieldUpdateOperationsInput | boolean
    currentCardBalance?: IntFieldUpdateOperationsInput | number
    subscriptionCardLimit?: IntFieldUpdateOperationsInput | number
    subscriptionCardsUsed?: IntFieldUpdateOperationsInput | number
    totalCardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUncheckedUpdateManyWithoutTenantNestedInput
    cardOrders?: CardOrderUncheckedUpdateManyWithoutTenantNestedInput
    cards?: CardUncheckedUpdateManyWithoutTenantNestedInput
    cashbackRules?: CashbackRuleUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    offers?: OfferUncheckedUpdateManyWithoutTenantNestedInput
    stores?: StoreUncheckedUpdateManyWithoutTenantNestedInput
    tierRules?: TierRuleUncheckedUpdateManyWithoutTenantNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutTenantNestedInput
    subscriptionEvents?: SubscriptionEventUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type NotificationUpsertWithWhereUniqueWithoutCustomerInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutCustomerInput, NotificationUncheckedUpdateWithoutCustomerInput>
    create: XOR<NotificationCreateWithoutCustomerInput, NotificationUncheckedCreateWithoutCustomerInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutCustomerInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutCustomerInput, NotificationUncheckedUpdateWithoutCustomerInput>
  }

  export type NotificationUpdateManyWithWhereWithoutCustomerInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutCustomerInput>
  }

  export type TransactionUpsertWithWhereUniqueWithoutCustomerInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutCustomerInput, TransactionUncheckedUpdateWithoutCustomerInput>
    create: XOR<TransactionCreateWithoutCustomerInput, TransactionUncheckedCreateWithoutCustomerInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutCustomerInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutCustomerInput, TransactionUncheckedUpdateWithoutCustomerInput>
  }

  export type TransactionUpdateManyWithWhereWithoutCustomerInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutCustomerInput>
  }

  export type CustomerCreateWithoutCardsInput = {
    id?: string
    firstName: string
    lastName: string
    phone?: string | null
    email?: string | null
    tier?: $Enums.Tier
    totalSpend?: Decimal | DecimalJsLike | number | string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutCustomersInput
    notifications?: NotificationCreateNestedManyWithoutCustomerInput
    transactions?: TransactionCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutCardsInput = {
    id?: string
    tenantId: string
    firstName: string
    lastName: string
    phone?: string | null
    email?: string | null
    tier?: $Enums.Tier
    totalSpend?: Decimal | DecimalJsLike | number | string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: NotificationUncheckedCreateNestedManyWithoutCustomerInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutCardsInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutCardsInput, CustomerUncheckedCreateWithoutCardsInput>
  }

  export type StoreCreateWithoutCardsInput = {
    id?: string
    name: string
    address?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutStoresInput
    transactions?: TransactionCreateNestedManyWithoutStoreInput
    users?: UserCreateNestedManyWithoutStoreInput
  }

  export type StoreUncheckedCreateWithoutCardsInput = {
    id?: string
    tenantId: string
    name: string
    address?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionUncheckedCreateNestedManyWithoutStoreInput
    users?: UserUncheckedCreateNestedManyWithoutStoreInput
  }

  export type StoreCreateOrConnectWithoutCardsInput = {
    where: StoreWhereUniqueInput
    create: XOR<StoreCreateWithoutCardsInput, StoreUncheckedCreateWithoutCardsInput>
  }

  export type TenantCreateWithoutCardsInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    graceEndsAt?: Date | string | null
    slug: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    trialEndsAt?: Date | string | null
    freeTrialActivations?: number
    freeTrialCardsCreated?: number
    freeTrialLimit?: number
    trialExpiredNotified?: boolean
    currentCardBalance?: number
    subscriptionCardLimit?: number
    subscriptionCardsUsed?: number
    totalCardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionCreateNestedManyWithoutTenantInput
    cardOrders?: CardOrderCreateNestedManyWithoutTenantInput
    cashbackRules?: CashbackRuleCreateNestedManyWithoutTenantInput
    customers?: CustomerCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    offers?: OfferCreateNestedManyWithoutTenantInput
    stores?: StoreCreateNestedManyWithoutTenantInput
    plan?: PlanCreateNestedOneWithoutTenantsInput
    tierRules?: TierRuleCreateNestedManyWithoutTenantInput
    transactions?: TransactionCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    payments?: PaymentCreateNestedManyWithoutTenantInput
    subscriptionEvents?: SubscriptionEventCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutCardsInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    graceEndsAt?: Date | string | null
    planId?: string | null
    slug: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    trialEndsAt?: Date | string | null
    freeTrialActivations?: number
    freeTrialCardsCreated?: number
    freeTrialLimit?: number
    trialExpiredNotified?: boolean
    currentCardBalance?: number
    subscriptionCardLimit?: number
    subscriptionCardsUsed?: number
    totalCardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionUncheckedCreateNestedManyWithoutTenantInput
    cardOrders?: CardOrderUncheckedCreateNestedManyWithoutTenantInput
    cashbackRules?: CashbackRuleUncheckedCreateNestedManyWithoutTenantInput
    customers?: CustomerUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    offers?: OfferUncheckedCreateNestedManyWithoutTenantInput
    stores?: StoreUncheckedCreateNestedManyWithoutTenantInput
    tierRules?: TierRuleUncheckedCreateNestedManyWithoutTenantInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    payments?: PaymentUncheckedCreateNestedManyWithoutTenantInput
    subscriptionEvents?: SubscriptionEventUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutCardsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutCardsInput, TenantUncheckedCreateWithoutCardsInput>
  }

  export type TransactionCreateWithoutCardInput = {
    id?: string
    type: $Enums.TxType
    category: $Enums.TxCategory
    amountCents: number
    cashbackCents?: number
    beforeBalanceCents: number
    afterBalanceCents: number
    note?: string | null
    sourceIp?: string | null
    createdAt?: Date | string
    cashier: UserCreateNestedOneWithoutTransactionsProcessedInput
    customer: CustomerCreateNestedOneWithoutTransactionsInput
    store: StoreCreateNestedOneWithoutTransactionsInput
    tenant: TenantCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateWithoutCardInput = {
    id?: string
    tenantId: string
    storeId: string
    customerId: string
    cashierId: string
    type: $Enums.TxType
    category: $Enums.TxCategory
    amountCents: number
    cashbackCents?: number
    beforeBalanceCents: number
    afterBalanceCents: number
    note?: string | null
    sourceIp?: string | null
    createdAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutCardInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutCardInput, TransactionUncheckedCreateWithoutCardInput>
  }

  export type TransactionCreateManyCardInputEnvelope = {
    data: TransactionCreateManyCardInput | TransactionCreateManyCardInput[]
    skipDuplicates?: boolean
  }

  export type CustomerUpsertWithoutCardsInput = {
    update: XOR<CustomerUpdateWithoutCardsInput, CustomerUncheckedUpdateWithoutCardsInput>
    create: XOR<CustomerCreateWithoutCardsInput, CustomerUncheckedCreateWithoutCardsInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutCardsInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutCardsInput, CustomerUncheckedUpdateWithoutCardsInput>
  }

  export type CustomerUpdateWithoutCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tier?: EnumTierFieldUpdateOperationsInput | $Enums.Tier
    totalSpend?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutCustomersNestedInput
    notifications?: NotificationUpdateManyWithoutCustomerNestedInput
    transactions?: TransactionUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tier?: EnumTierFieldUpdateOperationsInput | $Enums.Tier
    totalSpend?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUncheckedUpdateManyWithoutCustomerNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type StoreUpsertWithoutCardsInput = {
    update: XOR<StoreUpdateWithoutCardsInput, StoreUncheckedUpdateWithoutCardsInput>
    create: XOR<StoreCreateWithoutCardsInput, StoreUncheckedCreateWithoutCardsInput>
    where?: StoreWhereInput
  }

  export type StoreUpdateToOneWithWhereWithoutCardsInput = {
    where?: StoreWhereInput
    data: XOR<StoreUpdateWithoutCardsInput, StoreUncheckedUpdateWithoutCardsInput>
  }

  export type StoreUpdateWithoutCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutStoresNestedInput
    transactions?: TransactionUpdateManyWithoutStoreNestedInput
    users?: UserUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateWithoutCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUncheckedUpdateManyWithoutStoreNestedInput
    users?: UserUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type TenantUpsertWithoutCardsInput = {
    update: XOR<TenantUpdateWithoutCardsInput, TenantUncheckedUpdateWithoutCardsInput>
    create: XOR<TenantCreateWithoutCardsInput, TenantUncheckedCreateWithoutCardsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutCardsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutCardsInput, TenantUncheckedUpdateWithoutCardsInput>
  }

  export type TenantUpdateWithoutCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graceEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slug?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeTrialActivations?: IntFieldUpdateOperationsInput | number
    freeTrialCardsCreated?: IntFieldUpdateOperationsInput | number
    freeTrialLimit?: IntFieldUpdateOperationsInput | number
    trialExpiredNotified?: BoolFieldUpdateOperationsInput | boolean
    currentCardBalance?: IntFieldUpdateOperationsInput | number
    subscriptionCardLimit?: IntFieldUpdateOperationsInput | number
    subscriptionCardsUsed?: IntFieldUpdateOperationsInput | number
    totalCardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUpdateManyWithoutTenantNestedInput
    cardOrders?: CardOrderUpdateManyWithoutTenantNestedInput
    cashbackRules?: CashbackRuleUpdateManyWithoutTenantNestedInput
    customers?: CustomerUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    offers?: OfferUpdateManyWithoutTenantNestedInput
    stores?: StoreUpdateManyWithoutTenantNestedInput
    plan?: PlanUpdateOneWithoutTenantsNestedInput
    tierRules?: TierRuleUpdateManyWithoutTenantNestedInput
    transactions?: TransactionUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    payments?: PaymentUpdateManyWithoutTenantNestedInput
    subscriptionEvents?: SubscriptionEventUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graceEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    planId?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeTrialActivations?: IntFieldUpdateOperationsInput | number
    freeTrialCardsCreated?: IntFieldUpdateOperationsInput | number
    freeTrialLimit?: IntFieldUpdateOperationsInput | number
    trialExpiredNotified?: BoolFieldUpdateOperationsInput | boolean
    currentCardBalance?: IntFieldUpdateOperationsInput | number
    subscriptionCardLimit?: IntFieldUpdateOperationsInput | number
    subscriptionCardsUsed?: IntFieldUpdateOperationsInput | number
    totalCardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUncheckedUpdateManyWithoutTenantNestedInput
    cardOrders?: CardOrderUncheckedUpdateManyWithoutTenantNestedInput
    cashbackRules?: CashbackRuleUncheckedUpdateManyWithoutTenantNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    offers?: OfferUncheckedUpdateManyWithoutTenantNestedInput
    stores?: StoreUncheckedUpdateManyWithoutTenantNestedInput
    tierRules?: TierRuleUncheckedUpdateManyWithoutTenantNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutTenantNestedInput
    subscriptionEvents?: SubscriptionEventUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TransactionUpsertWithWhereUniqueWithoutCardInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutCardInput, TransactionUncheckedUpdateWithoutCardInput>
    create: XOR<TransactionCreateWithoutCardInput, TransactionUncheckedCreateWithoutCardInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutCardInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutCardInput, TransactionUncheckedUpdateWithoutCardInput>
  }

  export type TransactionUpdateManyWithWhereWithoutCardInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutCardInput>
  }

  export type CardCreateWithoutTransactionsInput = {
    id?: string
    cardUid: string
    activatedAt?: Date | string | null
    status?: $Enums.CardStatus
    qrUrl?: string | null
    balanceCents?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    customer?: CustomerCreateNestedOneWithoutCardsInput
    store?: StoreCreateNestedOneWithoutCardsInput
    tenant: TenantCreateNestedOneWithoutCardsInput
  }

  export type CardUncheckedCreateWithoutTransactionsInput = {
    id?: string
    tenantId: string
    cardUid: string
    customerId?: string | null
    activatedAt?: Date | string | null
    storeId?: string | null
    status?: $Enums.CardStatus
    qrUrl?: string | null
    balanceCents?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CardCreateOrConnectWithoutTransactionsInput = {
    where: CardWhereUniqueInput
    create: XOR<CardCreateWithoutTransactionsInput, CardUncheckedCreateWithoutTransactionsInput>
  }

  export type UserCreateWithoutTransactionsProcessedInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    firstName?: string | null
    lastName?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    store?: StoreCreateNestedOneWithoutUsersInput
    tenant: TenantCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutTransactionsProcessedInput = {
    id?: string
    tenantId: string
    email: string
    passwordHash: string
    role: $Enums.Role
    storeId?: string | null
    firstName?: string | null
    lastName?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
  }

  export type UserCreateOrConnectWithoutTransactionsProcessedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTransactionsProcessedInput, UserUncheckedCreateWithoutTransactionsProcessedInput>
  }

  export type CustomerCreateWithoutTransactionsInput = {
    id?: string
    firstName: string
    lastName: string
    phone?: string | null
    email?: string | null
    tier?: $Enums.Tier
    totalSpend?: Decimal | DecimalJsLike | number | string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    cards?: CardCreateNestedManyWithoutCustomerInput
    tenant: TenantCreateNestedOneWithoutCustomersInput
    notifications?: NotificationCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutTransactionsInput = {
    id?: string
    tenantId: string
    firstName: string
    lastName: string
    phone?: string | null
    email?: string | null
    tier?: $Enums.Tier
    totalSpend?: Decimal | DecimalJsLike | number | string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    cards?: CardUncheckedCreateNestedManyWithoutCustomerInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutTransactionsInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutTransactionsInput, CustomerUncheckedCreateWithoutTransactionsInput>
  }

  export type StoreCreateWithoutTransactionsInput = {
    id?: string
    name: string
    address?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    cards?: CardCreateNestedManyWithoutStoreInput
    tenant: TenantCreateNestedOneWithoutStoresInput
    users?: UserCreateNestedManyWithoutStoreInput
  }

  export type StoreUncheckedCreateWithoutTransactionsInput = {
    id?: string
    tenantId: string
    name: string
    address?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    cards?: CardUncheckedCreateNestedManyWithoutStoreInput
    users?: UserUncheckedCreateNestedManyWithoutStoreInput
  }

  export type StoreCreateOrConnectWithoutTransactionsInput = {
    where: StoreWhereUniqueInput
    create: XOR<StoreCreateWithoutTransactionsInput, StoreUncheckedCreateWithoutTransactionsInput>
  }

  export type TenantCreateWithoutTransactionsInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    graceEndsAt?: Date | string | null
    slug: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    trialEndsAt?: Date | string | null
    freeTrialActivations?: number
    freeTrialCardsCreated?: number
    freeTrialLimit?: number
    trialExpiredNotified?: boolean
    currentCardBalance?: number
    subscriptionCardLimit?: number
    subscriptionCardsUsed?: number
    totalCardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionCreateNestedManyWithoutTenantInput
    cardOrders?: CardOrderCreateNestedManyWithoutTenantInput
    cards?: CardCreateNestedManyWithoutTenantInput
    cashbackRules?: CashbackRuleCreateNestedManyWithoutTenantInput
    customers?: CustomerCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    offers?: OfferCreateNestedManyWithoutTenantInput
    stores?: StoreCreateNestedManyWithoutTenantInput
    plan?: PlanCreateNestedOneWithoutTenantsInput
    tierRules?: TierRuleCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    payments?: PaymentCreateNestedManyWithoutTenantInput
    subscriptionEvents?: SubscriptionEventCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutTransactionsInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    graceEndsAt?: Date | string | null
    planId?: string | null
    slug: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    trialEndsAt?: Date | string | null
    freeTrialActivations?: number
    freeTrialCardsCreated?: number
    freeTrialLimit?: number
    trialExpiredNotified?: boolean
    currentCardBalance?: number
    subscriptionCardLimit?: number
    subscriptionCardsUsed?: number
    totalCardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionUncheckedCreateNestedManyWithoutTenantInput
    cardOrders?: CardOrderUncheckedCreateNestedManyWithoutTenantInput
    cards?: CardUncheckedCreateNestedManyWithoutTenantInput
    cashbackRules?: CashbackRuleUncheckedCreateNestedManyWithoutTenantInput
    customers?: CustomerUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    offers?: OfferUncheckedCreateNestedManyWithoutTenantInput
    stores?: StoreUncheckedCreateNestedManyWithoutTenantInput
    tierRules?: TierRuleUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    payments?: PaymentUncheckedCreateNestedManyWithoutTenantInput
    subscriptionEvents?: SubscriptionEventUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutTransactionsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutTransactionsInput, TenantUncheckedCreateWithoutTransactionsInput>
  }

  export type CardUpsertWithoutTransactionsInput = {
    update: XOR<CardUpdateWithoutTransactionsInput, CardUncheckedUpdateWithoutTransactionsInput>
    create: XOR<CardCreateWithoutTransactionsInput, CardUncheckedCreateWithoutTransactionsInput>
    where?: CardWhereInput
  }

  export type CardUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: CardWhereInput
    data: XOR<CardUpdateWithoutTransactionsInput, CardUncheckedUpdateWithoutTransactionsInput>
  }

  export type CardUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardUid?: StringFieldUpdateOperationsInput | string
    activatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumCardStatusFieldUpdateOperationsInput | $Enums.CardStatus
    qrUrl?: NullableStringFieldUpdateOperationsInput | string | null
    balanceCents?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneWithoutCardsNestedInput
    store?: StoreUpdateOneWithoutCardsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutCardsNestedInput
  }

  export type CardUncheckedUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    cardUid?: StringFieldUpdateOperationsInput | string
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    activatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCardStatusFieldUpdateOperationsInput | $Enums.CardStatus
    qrUrl?: NullableStringFieldUpdateOperationsInput | string | null
    balanceCents?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutTransactionsProcessedInput = {
    update: XOR<UserUpdateWithoutTransactionsProcessedInput, UserUncheckedUpdateWithoutTransactionsProcessedInput>
    create: XOR<UserCreateWithoutTransactionsProcessedInput, UserUncheckedCreateWithoutTransactionsProcessedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTransactionsProcessedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTransactionsProcessedInput, UserUncheckedUpdateWithoutTransactionsProcessedInput>
  }

  export type UserUpdateWithoutTransactionsProcessedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    store?: StoreUpdateOneWithoutUsersNestedInput
    tenant?: TenantUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutTransactionsProcessedInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CustomerUpsertWithoutTransactionsInput = {
    update: XOR<CustomerUpdateWithoutTransactionsInput, CustomerUncheckedUpdateWithoutTransactionsInput>
    create: XOR<CustomerCreateWithoutTransactionsInput, CustomerUncheckedCreateWithoutTransactionsInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutTransactionsInput, CustomerUncheckedUpdateWithoutTransactionsInput>
  }

  export type CustomerUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tier?: EnumTierFieldUpdateOperationsInput | $Enums.Tier
    totalSpend?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cards?: CardUpdateManyWithoutCustomerNestedInput
    tenant?: TenantUpdateOneRequiredWithoutCustomersNestedInput
    notifications?: NotificationUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tier?: EnumTierFieldUpdateOperationsInput | $Enums.Tier
    totalSpend?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cards?: CardUncheckedUpdateManyWithoutCustomerNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type StoreUpsertWithoutTransactionsInput = {
    update: XOR<StoreUpdateWithoutTransactionsInput, StoreUncheckedUpdateWithoutTransactionsInput>
    create: XOR<StoreCreateWithoutTransactionsInput, StoreUncheckedCreateWithoutTransactionsInput>
    where?: StoreWhereInput
  }

  export type StoreUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: StoreWhereInput
    data: XOR<StoreUpdateWithoutTransactionsInput, StoreUncheckedUpdateWithoutTransactionsInput>
  }

  export type StoreUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cards?: CardUpdateManyWithoutStoreNestedInput
    tenant?: TenantUpdateOneRequiredWithoutStoresNestedInput
    users?: UserUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cards?: CardUncheckedUpdateManyWithoutStoreNestedInput
    users?: UserUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type TenantUpsertWithoutTransactionsInput = {
    update: XOR<TenantUpdateWithoutTransactionsInput, TenantUncheckedUpdateWithoutTransactionsInput>
    create: XOR<TenantCreateWithoutTransactionsInput, TenantUncheckedCreateWithoutTransactionsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutTransactionsInput, TenantUncheckedUpdateWithoutTransactionsInput>
  }

  export type TenantUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graceEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slug?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeTrialActivations?: IntFieldUpdateOperationsInput | number
    freeTrialCardsCreated?: IntFieldUpdateOperationsInput | number
    freeTrialLimit?: IntFieldUpdateOperationsInput | number
    trialExpiredNotified?: BoolFieldUpdateOperationsInput | boolean
    currentCardBalance?: IntFieldUpdateOperationsInput | number
    subscriptionCardLimit?: IntFieldUpdateOperationsInput | number
    subscriptionCardsUsed?: IntFieldUpdateOperationsInput | number
    totalCardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUpdateManyWithoutTenantNestedInput
    cardOrders?: CardOrderUpdateManyWithoutTenantNestedInput
    cards?: CardUpdateManyWithoutTenantNestedInput
    cashbackRules?: CashbackRuleUpdateManyWithoutTenantNestedInput
    customers?: CustomerUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    offers?: OfferUpdateManyWithoutTenantNestedInput
    stores?: StoreUpdateManyWithoutTenantNestedInput
    plan?: PlanUpdateOneWithoutTenantsNestedInput
    tierRules?: TierRuleUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    payments?: PaymentUpdateManyWithoutTenantNestedInput
    subscriptionEvents?: SubscriptionEventUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graceEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    planId?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeTrialActivations?: IntFieldUpdateOperationsInput | number
    freeTrialCardsCreated?: IntFieldUpdateOperationsInput | number
    freeTrialLimit?: IntFieldUpdateOperationsInput | number
    trialExpiredNotified?: BoolFieldUpdateOperationsInput | boolean
    currentCardBalance?: IntFieldUpdateOperationsInput | number
    subscriptionCardLimit?: IntFieldUpdateOperationsInput | number
    subscriptionCardsUsed?: IntFieldUpdateOperationsInput | number
    totalCardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUncheckedUpdateManyWithoutTenantNestedInput
    cardOrders?: CardOrderUncheckedUpdateManyWithoutTenantNestedInput
    cards?: CardUncheckedUpdateManyWithoutTenantNestedInput
    cashbackRules?: CashbackRuleUncheckedUpdateManyWithoutTenantNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    offers?: OfferUncheckedUpdateManyWithoutTenantNestedInput
    stores?: StoreUncheckedUpdateManyWithoutTenantNestedInput
    tierRules?: TierRuleUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutTenantNestedInput
    subscriptionEvents?: SubscriptionEventUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateWithoutTierRulesInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    graceEndsAt?: Date | string | null
    slug: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    trialEndsAt?: Date | string | null
    freeTrialActivations?: number
    freeTrialCardsCreated?: number
    freeTrialLimit?: number
    trialExpiredNotified?: boolean
    currentCardBalance?: number
    subscriptionCardLimit?: number
    subscriptionCardsUsed?: number
    totalCardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionCreateNestedManyWithoutTenantInput
    cardOrders?: CardOrderCreateNestedManyWithoutTenantInput
    cards?: CardCreateNestedManyWithoutTenantInput
    cashbackRules?: CashbackRuleCreateNestedManyWithoutTenantInput
    customers?: CustomerCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    offers?: OfferCreateNestedManyWithoutTenantInput
    stores?: StoreCreateNestedManyWithoutTenantInput
    plan?: PlanCreateNestedOneWithoutTenantsInput
    transactions?: TransactionCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    payments?: PaymentCreateNestedManyWithoutTenantInput
    subscriptionEvents?: SubscriptionEventCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutTierRulesInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    graceEndsAt?: Date | string | null
    planId?: string | null
    slug: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    trialEndsAt?: Date | string | null
    freeTrialActivations?: number
    freeTrialCardsCreated?: number
    freeTrialLimit?: number
    trialExpiredNotified?: boolean
    currentCardBalance?: number
    subscriptionCardLimit?: number
    subscriptionCardsUsed?: number
    totalCardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionUncheckedCreateNestedManyWithoutTenantInput
    cardOrders?: CardOrderUncheckedCreateNestedManyWithoutTenantInput
    cards?: CardUncheckedCreateNestedManyWithoutTenantInput
    cashbackRules?: CashbackRuleUncheckedCreateNestedManyWithoutTenantInput
    customers?: CustomerUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    offers?: OfferUncheckedCreateNestedManyWithoutTenantInput
    stores?: StoreUncheckedCreateNestedManyWithoutTenantInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    payments?: PaymentUncheckedCreateNestedManyWithoutTenantInput
    subscriptionEvents?: SubscriptionEventUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutTierRulesInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutTierRulesInput, TenantUncheckedCreateWithoutTierRulesInput>
  }

  export type TenantUpsertWithoutTierRulesInput = {
    update: XOR<TenantUpdateWithoutTierRulesInput, TenantUncheckedUpdateWithoutTierRulesInput>
    create: XOR<TenantCreateWithoutTierRulesInput, TenantUncheckedCreateWithoutTierRulesInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutTierRulesInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutTierRulesInput, TenantUncheckedUpdateWithoutTierRulesInput>
  }

  export type TenantUpdateWithoutTierRulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graceEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slug?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeTrialActivations?: IntFieldUpdateOperationsInput | number
    freeTrialCardsCreated?: IntFieldUpdateOperationsInput | number
    freeTrialLimit?: IntFieldUpdateOperationsInput | number
    trialExpiredNotified?: BoolFieldUpdateOperationsInput | boolean
    currentCardBalance?: IntFieldUpdateOperationsInput | number
    subscriptionCardLimit?: IntFieldUpdateOperationsInput | number
    subscriptionCardsUsed?: IntFieldUpdateOperationsInput | number
    totalCardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUpdateManyWithoutTenantNestedInput
    cardOrders?: CardOrderUpdateManyWithoutTenantNestedInput
    cards?: CardUpdateManyWithoutTenantNestedInput
    cashbackRules?: CashbackRuleUpdateManyWithoutTenantNestedInput
    customers?: CustomerUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    offers?: OfferUpdateManyWithoutTenantNestedInput
    stores?: StoreUpdateManyWithoutTenantNestedInput
    plan?: PlanUpdateOneWithoutTenantsNestedInput
    transactions?: TransactionUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    payments?: PaymentUpdateManyWithoutTenantNestedInput
    subscriptionEvents?: SubscriptionEventUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutTierRulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graceEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    planId?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeTrialActivations?: IntFieldUpdateOperationsInput | number
    freeTrialCardsCreated?: IntFieldUpdateOperationsInput | number
    freeTrialLimit?: IntFieldUpdateOperationsInput | number
    trialExpiredNotified?: BoolFieldUpdateOperationsInput | boolean
    currentCardBalance?: IntFieldUpdateOperationsInput | number
    subscriptionCardLimit?: IntFieldUpdateOperationsInput | number
    subscriptionCardsUsed?: IntFieldUpdateOperationsInput | number
    totalCardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUncheckedUpdateManyWithoutTenantNestedInput
    cardOrders?: CardOrderUncheckedUpdateManyWithoutTenantNestedInput
    cards?: CardUncheckedUpdateManyWithoutTenantNestedInput
    cashbackRules?: CashbackRuleUncheckedUpdateManyWithoutTenantNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    offers?: OfferUncheckedUpdateManyWithoutTenantNestedInput
    stores?: StoreUncheckedUpdateManyWithoutTenantNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutTenantNestedInput
    subscriptionEvents?: SubscriptionEventUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateWithoutCashbackRulesInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    graceEndsAt?: Date | string | null
    slug: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    trialEndsAt?: Date | string | null
    freeTrialActivations?: number
    freeTrialCardsCreated?: number
    freeTrialLimit?: number
    trialExpiredNotified?: boolean
    currentCardBalance?: number
    subscriptionCardLimit?: number
    subscriptionCardsUsed?: number
    totalCardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionCreateNestedManyWithoutTenantInput
    cardOrders?: CardOrderCreateNestedManyWithoutTenantInput
    cards?: CardCreateNestedManyWithoutTenantInput
    customers?: CustomerCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    offers?: OfferCreateNestedManyWithoutTenantInput
    stores?: StoreCreateNestedManyWithoutTenantInput
    plan?: PlanCreateNestedOneWithoutTenantsInput
    tierRules?: TierRuleCreateNestedManyWithoutTenantInput
    transactions?: TransactionCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    payments?: PaymentCreateNestedManyWithoutTenantInput
    subscriptionEvents?: SubscriptionEventCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutCashbackRulesInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    graceEndsAt?: Date | string | null
    planId?: string | null
    slug: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    trialEndsAt?: Date | string | null
    freeTrialActivations?: number
    freeTrialCardsCreated?: number
    freeTrialLimit?: number
    trialExpiredNotified?: boolean
    currentCardBalance?: number
    subscriptionCardLimit?: number
    subscriptionCardsUsed?: number
    totalCardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionUncheckedCreateNestedManyWithoutTenantInput
    cardOrders?: CardOrderUncheckedCreateNestedManyWithoutTenantInput
    cards?: CardUncheckedCreateNestedManyWithoutTenantInput
    customers?: CustomerUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    offers?: OfferUncheckedCreateNestedManyWithoutTenantInput
    stores?: StoreUncheckedCreateNestedManyWithoutTenantInput
    tierRules?: TierRuleUncheckedCreateNestedManyWithoutTenantInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    payments?: PaymentUncheckedCreateNestedManyWithoutTenantInput
    subscriptionEvents?: SubscriptionEventUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutCashbackRulesInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutCashbackRulesInput, TenantUncheckedCreateWithoutCashbackRulesInput>
  }

  export type TenantUpsertWithoutCashbackRulesInput = {
    update: XOR<TenantUpdateWithoutCashbackRulesInput, TenantUncheckedUpdateWithoutCashbackRulesInput>
    create: XOR<TenantCreateWithoutCashbackRulesInput, TenantUncheckedCreateWithoutCashbackRulesInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutCashbackRulesInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutCashbackRulesInput, TenantUncheckedUpdateWithoutCashbackRulesInput>
  }

  export type TenantUpdateWithoutCashbackRulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graceEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slug?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeTrialActivations?: IntFieldUpdateOperationsInput | number
    freeTrialCardsCreated?: IntFieldUpdateOperationsInput | number
    freeTrialLimit?: IntFieldUpdateOperationsInput | number
    trialExpiredNotified?: BoolFieldUpdateOperationsInput | boolean
    currentCardBalance?: IntFieldUpdateOperationsInput | number
    subscriptionCardLimit?: IntFieldUpdateOperationsInput | number
    subscriptionCardsUsed?: IntFieldUpdateOperationsInput | number
    totalCardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUpdateManyWithoutTenantNestedInput
    cardOrders?: CardOrderUpdateManyWithoutTenantNestedInput
    cards?: CardUpdateManyWithoutTenantNestedInput
    customers?: CustomerUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    offers?: OfferUpdateManyWithoutTenantNestedInput
    stores?: StoreUpdateManyWithoutTenantNestedInput
    plan?: PlanUpdateOneWithoutTenantsNestedInput
    tierRules?: TierRuleUpdateManyWithoutTenantNestedInput
    transactions?: TransactionUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    payments?: PaymentUpdateManyWithoutTenantNestedInput
    subscriptionEvents?: SubscriptionEventUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutCashbackRulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graceEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    planId?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeTrialActivations?: IntFieldUpdateOperationsInput | number
    freeTrialCardsCreated?: IntFieldUpdateOperationsInput | number
    freeTrialLimit?: IntFieldUpdateOperationsInput | number
    trialExpiredNotified?: BoolFieldUpdateOperationsInput | boolean
    currentCardBalance?: IntFieldUpdateOperationsInput | number
    subscriptionCardLimit?: IntFieldUpdateOperationsInput | number
    subscriptionCardsUsed?: IntFieldUpdateOperationsInput | number
    totalCardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUncheckedUpdateManyWithoutTenantNestedInput
    cardOrders?: CardOrderUncheckedUpdateManyWithoutTenantNestedInput
    cards?: CardUncheckedUpdateManyWithoutTenantNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    offers?: OfferUncheckedUpdateManyWithoutTenantNestedInput
    stores?: StoreUncheckedUpdateManyWithoutTenantNestedInput
    tierRules?: TierRuleUncheckedUpdateManyWithoutTenantNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutTenantNestedInput
    subscriptionEvents?: SubscriptionEventUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateWithoutOffersInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    graceEndsAt?: Date | string | null
    slug: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    trialEndsAt?: Date | string | null
    freeTrialActivations?: number
    freeTrialCardsCreated?: number
    freeTrialLimit?: number
    trialExpiredNotified?: boolean
    currentCardBalance?: number
    subscriptionCardLimit?: number
    subscriptionCardsUsed?: number
    totalCardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionCreateNestedManyWithoutTenantInput
    cardOrders?: CardOrderCreateNestedManyWithoutTenantInput
    cards?: CardCreateNestedManyWithoutTenantInput
    cashbackRules?: CashbackRuleCreateNestedManyWithoutTenantInput
    customers?: CustomerCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    stores?: StoreCreateNestedManyWithoutTenantInput
    plan?: PlanCreateNestedOneWithoutTenantsInput
    tierRules?: TierRuleCreateNestedManyWithoutTenantInput
    transactions?: TransactionCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    payments?: PaymentCreateNestedManyWithoutTenantInput
    subscriptionEvents?: SubscriptionEventCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutOffersInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    graceEndsAt?: Date | string | null
    planId?: string | null
    slug: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    trialEndsAt?: Date | string | null
    freeTrialActivations?: number
    freeTrialCardsCreated?: number
    freeTrialLimit?: number
    trialExpiredNotified?: boolean
    currentCardBalance?: number
    subscriptionCardLimit?: number
    subscriptionCardsUsed?: number
    totalCardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionUncheckedCreateNestedManyWithoutTenantInput
    cardOrders?: CardOrderUncheckedCreateNestedManyWithoutTenantInput
    cards?: CardUncheckedCreateNestedManyWithoutTenantInput
    cashbackRules?: CashbackRuleUncheckedCreateNestedManyWithoutTenantInput
    customers?: CustomerUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    stores?: StoreUncheckedCreateNestedManyWithoutTenantInput
    tierRules?: TierRuleUncheckedCreateNestedManyWithoutTenantInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    payments?: PaymentUncheckedCreateNestedManyWithoutTenantInput
    subscriptionEvents?: SubscriptionEventUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutOffersInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutOffersInput, TenantUncheckedCreateWithoutOffersInput>
  }

  export type TenantUpsertWithoutOffersInput = {
    update: XOR<TenantUpdateWithoutOffersInput, TenantUncheckedUpdateWithoutOffersInput>
    create: XOR<TenantCreateWithoutOffersInput, TenantUncheckedCreateWithoutOffersInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutOffersInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutOffersInput, TenantUncheckedUpdateWithoutOffersInput>
  }

  export type TenantUpdateWithoutOffersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graceEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slug?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeTrialActivations?: IntFieldUpdateOperationsInput | number
    freeTrialCardsCreated?: IntFieldUpdateOperationsInput | number
    freeTrialLimit?: IntFieldUpdateOperationsInput | number
    trialExpiredNotified?: BoolFieldUpdateOperationsInput | boolean
    currentCardBalance?: IntFieldUpdateOperationsInput | number
    subscriptionCardLimit?: IntFieldUpdateOperationsInput | number
    subscriptionCardsUsed?: IntFieldUpdateOperationsInput | number
    totalCardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUpdateManyWithoutTenantNestedInput
    cardOrders?: CardOrderUpdateManyWithoutTenantNestedInput
    cards?: CardUpdateManyWithoutTenantNestedInput
    cashbackRules?: CashbackRuleUpdateManyWithoutTenantNestedInput
    customers?: CustomerUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    stores?: StoreUpdateManyWithoutTenantNestedInput
    plan?: PlanUpdateOneWithoutTenantsNestedInput
    tierRules?: TierRuleUpdateManyWithoutTenantNestedInput
    transactions?: TransactionUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    payments?: PaymentUpdateManyWithoutTenantNestedInput
    subscriptionEvents?: SubscriptionEventUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutOffersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graceEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    planId?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeTrialActivations?: IntFieldUpdateOperationsInput | number
    freeTrialCardsCreated?: IntFieldUpdateOperationsInput | number
    freeTrialLimit?: IntFieldUpdateOperationsInput | number
    trialExpiredNotified?: BoolFieldUpdateOperationsInput | boolean
    currentCardBalance?: IntFieldUpdateOperationsInput | number
    subscriptionCardLimit?: IntFieldUpdateOperationsInput | number
    subscriptionCardsUsed?: IntFieldUpdateOperationsInput | number
    totalCardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUncheckedUpdateManyWithoutTenantNestedInput
    cardOrders?: CardOrderUncheckedUpdateManyWithoutTenantNestedInput
    cards?: CardUncheckedUpdateManyWithoutTenantNestedInput
    cashbackRules?: CashbackRuleUncheckedUpdateManyWithoutTenantNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    stores?: StoreUncheckedUpdateManyWithoutTenantNestedInput
    tierRules?: TierRuleUncheckedUpdateManyWithoutTenantNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutTenantNestedInput
    subscriptionEvents?: SubscriptionEventUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type CustomerCreateWithoutNotificationsInput = {
    id?: string
    firstName: string
    lastName: string
    phone?: string | null
    email?: string | null
    tier?: $Enums.Tier
    totalSpend?: Decimal | DecimalJsLike | number | string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    cards?: CardCreateNestedManyWithoutCustomerInput
    tenant: TenantCreateNestedOneWithoutCustomersInput
    transactions?: TransactionCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutNotificationsInput = {
    id?: string
    tenantId: string
    firstName: string
    lastName: string
    phone?: string | null
    email?: string | null
    tier?: $Enums.Tier
    totalSpend?: Decimal | DecimalJsLike | number | string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    cards?: CardUncheckedCreateNestedManyWithoutCustomerInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutNotificationsInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutNotificationsInput, CustomerUncheckedCreateWithoutNotificationsInput>
  }

  export type TenantCreateWithoutNotificationsInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    graceEndsAt?: Date | string | null
    slug: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    trialEndsAt?: Date | string | null
    freeTrialActivations?: number
    freeTrialCardsCreated?: number
    freeTrialLimit?: number
    trialExpiredNotified?: boolean
    currentCardBalance?: number
    subscriptionCardLimit?: number
    subscriptionCardsUsed?: number
    totalCardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionCreateNestedManyWithoutTenantInput
    cardOrders?: CardOrderCreateNestedManyWithoutTenantInput
    cards?: CardCreateNestedManyWithoutTenantInput
    cashbackRules?: CashbackRuleCreateNestedManyWithoutTenantInput
    customers?: CustomerCreateNestedManyWithoutTenantInput
    offers?: OfferCreateNestedManyWithoutTenantInput
    stores?: StoreCreateNestedManyWithoutTenantInput
    plan?: PlanCreateNestedOneWithoutTenantsInput
    tierRules?: TierRuleCreateNestedManyWithoutTenantInput
    transactions?: TransactionCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    payments?: PaymentCreateNestedManyWithoutTenantInput
    subscriptionEvents?: SubscriptionEventCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutNotificationsInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    graceEndsAt?: Date | string | null
    planId?: string | null
    slug: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    trialEndsAt?: Date | string | null
    freeTrialActivations?: number
    freeTrialCardsCreated?: number
    freeTrialLimit?: number
    trialExpiredNotified?: boolean
    currentCardBalance?: number
    subscriptionCardLimit?: number
    subscriptionCardsUsed?: number
    totalCardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionUncheckedCreateNestedManyWithoutTenantInput
    cardOrders?: CardOrderUncheckedCreateNestedManyWithoutTenantInput
    cards?: CardUncheckedCreateNestedManyWithoutTenantInput
    cashbackRules?: CashbackRuleUncheckedCreateNestedManyWithoutTenantInput
    customers?: CustomerUncheckedCreateNestedManyWithoutTenantInput
    offers?: OfferUncheckedCreateNestedManyWithoutTenantInput
    stores?: StoreUncheckedCreateNestedManyWithoutTenantInput
    tierRules?: TierRuleUncheckedCreateNestedManyWithoutTenantInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    payments?: PaymentUncheckedCreateNestedManyWithoutTenantInput
    subscriptionEvents?: SubscriptionEventUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutNotificationsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutNotificationsInput, TenantUncheckedCreateWithoutNotificationsInput>
  }

  export type CustomerUpsertWithoutNotificationsInput = {
    update: XOR<CustomerUpdateWithoutNotificationsInput, CustomerUncheckedUpdateWithoutNotificationsInput>
    create: XOR<CustomerCreateWithoutNotificationsInput, CustomerUncheckedCreateWithoutNotificationsInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutNotificationsInput, CustomerUncheckedUpdateWithoutNotificationsInput>
  }

  export type CustomerUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tier?: EnumTierFieldUpdateOperationsInput | $Enums.Tier
    totalSpend?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cards?: CardUpdateManyWithoutCustomerNestedInput
    tenant?: TenantUpdateOneRequiredWithoutCustomersNestedInput
    transactions?: TransactionUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tier?: EnumTierFieldUpdateOperationsInput | $Enums.Tier
    totalSpend?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cards?: CardUncheckedUpdateManyWithoutCustomerNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type TenantUpsertWithoutNotificationsInput = {
    update: XOR<TenantUpdateWithoutNotificationsInput, TenantUncheckedUpdateWithoutNotificationsInput>
    create: XOR<TenantCreateWithoutNotificationsInput, TenantUncheckedCreateWithoutNotificationsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutNotificationsInput, TenantUncheckedUpdateWithoutNotificationsInput>
  }

  export type TenantUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graceEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slug?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeTrialActivations?: IntFieldUpdateOperationsInput | number
    freeTrialCardsCreated?: IntFieldUpdateOperationsInput | number
    freeTrialLimit?: IntFieldUpdateOperationsInput | number
    trialExpiredNotified?: BoolFieldUpdateOperationsInput | boolean
    currentCardBalance?: IntFieldUpdateOperationsInput | number
    subscriptionCardLimit?: IntFieldUpdateOperationsInput | number
    subscriptionCardsUsed?: IntFieldUpdateOperationsInput | number
    totalCardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUpdateManyWithoutTenantNestedInput
    cardOrders?: CardOrderUpdateManyWithoutTenantNestedInput
    cards?: CardUpdateManyWithoutTenantNestedInput
    cashbackRules?: CashbackRuleUpdateManyWithoutTenantNestedInput
    customers?: CustomerUpdateManyWithoutTenantNestedInput
    offers?: OfferUpdateManyWithoutTenantNestedInput
    stores?: StoreUpdateManyWithoutTenantNestedInput
    plan?: PlanUpdateOneWithoutTenantsNestedInput
    tierRules?: TierRuleUpdateManyWithoutTenantNestedInput
    transactions?: TransactionUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    payments?: PaymentUpdateManyWithoutTenantNestedInput
    subscriptionEvents?: SubscriptionEventUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graceEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    planId?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeTrialActivations?: IntFieldUpdateOperationsInput | number
    freeTrialCardsCreated?: IntFieldUpdateOperationsInput | number
    freeTrialLimit?: IntFieldUpdateOperationsInput | number
    trialExpiredNotified?: BoolFieldUpdateOperationsInput | boolean
    currentCardBalance?: IntFieldUpdateOperationsInput | number
    subscriptionCardLimit?: IntFieldUpdateOperationsInput | number
    subscriptionCardsUsed?: IntFieldUpdateOperationsInput | number
    totalCardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUncheckedUpdateManyWithoutTenantNestedInput
    cardOrders?: CardOrderUncheckedUpdateManyWithoutTenantNestedInput
    cards?: CardUncheckedUpdateManyWithoutTenantNestedInput
    cashbackRules?: CashbackRuleUncheckedUpdateManyWithoutTenantNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutTenantNestedInput
    offers?: OfferUncheckedUpdateManyWithoutTenantNestedInput
    stores?: StoreUncheckedUpdateManyWithoutTenantNestedInput
    tierRules?: TierRuleUncheckedUpdateManyWithoutTenantNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutTenantNestedInput
    subscriptionEvents?: SubscriptionEventUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type CardLimitTransactionCreateWithoutRelatedOrderInput = {
    id?: string
    type: $Enums.CardLimitTransactionType
    source: $Enums.CardLimitTransactionSource
    amount: number
    previousBalance: number
    newBalance: number
    description?: string | null
    createdAt?: Date | string
    createdBy?: string | null
    relatedPlan?: PlanCreateNestedOneWithoutCardLimitTransactionsInput
    tenant: TenantCreateNestedOneWithoutCardLimitTransactionsInput
  }

  export type CardLimitTransactionUncheckedCreateWithoutRelatedOrderInput = {
    id?: string
    tenantId: string
    type: $Enums.CardLimitTransactionType
    source: $Enums.CardLimitTransactionSource
    amount: number
    previousBalance: number
    newBalance: number
    description?: string | null
    relatedPlanId?: string | null
    createdAt?: Date | string
    createdBy?: string | null
  }

  export type CardLimitTransactionCreateOrConnectWithoutRelatedOrderInput = {
    where: CardLimitTransactionWhereUniqueInput
    create: XOR<CardLimitTransactionCreateWithoutRelatedOrderInput, CardLimitTransactionUncheckedCreateWithoutRelatedOrderInput>
  }

  export type CardLimitTransactionCreateManyRelatedOrderInputEnvelope = {
    data: CardLimitTransactionCreateManyRelatedOrderInput | CardLimitTransactionCreateManyRelatedOrderInput[]
    skipDuplicates?: boolean
  }

  export type TenantCreateWithoutCardOrdersInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    graceEndsAt?: Date | string | null
    slug: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    trialEndsAt?: Date | string | null
    freeTrialActivations?: number
    freeTrialCardsCreated?: number
    freeTrialLimit?: number
    trialExpiredNotified?: boolean
    currentCardBalance?: number
    subscriptionCardLimit?: number
    subscriptionCardsUsed?: number
    totalCardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionCreateNestedManyWithoutTenantInput
    cards?: CardCreateNestedManyWithoutTenantInput
    cashbackRules?: CashbackRuleCreateNestedManyWithoutTenantInput
    customers?: CustomerCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    offers?: OfferCreateNestedManyWithoutTenantInput
    stores?: StoreCreateNestedManyWithoutTenantInput
    plan?: PlanCreateNestedOneWithoutTenantsInput
    tierRules?: TierRuleCreateNestedManyWithoutTenantInput
    transactions?: TransactionCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    payments?: PaymentCreateNestedManyWithoutTenantInput
    subscriptionEvents?: SubscriptionEventCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutCardOrdersInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    graceEndsAt?: Date | string | null
    planId?: string | null
    slug: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    trialEndsAt?: Date | string | null
    freeTrialActivations?: number
    freeTrialCardsCreated?: number
    freeTrialLimit?: number
    trialExpiredNotified?: boolean
    currentCardBalance?: number
    subscriptionCardLimit?: number
    subscriptionCardsUsed?: number
    totalCardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionUncheckedCreateNestedManyWithoutTenantInput
    cards?: CardUncheckedCreateNestedManyWithoutTenantInput
    cashbackRules?: CashbackRuleUncheckedCreateNestedManyWithoutTenantInput
    customers?: CustomerUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    offers?: OfferUncheckedCreateNestedManyWithoutTenantInput
    stores?: StoreUncheckedCreateNestedManyWithoutTenantInput
    tierRules?: TierRuleUncheckedCreateNestedManyWithoutTenantInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    payments?: PaymentUncheckedCreateNestedManyWithoutTenantInput
    subscriptionEvents?: SubscriptionEventUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutCardOrdersInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutCardOrdersInput, TenantUncheckedCreateWithoutCardOrdersInput>
  }

  export type CardLimitTransactionUpsertWithWhereUniqueWithoutRelatedOrderInput = {
    where: CardLimitTransactionWhereUniqueInput
    update: XOR<CardLimitTransactionUpdateWithoutRelatedOrderInput, CardLimitTransactionUncheckedUpdateWithoutRelatedOrderInput>
    create: XOR<CardLimitTransactionCreateWithoutRelatedOrderInput, CardLimitTransactionUncheckedCreateWithoutRelatedOrderInput>
  }

  export type CardLimitTransactionUpdateWithWhereUniqueWithoutRelatedOrderInput = {
    where: CardLimitTransactionWhereUniqueInput
    data: XOR<CardLimitTransactionUpdateWithoutRelatedOrderInput, CardLimitTransactionUncheckedUpdateWithoutRelatedOrderInput>
  }

  export type CardLimitTransactionUpdateManyWithWhereWithoutRelatedOrderInput = {
    where: CardLimitTransactionScalarWhereInput
    data: XOR<CardLimitTransactionUpdateManyMutationInput, CardLimitTransactionUncheckedUpdateManyWithoutRelatedOrderInput>
  }

  export type TenantUpsertWithoutCardOrdersInput = {
    update: XOR<TenantUpdateWithoutCardOrdersInput, TenantUncheckedUpdateWithoutCardOrdersInput>
    create: XOR<TenantCreateWithoutCardOrdersInput, TenantUncheckedCreateWithoutCardOrdersInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutCardOrdersInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutCardOrdersInput, TenantUncheckedUpdateWithoutCardOrdersInput>
  }

  export type TenantUpdateWithoutCardOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graceEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slug?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeTrialActivations?: IntFieldUpdateOperationsInput | number
    freeTrialCardsCreated?: IntFieldUpdateOperationsInput | number
    freeTrialLimit?: IntFieldUpdateOperationsInput | number
    trialExpiredNotified?: BoolFieldUpdateOperationsInput | boolean
    currentCardBalance?: IntFieldUpdateOperationsInput | number
    subscriptionCardLimit?: IntFieldUpdateOperationsInput | number
    subscriptionCardsUsed?: IntFieldUpdateOperationsInput | number
    totalCardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUpdateManyWithoutTenantNestedInput
    cards?: CardUpdateManyWithoutTenantNestedInput
    cashbackRules?: CashbackRuleUpdateManyWithoutTenantNestedInput
    customers?: CustomerUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    offers?: OfferUpdateManyWithoutTenantNestedInput
    stores?: StoreUpdateManyWithoutTenantNestedInput
    plan?: PlanUpdateOneWithoutTenantsNestedInput
    tierRules?: TierRuleUpdateManyWithoutTenantNestedInput
    transactions?: TransactionUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    payments?: PaymentUpdateManyWithoutTenantNestedInput
    subscriptionEvents?: SubscriptionEventUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutCardOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graceEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    planId?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeTrialActivations?: IntFieldUpdateOperationsInput | number
    freeTrialCardsCreated?: IntFieldUpdateOperationsInput | number
    freeTrialLimit?: IntFieldUpdateOperationsInput | number
    trialExpiredNotified?: BoolFieldUpdateOperationsInput | boolean
    currentCardBalance?: IntFieldUpdateOperationsInput | number
    subscriptionCardLimit?: IntFieldUpdateOperationsInput | number
    subscriptionCardsUsed?: IntFieldUpdateOperationsInput | number
    totalCardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUncheckedUpdateManyWithoutTenantNestedInput
    cards?: CardUncheckedUpdateManyWithoutTenantNestedInput
    cashbackRules?: CashbackRuleUncheckedUpdateManyWithoutTenantNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    offers?: OfferUncheckedUpdateManyWithoutTenantNestedInput
    stores?: StoreUncheckedUpdateManyWithoutTenantNestedInput
    tierRules?: TierRuleUncheckedUpdateManyWithoutTenantNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutTenantNestedInput
    subscriptionEvents?: SubscriptionEventUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type CardLimitTransactionCreateWithoutRelatedPlanInput = {
    id?: string
    type: $Enums.CardLimitTransactionType
    source: $Enums.CardLimitTransactionSource
    amount: number
    previousBalance: number
    newBalance: number
    description?: string | null
    createdAt?: Date | string
    createdBy?: string | null
    relatedOrder?: CardOrderCreateNestedOneWithoutCardLimitTransactionsInput
    tenant: TenantCreateNestedOneWithoutCardLimitTransactionsInput
  }

  export type CardLimitTransactionUncheckedCreateWithoutRelatedPlanInput = {
    id?: string
    tenantId: string
    type: $Enums.CardLimitTransactionType
    source: $Enums.CardLimitTransactionSource
    amount: number
    previousBalance: number
    newBalance: number
    description?: string | null
    relatedOrderId?: string | null
    createdAt?: Date | string
    createdBy?: string | null
  }

  export type CardLimitTransactionCreateOrConnectWithoutRelatedPlanInput = {
    where: CardLimitTransactionWhereUniqueInput
    create: XOR<CardLimitTransactionCreateWithoutRelatedPlanInput, CardLimitTransactionUncheckedCreateWithoutRelatedPlanInput>
  }

  export type CardLimitTransactionCreateManyRelatedPlanInputEnvelope = {
    data: CardLimitTransactionCreateManyRelatedPlanInput | CardLimitTransactionCreateManyRelatedPlanInput[]
    skipDuplicates?: boolean
  }

  export type TenantCreateWithoutPlanInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    graceEndsAt?: Date | string | null
    slug: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    trialEndsAt?: Date | string | null
    freeTrialActivations?: number
    freeTrialCardsCreated?: number
    freeTrialLimit?: number
    trialExpiredNotified?: boolean
    currentCardBalance?: number
    subscriptionCardLimit?: number
    subscriptionCardsUsed?: number
    totalCardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionCreateNestedManyWithoutTenantInput
    cardOrders?: CardOrderCreateNestedManyWithoutTenantInput
    cards?: CardCreateNestedManyWithoutTenantInput
    cashbackRules?: CashbackRuleCreateNestedManyWithoutTenantInput
    customers?: CustomerCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    offers?: OfferCreateNestedManyWithoutTenantInput
    stores?: StoreCreateNestedManyWithoutTenantInput
    tierRules?: TierRuleCreateNestedManyWithoutTenantInput
    transactions?: TransactionCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    payments?: PaymentCreateNestedManyWithoutTenantInput
    subscriptionEvents?: SubscriptionEventCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutPlanInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    graceEndsAt?: Date | string | null
    slug: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    trialEndsAt?: Date | string | null
    freeTrialActivations?: number
    freeTrialCardsCreated?: number
    freeTrialLimit?: number
    trialExpiredNotified?: boolean
    currentCardBalance?: number
    subscriptionCardLimit?: number
    subscriptionCardsUsed?: number
    totalCardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionUncheckedCreateNestedManyWithoutTenantInput
    cardOrders?: CardOrderUncheckedCreateNestedManyWithoutTenantInput
    cards?: CardUncheckedCreateNestedManyWithoutTenantInput
    cashbackRules?: CashbackRuleUncheckedCreateNestedManyWithoutTenantInput
    customers?: CustomerUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    offers?: OfferUncheckedCreateNestedManyWithoutTenantInput
    stores?: StoreUncheckedCreateNestedManyWithoutTenantInput
    tierRules?: TierRuleUncheckedCreateNestedManyWithoutTenantInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    payments?: PaymentUncheckedCreateNestedManyWithoutTenantInput
    subscriptionEvents?: SubscriptionEventUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutPlanInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutPlanInput, TenantUncheckedCreateWithoutPlanInput>
  }

  export type TenantCreateManyPlanInputEnvelope = {
    data: TenantCreateManyPlanInput | TenantCreateManyPlanInput[]
    skipDuplicates?: boolean
  }

  export type PaymentCreateWithoutPlanInput = {
    id?: string
    stripeSubscriptionId?: string | null
    stripeInvoiceId?: string | null
    stripePaymentIntentId?: string | null
    amount: number
    currency?: string
    status: string
    description?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutPaymentsInput
  }

  export type PaymentUncheckedCreateWithoutPlanInput = {
    id?: string
    tenantId: string
    stripeSubscriptionId?: string | null
    stripeInvoiceId?: string | null
    stripePaymentIntentId?: string | null
    amount: number
    currency?: string
    status: string
    description?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentCreateOrConnectWithoutPlanInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutPlanInput, PaymentUncheckedCreateWithoutPlanInput>
  }

  export type PaymentCreateManyPlanInputEnvelope = {
    data: PaymentCreateManyPlanInput | PaymentCreateManyPlanInput[]
    skipDuplicates?: boolean
  }

  export type SubscriptionEventCreateWithoutPlanInput = {
    id?: string
    eventType: string
    stripeSubscriptionId?: string | null
    metadata?: string | null
    createdAt?: Date | string
    tenant: TenantCreateNestedOneWithoutSubscriptionEventsInput
    previousPlan?: PlanCreateNestedOneWithoutPreviousSubscriptionEventsInput
  }

  export type SubscriptionEventUncheckedCreateWithoutPlanInput = {
    id?: string
    tenantId: string
    eventType: string
    previousPlanId?: string | null
    stripeSubscriptionId?: string | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type SubscriptionEventCreateOrConnectWithoutPlanInput = {
    where: SubscriptionEventWhereUniqueInput
    create: XOR<SubscriptionEventCreateWithoutPlanInput, SubscriptionEventUncheckedCreateWithoutPlanInput>
  }

  export type SubscriptionEventCreateManyPlanInputEnvelope = {
    data: SubscriptionEventCreateManyPlanInput | SubscriptionEventCreateManyPlanInput[]
    skipDuplicates?: boolean
  }

  export type SubscriptionEventCreateWithoutPreviousPlanInput = {
    id?: string
    eventType: string
    stripeSubscriptionId?: string | null
    metadata?: string | null
    createdAt?: Date | string
    tenant: TenantCreateNestedOneWithoutSubscriptionEventsInput
    plan: PlanCreateNestedOneWithoutSubscriptionEventsInput
  }

  export type SubscriptionEventUncheckedCreateWithoutPreviousPlanInput = {
    id?: string
    tenantId: string
    planId: string
    eventType: string
    stripeSubscriptionId?: string | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type SubscriptionEventCreateOrConnectWithoutPreviousPlanInput = {
    where: SubscriptionEventWhereUniqueInput
    create: XOR<SubscriptionEventCreateWithoutPreviousPlanInput, SubscriptionEventUncheckedCreateWithoutPreviousPlanInput>
  }

  export type SubscriptionEventCreateManyPreviousPlanInputEnvelope = {
    data: SubscriptionEventCreateManyPreviousPlanInput | SubscriptionEventCreateManyPreviousPlanInput[]
    skipDuplicates?: boolean
  }

  export type CardLimitTransactionUpsertWithWhereUniqueWithoutRelatedPlanInput = {
    where: CardLimitTransactionWhereUniqueInput
    update: XOR<CardLimitTransactionUpdateWithoutRelatedPlanInput, CardLimitTransactionUncheckedUpdateWithoutRelatedPlanInput>
    create: XOR<CardLimitTransactionCreateWithoutRelatedPlanInput, CardLimitTransactionUncheckedCreateWithoutRelatedPlanInput>
  }

  export type CardLimitTransactionUpdateWithWhereUniqueWithoutRelatedPlanInput = {
    where: CardLimitTransactionWhereUniqueInput
    data: XOR<CardLimitTransactionUpdateWithoutRelatedPlanInput, CardLimitTransactionUncheckedUpdateWithoutRelatedPlanInput>
  }

  export type CardLimitTransactionUpdateManyWithWhereWithoutRelatedPlanInput = {
    where: CardLimitTransactionScalarWhereInput
    data: XOR<CardLimitTransactionUpdateManyMutationInput, CardLimitTransactionUncheckedUpdateManyWithoutRelatedPlanInput>
  }

  export type TenantUpsertWithWhereUniqueWithoutPlanInput = {
    where: TenantWhereUniqueInput
    update: XOR<TenantUpdateWithoutPlanInput, TenantUncheckedUpdateWithoutPlanInput>
    create: XOR<TenantCreateWithoutPlanInput, TenantUncheckedCreateWithoutPlanInput>
  }

  export type TenantUpdateWithWhereUniqueWithoutPlanInput = {
    where: TenantWhereUniqueInput
    data: XOR<TenantUpdateWithoutPlanInput, TenantUncheckedUpdateWithoutPlanInput>
  }

  export type TenantUpdateManyWithWhereWithoutPlanInput = {
    where: TenantScalarWhereInput
    data: XOR<TenantUpdateManyMutationInput, TenantUncheckedUpdateManyWithoutPlanInput>
  }

  export type TenantScalarWhereInput = {
    AND?: TenantScalarWhereInput | TenantScalarWhereInput[]
    OR?: TenantScalarWhereInput[]
    NOT?: TenantScalarWhereInput | TenantScalarWhereInput[]
    id?: StringFilter<"Tenant"> | string
    name?: StringNullableFilter<"Tenant"> | string | null
    createdAt?: DateTimeFilter<"Tenant"> | Date | string
    updatedAt?: DateTimeFilter<"Tenant"> | Date | string
    graceEndsAt?: DateTimeNullableFilter<"Tenant"> | Date | string | null
    planId?: StringNullableFilter<"Tenant"> | string | null
    slug?: StringFilter<"Tenant"> | string
    stripeCustomerId?: StringNullableFilter<"Tenant"> | string | null
    stripeSubscriptionId?: StringNullableFilter<"Tenant"> | string | null
    subscriptionStatus?: EnumSubscriptionStatusFilter<"Tenant"> | $Enums.SubscriptionStatus
    trialEndsAt?: DateTimeNullableFilter<"Tenant"> | Date | string | null
    freeTrialActivations?: IntFilter<"Tenant"> | number
    freeTrialCardsCreated?: IntFilter<"Tenant"> | number
    freeTrialLimit?: IntFilter<"Tenant"> | number
    trialExpiredNotified?: BoolFilter<"Tenant"> | boolean
    currentCardBalance?: IntFilter<"Tenant"> | number
    subscriptionCardLimit?: IntFilter<"Tenant"> | number
    subscriptionCardsUsed?: IntFilter<"Tenant"> | number
    totalCardAllowance?: IntFilter<"Tenant"> | number
  }

  export type PaymentUpsertWithWhereUniqueWithoutPlanInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutPlanInput, PaymentUncheckedUpdateWithoutPlanInput>
    create: XOR<PaymentCreateWithoutPlanInput, PaymentUncheckedCreateWithoutPlanInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutPlanInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutPlanInput, PaymentUncheckedUpdateWithoutPlanInput>
  }

  export type PaymentUpdateManyWithWhereWithoutPlanInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutPlanInput>
  }

  export type SubscriptionEventUpsertWithWhereUniqueWithoutPlanInput = {
    where: SubscriptionEventWhereUniqueInput
    update: XOR<SubscriptionEventUpdateWithoutPlanInput, SubscriptionEventUncheckedUpdateWithoutPlanInput>
    create: XOR<SubscriptionEventCreateWithoutPlanInput, SubscriptionEventUncheckedCreateWithoutPlanInput>
  }

  export type SubscriptionEventUpdateWithWhereUniqueWithoutPlanInput = {
    where: SubscriptionEventWhereUniqueInput
    data: XOR<SubscriptionEventUpdateWithoutPlanInput, SubscriptionEventUncheckedUpdateWithoutPlanInput>
  }

  export type SubscriptionEventUpdateManyWithWhereWithoutPlanInput = {
    where: SubscriptionEventScalarWhereInput
    data: XOR<SubscriptionEventUpdateManyMutationInput, SubscriptionEventUncheckedUpdateManyWithoutPlanInput>
  }

  export type SubscriptionEventUpsertWithWhereUniqueWithoutPreviousPlanInput = {
    where: SubscriptionEventWhereUniqueInput
    update: XOR<SubscriptionEventUpdateWithoutPreviousPlanInput, SubscriptionEventUncheckedUpdateWithoutPreviousPlanInput>
    create: XOR<SubscriptionEventCreateWithoutPreviousPlanInput, SubscriptionEventUncheckedCreateWithoutPreviousPlanInput>
  }

  export type SubscriptionEventUpdateWithWhereUniqueWithoutPreviousPlanInput = {
    where: SubscriptionEventWhereUniqueInput
    data: XOR<SubscriptionEventUpdateWithoutPreviousPlanInput, SubscriptionEventUncheckedUpdateWithoutPreviousPlanInput>
  }

  export type SubscriptionEventUpdateManyWithWhereWithoutPreviousPlanInput = {
    where: SubscriptionEventScalarWhereInput
    data: XOR<SubscriptionEventUpdateManyMutationInput, SubscriptionEventUncheckedUpdateManyWithoutPreviousPlanInput>
  }

  export type CardOrderCreateWithoutCardLimitTransactionsInput = {
    id?: string
    cardType: $Enums.CardType
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    status?: $Enums.OrderStatus
    storeName?: string | null
    storePhone?: string | null
    storeAddress?: string | null
    customDesign?: string | null
    shippingAddress?: string | null
    trackingNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shippedAt?: Date | string | null
    deliveredAt?: Date | string | null
    approvedAt?: Date | string | null
    approvedBy?: string | null
    deductFromBalance?: boolean
    paidAt?: Date | string | null
    sourceType?: $Enums.OrderSourceType
    stripePaymentId?: string | null
    stripeSessionId?: string | null
    tenant: TenantCreateNestedOneWithoutCardOrdersInput
  }

  export type CardOrderUncheckedCreateWithoutCardLimitTransactionsInput = {
    id?: string
    tenantId: string
    cardType: $Enums.CardType
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    status?: $Enums.OrderStatus
    storeName?: string | null
    storePhone?: string | null
    storeAddress?: string | null
    customDesign?: string | null
    shippingAddress?: string | null
    trackingNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shippedAt?: Date | string | null
    deliveredAt?: Date | string | null
    approvedAt?: Date | string | null
    approvedBy?: string | null
    deductFromBalance?: boolean
    paidAt?: Date | string | null
    sourceType?: $Enums.OrderSourceType
    stripePaymentId?: string | null
    stripeSessionId?: string | null
  }

  export type CardOrderCreateOrConnectWithoutCardLimitTransactionsInput = {
    where: CardOrderWhereUniqueInput
    create: XOR<CardOrderCreateWithoutCardLimitTransactionsInput, CardOrderUncheckedCreateWithoutCardLimitTransactionsInput>
  }

  export type PlanCreateWithoutCardLimitTransactionsInput = {
    id?: string
    name: string
    description: string
    priceMonthly: number
    billingPeriod?: $Enums.BillingPeriod
    billingPeriodMultiplier?: number
    stripePriceId: string
    features?: PlanCreatefeaturesInput | string[]
    maxStores?: number
    maxStaff?: number
    maxCards?: number
    maxTransactions?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    allowCardOrdering?: boolean
    cardAllowance?: number
    tenants?: TenantCreateNestedManyWithoutPlanInput
    payments?: PaymentCreateNestedManyWithoutPlanInput
    subscriptionEvents?: SubscriptionEventCreateNestedManyWithoutPlanInput
    previousSubscriptionEvents?: SubscriptionEventCreateNestedManyWithoutPreviousPlanInput
  }

  export type PlanUncheckedCreateWithoutCardLimitTransactionsInput = {
    id?: string
    name: string
    description: string
    priceMonthly: number
    billingPeriod?: $Enums.BillingPeriod
    billingPeriodMultiplier?: number
    stripePriceId: string
    features?: PlanCreatefeaturesInput | string[]
    maxStores?: number
    maxStaff?: number
    maxCards?: number
    maxTransactions?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    allowCardOrdering?: boolean
    cardAllowance?: number
    tenants?: TenantUncheckedCreateNestedManyWithoutPlanInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPlanInput
    subscriptionEvents?: SubscriptionEventUncheckedCreateNestedManyWithoutPlanInput
    previousSubscriptionEvents?: SubscriptionEventUncheckedCreateNestedManyWithoutPreviousPlanInput
  }

  export type PlanCreateOrConnectWithoutCardLimitTransactionsInput = {
    where: PlanWhereUniqueInput
    create: XOR<PlanCreateWithoutCardLimitTransactionsInput, PlanUncheckedCreateWithoutCardLimitTransactionsInput>
  }

  export type TenantCreateWithoutCardLimitTransactionsInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    graceEndsAt?: Date | string | null
    slug: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    trialEndsAt?: Date | string | null
    freeTrialActivations?: number
    freeTrialCardsCreated?: number
    freeTrialLimit?: number
    trialExpiredNotified?: boolean
    currentCardBalance?: number
    subscriptionCardLimit?: number
    subscriptionCardsUsed?: number
    totalCardAllowance?: number
    cardOrders?: CardOrderCreateNestedManyWithoutTenantInput
    cards?: CardCreateNestedManyWithoutTenantInput
    cashbackRules?: CashbackRuleCreateNestedManyWithoutTenantInput
    customers?: CustomerCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    offers?: OfferCreateNestedManyWithoutTenantInput
    stores?: StoreCreateNestedManyWithoutTenantInput
    plan?: PlanCreateNestedOneWithoutTenantsInput
    tierRules?: TierRuleCreateNestedManyWithoutTenantInput
    transactions?: TransactionCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    payments?: PaymentCreateNestedManyWithoutTenantInput
    subscriptionEvents?: SubscriptionEventCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutCardLimitTransactionsInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    graceEndsAt?: Date | string | null
    planId?: string | null
    slug: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    trialEndsAt?: Date | string | null
    freeTrialActivations?: number
    freeTrialCardsCreated?: number
    freeTrialLimit?: number
    trialExpiredNotified?: boolean
    currentCardBalance?: number
    subscriptionCardLimit?: number
    subscriptionCardsUsed?: number
    totalCardAllowance?: number
    cardOrders?: CardOrderUncheckedCreateNestedManyWithoutTenantInput
    cards?: CardUncheckedCreateNestedManyWithoutTenantInput
    cashbackRules?: CashbackRuleUncheckedCreateNestedManyWithoutTenantInput
    customers?: CustomerUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    offers?: OfferUncheckedCreateNestedManyWithoutTenantInput
    stores?: StoreUncheckedCreateNestedManyWithoutTenantInput
    tierRules?: TierRuleUncheckedCreateNestedManyWithoutTenantInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    payments?: PaymentUncheckedCreateNestedManyWithoutTenantInput
    subscriptionEvents?: SubscriptionEventUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutCardLimitTransactionsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutCardLimitTransactionsInput, TenantUncheckedCreateWithoutCardLimitTransactionsInput>
  }

  export type CardOrderUpsertWithoutCardLimitTransactionsInput = {
    update: XOR<CardOrderUpdateWithoutCardLimitTransactionsInput, CardOrderUncheckedUpdateWithoutCardLimitTransactionsInput>
    create: XOR<CardOrderCreateWithoutCardLimitTransactionsInput, CardOrderUncheckedCreateWithoutCardLimitTransactionsInput>
    where?: CardOrderWhereInput
  }

  export type CardOrderUpdateToOneWithWhereWithoutCardLimitTransactionsInput = {
    where?: CardOrderWhereInput
    data: XOR<CardOrderUpdateWithoutCardLimitTransactionsInput, CardOrderUncheckedUpdateWithoutCardLimitTransactionsInput>
  }

  export type CardOrderUpdateWithoutCardLimitTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardType?: EnumCardTypeFieldUpdateOperationsInput | $Enums.CardType
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    storeName?: NullableStringFieldUpdateOperationsInput | string | null
    storePhone?: NullableStringFieldUpdateOperationsInput | string | null
    storeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    customDesign?: NullableStringFieldUpdateOperationsInput | string | null
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    trackingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shippedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deductFromBalance?: BoolFieldUpdateOperationsInput | boolean
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sourceType?: EnumOrderSourceTypeFieldUpdateOperationsInput | $Enums.OrderSourceType
    stripePaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    tenant?: TenantUpdateOneRequiredWithoutCardOrdersNestedInput
  }

  export type CardOrderUncheckedUpdateWithoutCardLimitTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    cardType?: EnumCardTypeFieldUpdateOperationsInput | $Enums.CardType
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    storeName?: NullableStringFieldUpdateOperationsInput | string | null
    storePhone?: NullableStringFieldUpdateOperationsInput | string | null
    storeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    customDesign?: NullableStringFieldUpdateOperationsInput | string | null
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    trackingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shippedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deductFromBalance?: BoolFieldUpdateOperationsInput | boolean
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sourceType?: EnumOrderSourceTypeFieldUpdateOperationsInput | $Enums.OrderSourceType
    stripePaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PlanUpsertWithoutCardLimitTransactionsInput = {
    update: XOR<PlanUpdateWithoutCardLimitTransactionsInput, PlanUncheckedUpdateWithoutCardLimitTransactionsInput>
    create: XOR<PlanCreateWithoutCardLimitTransactionsInput, PlanUncheckedCreateWithoutCardLimitTransactionsInput>
    where?: PlanWhereInput
  }

  export type PlanUpdateToOneWithWhereWithoutCardLimitTransactionsInput = {
    where?: PlanWhereInput
    data: XOR<PlanUpdateWithoutCardLimitTransactionsInput, PlanUncheckedUpdateWithoutCardLimitTransactionsInput>
  }

  export type PlanUpdateWithoutCardLimitTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priceMonthly?: IntFieldUpdateOperationsInput | number
    billingPeriod?: EnumBillingPeriodFieldUpdateOperationsInput | $Enums.BillingPeriod
    billingPeriodMultiplier?: IntFieldUpdateOperationsInput | number
    stripePriceId?: StringFieldUpdateOperationsInput | string
    features?: PlanUpdatefeaturesInput | string[]
    maxStores?: IntFieldUpdateOperationsInput | number
    maxStaff?: IntFieldUpdateOperationsInput | number
    maxCards?: IntFieldUpdateOperationsInput | number
    maxTransactions?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowCardOrdering?: BoolFieldUpdateOperationsInput | boolean
    cardAllowance?: IntFieldUpdateOperationsInput | number
    tenants?: TenantUpdateManyWithoutPlanNestedInput
    payments?: PaymentUpdateManyWithoutPlanNestedInput
    subscriptionEvents?: SubscriptionEventUpdateManyWithoutPlanNestedInput
    previousSubscriptionEvents?: SubscriptionEventUpdateManyWithoutPreviousPlanNestedInput
  }

  export type PlanUncheckedUpdateWithoutCardLimitTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priceMonthly?: IntFieldUpdateOperationsInput | number
    billingPeriod?: EnumBillingPeriodFieldUpdateOperationsInput | $Enums.BillingPeriod
    billingPeriodMultiplier?: IntFieldUpdateOperationsInput | number
    stripePriceId?: StringFieldUpdateOperationsInput | string
    features?: PlanUpdatefeaturesInput | string[]
    maxStores?: IntFieldUpdateOperationsInput | number
    maxStaff?: IntFieldUpdateOperationsInput | number
    maxCards?: IntFieldUpdateOperationsInput | number
    maxTransactions?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowCardOrdering?: BoolFieldUpdateOperationsInput | boolean
    cardAllowance?: IntFieldUpdateOperationsInput | number
    tenants?: TenantUncheckedUpdateManyWithoutPlanNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPlanNestedInput
    subscriptionEvents?: SubscriptionEventUncheckedUpdateManyWithoutPlanNestedInput
    previousSubscriptionEvents?: SubscriptionEventUncheckedUpdateManyWithoutPreviousPlanNestedInput
  }

  export type TenantUpsertWithoutCardLimitTransactionsInput = {
    update: XOR<TenantUpdateWithoutCardLimitTransactionsInput, TenantUncheckedUpdateWithoutCardLimitTransactionsInput>
    create: XOR<TenantCreateWithoutCardLimitTransactionsInput, TenantUncheckedCreateWithoutCardLimitTransactionsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutCardLimitTransactionsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutCardLimitTransactionsInput, TenantUncheckedUpdateWithoutCardLimitTransactionsInput>
  }

  export type TenantUpdateWithoutCardLimitTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graceEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slug?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeTrialActivations?: IntFieldUpdateOperationsInput | number
    freeTrialCardsCreated?: IntFieldUpdateOperationsInput | number
    freeTrialLimit?: IntFieldUpdateOperationsInput | number
    trialExpiredNotified?: BoolFieldUpdateOperationsInput | boolean
    currentCardBalance?: IntFieldUpdateOperationsInput | number
    subscriptionCardLimit?: IntFieldUpdateOperationsInput | number
    subscriptionCardsUsed?: IntFieldUpdateOperationsInput | number
    totalCardAllowance?: IntFieldUpdateOperationsInput | number
    cardOrders?: CardOrderUpdateManyWithoutTenantNestedInput
    cards?: CardUpdateManyWithoutTenantNestedInput
    cashbackRules?: CashbackRuleUpdateManyWithoutTenantNestedInput
    customers?: CustomerUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    offers?: OfferUpdateManyWithoutTenantNestedInput
    stores?: StoreUpdateManyWithoutTenantNestedInput
    plan?: PlanUpdateOneWithoutTenantsNestedInput
    tierRules?: TierRuleUpdateManyWithoutTenantNestedInput
    transactions?: TransactionUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    payments?: PaymentUpdateManyWithoutTenantNestedInput
    subscriptionEvents?: SubscriptionEventUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutCardLimitTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graceEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    planId?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeTrialActivations?: IntFieldUpdateOperationsInput | number
    freeTrialCardsCreated?: IntFieldUpdateOperationsInput | number
    freeTrialLimit?: IntFieldUpdateOperationsInput | number
    trialExpiredNotified?: BoolFieldUpdateOperationsInput | boolean
    currentCardBalance?: IntFieldUpdateOperationsInput | number
    subscriptionCardLimit?: IntFieldUpdateOperationsInput | number
    subscriptionCardsUsed?: IntFieldUpdateOperationsInput | number
    totalCardAllowance?: IntFieldUpdateOperationsInput | number
    cardOrders?: CardOrderUncheckedUpdateManyWithoutTenantNestedInput
    cards?: CardUncheckedUpdateManyWithoutTenantNestedInput
    cashbackRules?: CashbackRuleUncheckedUpdateManyWithoutTenantNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    offers?: OfferUncheckedUpdateManyWithoutTenantNestedInput
    stores?: StoreUncheckedUpdateManyWithoutTenantNestedInput
    tierRules?: TierRuleUncheckedUpdateManyWithoutTenantNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutTenantNestedInput
    subscriptionEvents?: SubscriptionEventUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateWithoutPaymentsInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    graceEndsAt?: Date | string | null
    slug: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    trialEndsAt?: Date | string | null
    freeTrialActivations?: number
    freeTrialCardsCreated?: number
    freeTrialLimit?: number
    trialExpiredNotified?: boolean
    currentCardBalance?: number
    subscriptionCardLimit?: number
    subscriptionCardsUsed?: number
    totalCardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionCreateNestedManyWithoutTenantInput
    cardOrders?: CardOrderCreateNestedManyWithoutTenantInput
    cards?: CardCreateNestedManyWithoutTenantInput
    cashbackRules?: CashbackRuleCreateNestedManyWithoutTenantInput
    customers?: CustomerCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    offers?: OfferCreateNestedManyWithoutTenantInput
    stores?: StoreCreateNestedManyWithoutTenantInput
    plan?: PlanCreateNestedOneWithoutTenantsInput
    tierRules?: TierRuleCreateNestedManyWithoutTenantInput
    transactions?: TransactionCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    subscriptionEvents?: SubscriptionEventCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutPaymentsInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    graceEndsAt?: Date | string | null
    planId?: string | null
    slug: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    trialEndsAt?: Date | string | null
    freeTrialActivations?: number
    freeTrialCardsCreated?: number
    freeTrialLimit?: number
    trialExpiredNotified?: boolean
    currentCardBalance?: number
    subscriptionCardLimit?: number
    subscriptionCardsUsed?: number
    totalCardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionUncheckedCreateNestedManyWithoutTenantInput
    cardOrders?: CardOrderUncheckedCreateNestedManyWithoutTenantInput
    cards?: CardUncheckedCreateNestedManyWithoutTenantInput
    cashbackRules?: CashbackRuleUncheckedCreateNestedManyWithoutTenantInput
    customers?: CustomerUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    offers?: OfferUncheckedCreateNestedManyWithoutTenantInput
    stores?: StoreUncheckedCreateNestedManyWithoutTenantInput
    tierRules?: TierRuleUncheckedCreateNestedManyWithoutTenantInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    subscriptionEvents?: SubscriptionEventUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutPaymentsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutPaymentsInput, TenantUncheckedCreateWithoutPaymentsInput>
  }

  export type PlanCreateWithoutPaymentsInput = {
    id?: string
    name: string
    description: string
    priceMonthly: number
    billingPeriod?: $Enums.BillingPeriod
    billingPeriodMultiplier?: number
    stripePriceId: string
    features?: PlanCreatefeaturesInput | string[]
    maxStores?: number
    maxStaff?: number
    maxCards?: number
    maxTransactions?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    allowCardOrdering?: boolean
    cardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionCreateNestedManyWithoutRelatedPlanInput
    tenants?: TenantCreateNestedManyWithoutPlanInput
    subscriptionEvents?: SubscriptionEventCreateNestedManyWithoutPlanInput
    previousSubscriptionEvents?: SubscriptionEventCreateNestedManyWithoutPreviousPlanInput
  }

  export type PlanUncheckedCreateWithoutPaymentsInput = {
    id?: string
    name: string
    description: string
    priceMonthly: number
    billingPeriod?: $Enums.BillingPeriod
    billingPeriodMultiplier?: number
    stripePriceId: string
    features?: PlanCreatefeaturesInput | string[]
    maxStores?: number
    maxStaff?: number
    maxCards?: number
    maxTransactions?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    allowCardOrdering?: boolean
    cardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionUncheckedCreateNestedManyWithoutRelatedPlanInput
    tenants?: TenantUncheckedCreateNestedManyWithoutPlanInput
    subscriptionEvents?: SubscriptionEventUncheckedCreateNestedManyWithoutPlanInput
    previousSubscriptionEvents?: SubscriptionEventUncheckedCreateNestedManyWithoutPreviousPlanInput
  }

  export type PlanCreateOrConnectWithoutPaymentsInput = {
    where: PlanWhereUniqueInput
    create: XOR<PlanCreateWithoutPaymentsInput, PlanUncheckedCreateWithoutPaymentsInput>
  }

  export type TenantUpsertWithoutPaymentsInput = {
    update: XOR<TenantUpdateWithoutPaymentsInput, TenantUncheckedUpdateWithoutPaymentsInput>
    create: XOR<TenantCreateWithoutPaymentsInput, TenantUncheckedCreateWithoutPaymentsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutPaymentsInput, TenantUncheckedUpdateWithoutPaymentsInput>
  }

  export type TenantUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graceEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slug?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeTrialActivations?: IntFieldUpdateOperationsInput | number
    freeTrialCardsCreated?: IntFieldUpdateOperationsInput | number
    freeTrialLimit?: IntFieldUpdateOperationsInput | number
    trialExpiredNotified?: BoolFieldUpdateOperationsInput | boolean
    currentCardBalance?: IntFieldUpdateOperationsInput | number
    subscriptionCardLimit?: IntFieldUpdateOperationsInput | number
    subscriptionCardsUsed?: IntFieldUpdateOperationsInput | number
    totalCardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUpdateManyWithoutTenantNestedInput
    cardOrders?: CardOrderUpdateManyWithoutTenantNestedInput
    cards?: CardUpdateManyWithoutTenantNestedInput
    cashbackRules?: CashbackRuleUpdateManyWithoutTenantNestedInput
    customers?: CustomerUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    offers?: OfferUpdateManyWithoutTenantNestedInput
    stores?: StoreUpdateManyWithoutTenantNestedInput
    plan?: PlanUpdateOneWithoutTenantsNestedInput
    tierRules?: TierRuleUpdateManyWithoutTenantNestedInput
    transactions?: TransactionUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    subscriptionEvents?: SubscriptionEventUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graceEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    planId?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeTrialActivations?: IntFieldUpdateOperationsInput | number
    freeTrialCardsCreated?: IntFieldUpdateOperationsInput | number
    freeTrialLimit?: IntFieldUpdateOperationsInput | number
    trialExpiredNotified?: BoolFieldUpdateOperationsInput | boolean
    currentCardBalance?: IntFieldUpdateOperationsInput | number
    subscriptionCardLimit?: IntFieldUpdateOperationsInput | number
    subscriptionCardsUsed?: IntFieldUpdateOperationsInput | number
    totalCardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUncheckedUpdateManyWithoutTenantNestedInput
    cardOrders?: CardOrderUncheckedUpdateManyWithoutTenantNestedInput
    cards?: CardUncheckedUpdateManyWithoutTenantNestedInput
    cashbackRules?: CashbackRuleUncheckedUpdateManyWithoutTenantNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    offers?: OfferUncheckedUpdateManyWithoutTenantNestedInput
    stores?: StoreUncheckedUpdateManyWithoutTenantNestedInput
    tierRules?: TierRuleUncheckedUpdateManyWithoutTenantNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    subscriptionEvents?: SubscriptionEventUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type PlanUpsertWithoutPaymentsInput = {
    update: XOR<PlanUpdateWithoutPaymentsInput, PlanUncheckedUpdateWithoutPaymentsInput>
    create: XOR<PlanCreateWithoutPaymentsInput, PlanUncheckedCreateWithoutPaymentsInput>
    where?: PlanWhereInput
  }

  export type PlanUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: PlanWhereInput
    data: XOR<PlanUpdateWithoutPaymentsInput, PlanUncheckedUpdateWithoutPaymentsInput>
  }

  export type PlanUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priceMonthly?: IntFieldUpdateOperationsInput | number
    billingPeriod?: EnumBillingPeriodFieldUpdateOperationsInput | $Enums.BillingPeriod
    billingPeriodMultiplier?: IntFieldUpdateOperationsInput | number
    stripePriceId?: StringFieldUpdateOperationsInput | string
    features?: PlanUpdatefeaturesInput | string[]
    maxStores?: IntFieldUpdateOperationsInput | number
    maxStaff?: IntFieldUpdateOperationsInput | number
    maxCards?: IntFieldUpdateOperationsInput | number
    maxTransactions?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowCardOrdering?: BoolFieldUpdateOperationsInput | boolean
    cardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUpdateManyWithoutRelatedPlanNestedInput
    tenants?: TenantUpdateManyWithoutPlanNestedInput
    subscriptionEvents?: SubscriptionEventUpdateManyWithoutPlanNestedInput
    previousSubscriptionEvents?: SubscriptionEventUpdateManyWithoutPreviousPlanNestedInput
  }

  export type PlanUncheckedUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priceMonthly?: IntFieldUpdateOperationsInput | number
    billingPeriod?: EnumBillingPeriodFieldUpdateOperationsInput | $Enums.BillingPeriod
    billingPeriodMultiplier?: IntFieldUpdateOperationsInput | number
    stripePriceId?: StringFieldUpdateOperationsInput | string
    features?: PlanUpdatefeaturesInput | string[]
    maxStores?: IntFieldUpdateOperationsInput | number
    maxStaff?: IntFieldUpdateOperationsInput | number
    maxCards?: IntFieldUpdateOperationsInput | number
    maxTransactions?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowCardOrdering?: BoolFieldUpdateOperationsInput | boolean
    cardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUncheckedUpdateManyWithoutRelatedPlanNestedInput
    tenants?: TenantUncheckedUpdateManyWithoutPlanNestedInput
    subscriptionEvents?: SubscriptionEventUncheckedUpdateManyWithoutPlanNestedInput
    previousSubscriptionEvents?: SubscriptionEventUncheckedUpdateManyWithoutPreviousPlanNestedInput
  }

  export type TenantCreateWithoutSubscriptionEventsInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    graceEndsAt?: Date | string | null
    slug: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    trialEndsAt?: Date | string | null
    freeTrialActivations?: number
    freeTrialCardsCreated?: number
    freeTrialLimit?: number
    trialExpiredNotified?: boolean
    currentCardBalance?: number
    subscriptionCardLimit?: number
    subscriptionCardsUsed?: number
    totalCardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionCreateNestedManyWithoutTenantInput
    cardOrders?: CardOrderCreateNestedManyWithoutTenantInput
    cards?: CardCreateNestedManyWithoutTenantInput
    cashbackRules?: CashbackRuleCreateNestedManyWithoutTenantInput
    customers?: CustomerCreateNestedManyWithoutTenantInput
    notifications?: NotificationCreateNestedManyWithoutTenantInput
    offers?: OfferCreateNestedManyWithoutTenantInput
    stores?: StoreCreateNestedManyWithoutTenantInput
    plan?: PlanCreateNestedOneWithoutTenantsInput
    tierRules?: TierRuleCreateNestedManyWithoutTenantInput
    transactions?: TransactionCreateNestedManyWithoutTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    payments?: PaymentCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutSubscriptionEventsInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    graceEndsAt?: Date | string | null
    planId?: string | null
    slug: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    trialEndsAt?: Date | string | null
    freeTrialActivations?: number
    freeTrialCardsCreated?: number
    freeTrialLimit?: number
    trialExpiredNotified?: boolean
    currentCardBalance?: number
    subscriptionCardLimit?: number
    subscriptionCardsUsed?: number
    totalCardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionUncheckedCreateNestedManyWithoutTenantInput
    cardOrders?: CardOrderUncheckedCreateNestedManyWithoutTenantInput
    cards?: CardUncheckedCreateNestedManyWithoutTenantInput
    cashbackRules?: CashbackRuleUncheckedCreateNestedManyWithoutTenantInput
    customers?: CustomerUncheckedCreateNestedManyWithoutTenantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutTenantInput
    offers?: OfferUncheckedCreateNestedManyWithoutTenantInput
    stores?: StoreUncheckedCreateNestedManyWithoutTenantInput
    tierRules?: TierRuleUncheckedCreateNestedManyWithoutTenantInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    payments?: PaymentUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutSubscriptionEventsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutSubscriptionEventsInput, TenantUncheckedCreateWithoutSubscriptionEventsInput>
  }

  export type PlanCreateWithoutSubscriptionEventsInput = {
    id?: string
    name: string
    description: string
    priceMonthly: number
    billingPeriod?: $Enums.BillingPeriod
    billingPeriodMultiplier?: number
    stripePriceId: string
    features?: PlanCreatefeaturesInput | string[]
    maxStores?: number
    maxStaff?: number
    maxCards?: number
    maxTransactions?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    allowCardOrdering?: boolean
    cardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionCreateNestedManyWithoutRelatedPlanInput
    tenants?: TenantCreateNestedManyWithoutPlanInput
    payments?: PaymentCreateNestedManyWithoutPlanInput
    previousSubscriptionEvents?: SubscriptionEventCreateNestedManyWithoutPreviousPlanInput
  }

  export type PlanUncheckedCreateWithoutSubscriptionEventsInput = {
    id?: string
    name: string
    description: string
    priceMonthly: number
    billingPeriod?: $Enums.BillingPeriod
    billingPeriodMultiplier?: number
    stripePriceId: string
    features?: PlanCreatefeaturesInput | string[]
    maxStores?: number
    maxStaff?: number
    maxCards?: number
    maxTransactions?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    allowCardOrdering?: boolean
    cardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionUncheckedCreateNestedManyWithoutRelatedPlanInput
    tenants?: TenantUncheckedCreateNestedManyWithoutPlanInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPlanInput
    previousSubscriptionEvents?: SubscriptionEventUncheckedCreateNestedManyWithoutPreviousPlanInput
  }

  export type PlanCreateOrConnectWithoutSubscriptionEventsInput = {
    where: PlanWhereUniqueInput
    create: XOR<PlanCreateWithoutSubscriptionEventsInput, PlanUncheckedCreateWithoutSubscriptionEventsInput>
  }

  export type PlanCreateWithoutPreviousSubscriptionEventsInput = {
    id?: string
    name: string
    description: string
    priceMonthly: number
    billingPeriod?: $Enums.BillingPeriod
    billingPeriodMultiplier?: number
    stripePriceId: string
    features?: PlanCreatefeaturesInput | string[]
    maxStores?: number
    maxStaff?: number
    maxCards?: number
    maxTransactions?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    allowCardOrdering?: boolean
    cardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionCreateNestedManyWithoutRelatedPlanInput
    tenants?: TenantCreateNestedManyWithoutPlanInput
    payments?: PaymentCreateNestedManyWithoutPlanInput
    subscriptionEvents?: SubscriptionEventCreateNestedManyWithoutPlanInput
  }

  export type PlanUncheckedCreateWithoutPreviousSubscriptionEventsInput = {
    id?: string
    name: string
    description: string
    priceMonthly: number
    billingPeriod?: $Enums.BillingPeriod
    billingPeriodMultiplier?: number
    stripePriceId: string
    features?: PlanCreatefeaturesInput | string[]
    maxStores?: number
    maxStaff?: number
    maxCards?: number
    maxTransactions?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    allowCardOrdering?: boolean
    cardAllowance?: number
    cardLimitTransactions?: CardLimitTransactionUncheckedCreateNestedManyWithoutRelatedPlanInput
    tenants?: TenantUncheckedCreateNestedManyWithoutPlanInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPlanInput
    subscriptionEvents?: SubscriptionEventUncheckedCreateNestedManyWithoutPlanInput
  }

  export type PlanCreateOrConnectWithoutPreviousSubscriptionEventsInput = {
    where: PlanWhereUniqueInput
    create: XOR<PlanCreateWithoutPreviousSubscriptionEventsInput, PlanUncheckedCreateWithoutPreviousSubscriptionEventsInput>
  }

  export type TenantUpsertWithoutSubscriptionEventsInput = {
    update: XOR<TenantUpdateWithoutSubscriptionEventsInput, TenantUncheckedUpdateWithoutSubscriptionEventsInput>
    create: XOR<TenantCreateWithoutSubscriptionEventsInput, TenantUncheckedCreateWithoutSubscriptionEventsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutSubscriptionEventsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutSubscriptionEventsInput, TenantUncheckedUpdateWithoutSubscriptionEventsInput>
  }

  export type TenantUpdateWithoutSubscriptionEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graceEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slug?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeTrialActivations?: IntFieldUpdateOperationsInput | number
    freeTrialCardsCreated?: IntFieldUpdateOperationsInput | number
    freeTrialLimit?: IntFieldUpdateOperationsInput | number
    trialExpiredNotified?: BoolFieldUpdateOperationsInput | boolean
    currentCardBalance?: IntFieldUpdateOperationsInput | number
    subscriptionCardLimit?: IntFieldUpdateOperationsInput | number
    subscriptionCardsUsed?: IntFieldUpdateOperationsInput | number
    totalCardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUpdateManyWithoutTenantNestedInput
    cardOrders?: CardOrderUpdateManyWithoutTenantNestedInput
    cards?: CardUpdateManyWithoutTenantNestedInput
    cashbackRules?: CashbackRuleUpdateManyWithoutTenantNestedInput
    customers?: CustomerUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    offers?: OfferUpdateManyWithoutTenantNestedInput
    stores?: StoreUpdateManyWithoutTenantNestedInput
    plan?: PlanUpdateOneWithoutTenantsNestedInput
    tierRules?: TierRuleUpdateManyWithoutTenantNestedInput
    transactions?: TransactionUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    payments?: PaymentUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutSubscriptionEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graceEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    planId?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeTrialActivations?: IntFieldUpdateOperationsInput | number
    freeTrialCardsCreated?: IntFieldUpdateOperationsInput | number
    freeTrialLimit?: IntFieldUpdateOperationsInput | number
    trialExpiredNotified?: BoolFieldUpdateOperationsInput | boolean
    currentCardBalance?: IntFieldUpdateOperationsInput | number
    subscriptionCardLimit?: IntFieldUpdateOperationsInput | number
    subscriptionCardsUsed?: IntFieldUpdateOperationsInput | number
    totalCardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUncheckedUpdateManyWithoutTenantNestedInput
    cardOrders?: CardOrderUncheckedUpdateManyWithoutTenantNestedInput
    cards?: CardUncheckedUpdateManyWithoutTenantNestedInput
    cashbackRules?: CashbackRuleUncheckedUpdateManyWithoutTenantNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    offers?: OfferUncheckedUpdateManyWithoutTenantNestedInput
    stores?: StoreUncheckedUpdateManyWithoutTenantNestedInput
    tierRules?: TierRuleUncheckedUpdateManyWithoutTenantNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type PlanUpsertWithoutSubscriptionEventsInput = {
    update: XOR<PlanUpdateWithoutSubscriptionEventsInput, PlanUncheckedUpdateWithoutSubscriptionEventsInput>
    create: XOR<PlanCreateWithoutSubscriptionEventsInput, PlanUncheckedCreateWithoutSubscriptionEventsInput>
    where?: PlanWhereInput
  }

  export type PlanUpdateToOneWithWhereWithoutSubscriptionEventsInput = {
    where?: PlanWhereInput
    data: XOR<PlanUpdateWithoutSubscriptionEventsInput, PlanUncheckedUpdateWithoutSubscriptionEventsInput>
  }

  export type PlanUpdateWithoutSubscriptionEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priceMonthly?: IntFieldUpdateOperationsInput | number
    billingPeriod?: EnumBillingPeriodFieldUpdateOperationsInput | $Enums.BillingPeriod
    billingPeriodMultiplier?: IntFieldUpdateOperationsInput | number
    stripePriceId?: StringFieldUpdateOperationsInput | string
    features?: PlanUpdatefeaturesInput | string[]
    maxStores?: IntFieldUpdateOperationsInput | number
    maxStaff?: IntFieldUpdateOperationsInput | number
    maxCards?: IntFieldUpdateOperationsInput | number
    maxTransactions?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowCardOrdering?: BoolFieldUpdateOperationsInput | boolean
    cardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUpdateManyWithoutRelatedPlanNestedInput
    tenants?: TenantUpdateManyWithoutPlanNestedInput
    payments?: PaymentUpdateManyWithoutPlanNestedInput
    previousSubscriptionEvents?: SubscriptionEventUpdateManyWithoutPreviousPlanNestedInput
  }

  export type PlanUncheckedUpdateWithoutSubscriptionEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priceMonthly?: IntFieldUpdateOperationsInput | number
    billingPeriod?: EnumBillingPeriodFieldUpdateOperationsInput | $Enums.BillingPeriod
    billingPeriodMultiplier?: IntFieldUpdateOperationsInput | number
    stripePriceId?: StringFieldUpdateOperationsInput | string
    features?: PlanUpdatefeaturesInput | string[]
    maxStores?: IntFieldUpdateOperationsInput | number
    maxStaff?: IntFieldUpdateOperationsInput | number
    maxCards?: IntFieldUpdateOperationsInput | number
    maxTransactions?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowCardOrdering?: BoolFieldUpdateOperationsInput | boolean
    cardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUncheckedUpdateManyWithoutRelatedPlanNestedInput
    tenants?: TenantUncheckedUpdateManyWithoutPlanNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPlanNestedInput
    previousSubscriptionEvents?: SubscriptionEventUncheckedUpdateManyWithoutPreviousPlanNestedInput
  }

  export type PlanUpsertWithoutPreviousSubscriptionEventsInput = {
    update: XOR<PlanUpdateWithoutPreviousSubscriptionEventsInput, PlanUncheckedUpdateWithoutPreviousSubscriptionEventsInput>
    create: XOR<PlanCreateWithoutPreviousSubscriptionEventsInput, PlanUncheckedCreateWithoutPreviousSubscriptionEventsInput>
    where?: PlanWhereInput
  }

  export type PlanUpdateToOneWithWhereWithoutPreviousSubscriptionEventsInput = {
    where?: PlanWhereInput
    data: XOR<PlanUpdateWithoutPreviousSubscriptionEventsInput, PlanUncheckedUpdateWithoutPreviousSubscriptionEventsInput>
  }

  export type PlanUpdateWithoutPreviousSubscriptionEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priceMonthly?: IntFieldUpdateOperationsInput | number
    billingPeriod?: EnumBillingPeriodFieldUpdateOperationsInput | $Enums.BillingPeriod
    billingPeriodMultiplier?: IntFieldUpdateOperationsInput | number
    stripePriceId?: StringFieldUpdateOperationsInput | string
    features?: PlanUpdatefeaturesInput | string[]
    maxStores?: IntFieldUpdateOperationsInput | number
    maxStaff?: IntFieldUpdateOperationsInput | number
    maxCards?: IntFieldUpdateOperationsInput | number
    maxTransactions?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowCardOrdering?: BoolFieldUpdateOperationsInput | boolean
    cardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUpdateManyWithoutRelatedPlanNestedInput
    tenants?: TenantUpdateManyWithoutPlanNestedInput
    payments?: PaymentUpdateManyWithoutPlanNestedInput
    subscriptionEvents?: SubscriptionEventUpdateManyWithoutPlanNestedInput
  }

  export type PlanUncheckedUpdateWithoutPreviousSubscriptionEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    priceMonthly?: IntFieldUpdateOperationsInput | number
    billingPeriod?: EnumBillingPeriodFieldUpdateOperationsInput | $Enums.BillingPeriod
    billingPeriodMultiplier?: IntFieldUpdateOperationsInput | number
    stripePriceId?: StringFieldUpdateOperationsInput | string
    features?: PlanUpdatefeaturesInput | string[]
    maxStores?: IntFieldUpdateOperationsInput | number
    maxStaff?: IntFieldUpdateOperationsInput | number
    maxCards?: IntFieldUpdateOperationsInput | number
    maxTransactions?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    allowCardOrdering?: BoolFieldUpdateOperationsInput | boolean
    cardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUncheckedUpdateManyWithoutRelatedPlanNestedInput
    tenants?: TenantUncheckedUpdateManyWithoutPlanNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPlanNestedInput
    subscriptionEvents?: SubscriptionEventUncheckedUpdateManyWithoutPlanNestedInput
  }

  export type CardLimitTransactionCreateManyTenantInput = {
    id?: string
    type: $Enums.CardLimitTransactionType
    source: $Enums.CardLimitTransactionSource
    amount: number
    previousBalance: number
    newBalance: number
    description?: string | null
    relatedOrderId?: string | null
    relatedPlanId?: string | null
    createdAt?: Date | string
    createdBy?: string | null
  }

  export type CardOrderCreateManyTenantInput = {
    id?: string
    cardType: $Enums.CardType
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    status?: $Enums.OrderStatus
    storeName?: string | null
    storePhone?: string | null
    storeAddress?: string | null
    customDesign?: string | null
    shippingAddress?: string | null
    trackingNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shippedAt?: Date | string | null
    deliveredAt?: Date | string | null
    approvedAt?: Date | string | null
    approvedBy?: string | null
    deductFromBalance?: boolean
    paidAt?: Date | string | null
    sourceType?: $Enums.OrderSourceType
    stripePaymentId?: string | null
    stripeSessionId?: string | null
  }

  export type CardCreateManyTenantInput = {
    id?: string
    cardUid: string
    customerId?: string | null
    activatedAt?: Date | string | null
    storeId?: string | null
    status?: $Enums.CardStatus
    qrUrl?: string | null
    balanceCents?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CashbackRuleCreateManyTenantInput = {
    id?: string
    category: $Enums.TxCategory
    baseRateBps: number
    startAt?: Date | string | null
    endAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerCreateManyTenantInput = {
    id?: string
    firstName: string
    lastName: string
    phone?: string | null
    email?: string | null
    tier?: $Enums.Tier
    totalSpend?: Decimal | DecimalJsLike | number | string
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateManyTenantInput = {
    id?: string
    customerId: string
    channel: $Enums.NotifChannel
    template: string
    payload: JsonNullValueInput | InputJsonValue
    status?: $Enums.NotifStatus
    error?: string | null
    createdAt?: Date | string
    sentAt?: Date | string | null
  }

  export type OfferCreateManyTenantInput = {
    id?: string
    name: string
    description?: string | null
    rateMultiplierBps: number
    startAt: Date | string
    endAt: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StoreCreateManyTenantInput = {
    id?: string
    name: string
    address?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TierRuleCreateManyTenantInput = {
    id?: string
    tier: $Enums.Tier
    name: string
    minTotalSpendCents: number
    baseRateBps: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateManyTenantInput = {
    id?: string
    storeId: string
    cardId: string
    customerId: string
    cashierId: string
    type: $Enums.TxType
    category: $Enums.TxCategory
    amountCents: number
    cashbackCents?: number
    beforeBalanceCents: number
    afterBalanceCents: number
    note?: string | null
    sourceIp?: string | null
    createdAt?: Date | string
  }

  export type UserCreateManyTenantInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.Role
    storeId?: string | null
    firstName?: string | null
    lastName?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
  }

  export type PaymentCreateManyTenantInput = {
    id?: string
    planId: string
    stripeSubscriptionId?: string | null
    stripeInvoiceId?: string | null
    stripePaymentIntentId?: string | null
    amount: number
    currency?: string
    status: string
    description?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionEventCreateManyTenantInput = {
    id?: string
    planId: string
    eventType: string
    previousPlanId?: string | null
    stripeSubscriptionId?: string | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type CardLimitTransactionUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumCardLimitTransactionTypeFieldUpdateOperationsInput | $Enums.CardLimitTransactionType
    source?: EnumCardLimitTransactionSourceFieldUpdateOperationsInput | $Enums.CardLimitTransactionSource
    amount?: IntFieldUpdateOperationsInput | number
    previousBalance?: IntFieldUpdateOperationsInput | number
    newBalance?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    relatedOrder?: CardOrderUpdateOneWithoutCardLimitTransactionsNestedInput
    relatedPlan?: PlanUpdateOneWithoutCardLimitTransactionsNestedInput
  }

  export type CardLimitTransactionUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumCardLimitTransactionTypeFieldUpdateOperationsInput | $Enums.CardLimitTransactionType
    source?: EnumCardLimitTransactionSourceFieldUpdateOperationsInput | $Enums.CardLimitTransactionSource
    amount?: IntFieldUpdateOperationsInput | number
    previousBalance?: IntFieldUpdateOperationsInput | number
    newBalance?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    relatedOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CardLimitTransactionUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumCardLimitTransactionTypeFieldUpdateOperationsInput | $Enums.CardLimitTransactionType
    source?: EnumCardLimitTransactionSourceFieldUpdateOperationsInput | $Enums.CardLimitTransactionSource
    amount?: IntFieldUpdateOperationsInput | number
    previousBalance?: IntFieldUpdateOperationsInput | number
    newBalance?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    relatedOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CardOrderUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardType?: EnumCardTypeFieldUpdateOperationsInput | $Enums.CardType
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    storeName?: NullableStringFieldUpdateOperationsInput | string | null
    storePhone?: NullableStringFieldUpdateOperationsInput | string | null
    storeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    customDesign?: NullableStringFieldUpdateOperationsInput | string | null
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    trackingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shippedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deductFromBalance?: BoolFieldUpdateOperationsInput | boolean
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sourceType?: EnumOrderSourceTypeFieldUpdateOperationsInput | $Enums.OrderSourceType
    stripePaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    cardLimitTransactions?: CardLimitTransactionUpdateManyWithoutRelatedOrderNestedInput
  }

  export type CardOrderUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardType?: EnumCardTypeFieldUpdateOperationsInput | $Enums.CardType
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    storeName?: NullableStringFieldUpdateOperationsInput | string | null
    storePhone?: NullableStringFieldUpdateOperationsInput | string | null
    storeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    customDesign?: NullableStringFieldUpdateOperationsInput | string | null
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    trackingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shippedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deductFromBalance?: BoolFieldUpdateOperationsInput | boolean
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sourceType?: EnumOrderSourceTypeFieldUpdateOperationsInput | $Enums.OrderSourceType
    stripePaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    cardLimitTransactions?: CardLimitTransactionUncheckedUpdateManyWithoutRelatedOrderNestedInput
  }

  export type CardOrderUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardType?: EnumCardTypeFieldUpdateOperationsInput | $Enums.CardType
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    storeName?: NullableStringFieldUpdateOperationsInput | string | null
    storePhone?: NullableStringFieldUpdateOperationsInput | string | null
    storeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    customDesign?: NullableStringFieldUpdateOperationsInput | string | null
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    trackingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shippedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deductFromBalance?: BoolFieldUpdateOperationsInput | boolean
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sourceType?: EnumOrderSourceTypeFieldUpdateOperationsInput | $Enums.OrderSourceType
    stripePaymentId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSessionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CardUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardUid?: StringFieldUpdateOperationsInput | string
    activatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumCardStatusFieldUpdateOperationsInput | $Enums.CardStatus
    qrUrl?: NullableStringFieldUpdateOperationsInput | string | null
    balanceCents?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneWithoutCardsNestedInput
    store?: StoreUpdateOneWithoutCardsNestedInput
    transactions?: TransactionUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardUid?: StringFieldUpdateOperationsInput | string
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    activatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCardStatusFieldUpdateOperationsInput | $Enums.CardStatus
    qrUrl?: NullableStringFieldUpdateOperationsInput | string | null
    balanceCents?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUncheckedUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardUid?: StringFieldUpdateOperationsInput | string
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    activatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCardStatusFieldUpdateOperationsInput | $Enums.CardStatus
    qrUrl?: NullableStringFieldUpdateOperationsInput | string | null
    balanceCents?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CashbackRuleUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: EnumTxCategoryFieldUpdateOperationsInput | $Enums.TxCategory
    baseRateBps?: IntFieldUpdateOperationsInput | number
    startAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CashbackRuleUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: EnumTxCategoryFieldUpdateOperationsInput | $Enums.TxCategory
    baseRateBps?: IntFieldUpdateOperationsInput | number
    startAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CashbackRuleUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: EnumTxCategoryFieldUpdateOperationsInput | $Enums.TxCategory
    baseRateBps?: IntFieldUpdateOperationsInput | number
    startAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tier?: EnumTierFieldUpdateOperationsInput | $Enums.Tier
    totalSpend?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cards?: CardUpdateManyWithoutCustomerNestedInput
    notifications?: NotificationUpdateManyWithoutCustomerNestedInput
    transactions?: TransactionUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tier?: EnumTierFieldUpdateOperationsInput | $Enums.Tier
    totalSpend?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cards?: CardUncheckedUpdateManyWithoutCustomerNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutCustomerNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tier?: EnumTierFieldUpdateOperationsInput | $Enums.Tier
    totalSpend?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    channel?: EnumNotifChannelFieldUpdateOperationsInput | $Enums.NotifChannel
    template?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    status?: EnumNotifStatusFieldUpdateOperationsInput | $Enums.NotifStatus
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    customer?: CustomerUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    channel?: EnumNotifChannelFieldUpdateOperationsInput | $Enums.NotifChannel
    template?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    status?: EnumNotifStatusFieldUpdateOperationsInput | $Enums.NotifStatus
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NotificationUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    channel?: EnumNotifChannelFieldUpdateOperationsInput | $Enums.NotifChannel
    template?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    status?: EnumNotifStatusFieldUpdateOperationsInput | $Enums.NotifStatus
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OfferUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    rateMultiplierBps?: IntFieldUpdateOperationsInput | number
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfferUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    rateMultiplierBps?: IntFieldUpdateOperationsInput | number
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfferUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    rateMultiplierBps?: IntFieldUpdateOperationsInput | number
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoreUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cards?: CardUpdateManyWithoutStoreNestedInput
    transactions?: TransactionUpdateManyWithoutStoreNestedInput
    users?: UserUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cards?: CardUncheckedUpdateManyWithoutStoreNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutStoreNestedInput
    users?: UserUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type StoreUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TierRuleUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    tier?: EnumTierFieldUpdateOperationsInput | $Enums.Tier
    name?: StringFieldUpdateOperationsInput | string
    minTotalSpendCents?: IntFieldUpdateOperationsInput | number
    baseRateBps?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TierRuleUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    tier?: EnumTierFieldUpdateOperationsInput | $Enums.Tier
    name?: StringFieldUpdateOperationsInput | string
    minTotalSpendCents?: IntFieldUpdateOperationsInput | number
    baseRateBps?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TierRuleUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    tier?: EnumTierFieldUpdateOperationsInput | $Enums.Tier
    name?: StringFieldUpdateOperationsInput | string
    minTotalSpendCents?: IntFieldUpdateOperationsInput | number
    baseRateBps?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumTxTypeFieldUpdateOperationsInput | $Enums.TxType
    category?: EnumTxCategoryFieldUpdateOperationsInput | $Enums.TxCategory
    amountCents?: IntFieldUpdateOperationsInput | number
    cashbackCents?: IntFieldUpdateOperationsInput | number
    beforeBalanceCents?: IntFieldUpdateOperationsInput | number
    afterBalanceCents?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    sourceIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    card?: CardUpdateOneRequiredWithoutTransactionsNestedInput
    cashier?: UserUpdateOneRequiredWithoutTransactionsProcessedNestedInput
    customer?: CustomerUpdateOneRequiredWithoutTransactionsNestedInput
    store?: StoreUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    storeId?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    cashierId?: StringFieldUpdateOperationsInput | string
    type?: EnumTxTypeFieldUpdateOperationsInput | $Enums.TxType
    category?: EnumTxCategoryFieldUpdateOperationsInput | $Enums.TxCategory
    amountCents?: IntFieldUpdateOperationsInput | number
    cashbackCents?: IntFieldUpdateOperationsInput | number
    beforeBalanceCents?: IntFieldUpdateOperationsInput | number
    afterBalanceCents?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    sourceIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    storeId?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    cashierId?: StringFieldUpdateOperationsInput | string
    type?: EnumTxTypeFieldUpdateOperationsInput | $Enums.TxType
    category?: EnumTxCategoryFieldUpdateOperationsInput | $Enums.TxCategory
    amountCents?: IntFieldUpdateOperationsInput | number
    cashbackCents?: IntFieldUpdateOperationsInput | number
    beforeBalanceCents?: IntFieldUpdateOperationsInput | number
    afterBalanceCents?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    sourceIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactionsProcessed?: TransactionUpdateManyWithoutCashierNestedInput
    store?: StoreUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactionsProcessed?: TransactionUncheckedUpdateManyWithoutCashierNestedInput
  }

  export type UserUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PaymentUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeInvoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePaymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    plan?: PlanUpdateOneRequiredWithoutPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeInvoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePaymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeInvoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePaymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionEventUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    plan?: PlanUpdateOneRequiredWithoutSubscriptionEventsNestedInput
    previousPlan?: PlanUpdateOneWithoutPreviousSubscriptionEventsNestedInput
  }

  export type SubscriptionEventUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    previousPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionEventUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    previousPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CardCreateManyStoreInput = {
    id?: string
    tenantId: string
    cardUid: string
    customerId?: string | null
    activatedAt?: Date | string | null
    status?: $Enums.CardStatus
    qrUrl?: string | null
    balanceCents?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateManyStoreInput = {
    id?: string
    tenantId: string
    cardId: string
    customerId: string
    cashierId: string
    type: $Enums.TxType
    category: $Enums.TxCategory
    amountCents: number
    cashbackCents?: number
    beforeBalanceCents: number
    afterBalanceCents: number
    note?: string | null
    sourceIp?: string | null
    createdAt?: Date | string
  }

  export type UserCreateManyStoreInput = {
    id?: string
    tenantId: string
    email: string
    passwordHash: string
    role: $Enums.Role
    firstName?: string | null
    lastName?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
  }

  export type CardUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardUid?: StringFieldUpdateOperationsInput | string
    activatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumCardStatusFieldUpdateOperationsInput | $Enums.CardStatus
    qrUrl?: NullableStringFieldUpdateOperationsInput | string | null
    balanceCents?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneWithoutCardsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutCardsNestedInput
    transactions?: TransactionUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    cardUid?: StringFieldUpdateOperationsInput | string
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    activatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumCardStatusFieldUpdateOperationsInput | $Enums.CardStatus
    qrUrl?: NullableStringFieldUpdateOperationsInput | string | null
    balanceCents?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUncheckedUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateManyWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    cardUid?: StringFieldUpdateOperationsInput | string
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    activatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumCardStatusFieldUpdateOperationsInput | $Enums.CardStatus
    qrUrl?: NullableStringFieldUpdateOperationsInput | string | null
    balanceCents?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumTxTypeFieldUpdateOperationsInput | $Enums.TxType
    category?: EnumTxCategoryFieldUpdateOperationsInput | $Enums.TxCategory
    amountCents?: IntFieldUpdateOperationsInput | number
    cashbackCents?: IntFieldUpdateOperationsInput | number
    beforeBalanceCents?: IntFieldUpdateOperationsInput | number
    afterBalanceCents?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    sourceIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    card?: CardUpdateOneRequiredWithoutTransactionsNestedInput
    cashier?: UserUpdateOneRequiredWithoutTransactionsProcessedNestedInput
    customer?: CustomerUpdateOneRequiredWithoutTransactionsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    cashierId?: StringFieldUpdateOperationsInput | string
    type?: EnumTxTypeFieldUpdateOperationsInput | $Enums.TxType
    category?: EnumTxCategoryFieldUpdateOperationsInput | $Enums.TxCategory
    amountCents?: IntFieldUpdateOperationsInput | number
    cashbackCents?: IntFieldUpdateOperationsInput | number
    beforeBalanceCents?: IntFieldUpdateOperationsInput | number
    afterBalanceCents?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    sourceIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    cashierId?: StringFieldUpdateOperationsInput | string
    type?: EnumTxTypeFieldUpdateOperationsInput | $Enums.TxType
    category?: EnumTxCategoryFieldUpdateOperationsInput | $Enums.TxCategory
    amountCents?: IntFieldUpdateOperationsInput | number
    cashbackCents?: IntFieldUpdateOperationsInput | number
    beforeBalanceCents?: IntFieldUpdateOperationsInput | number
    afterBalanceCents?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    sourceIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactionsProcessed?: TransactionUpdateManyWithoutCashierNestedInput
    tenant?: TenantUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactionsProcessed?: TransactionUncheckedUpdateManyWithoutCashierNestedInput
  }

  export type UserUncheckedUpdateManyWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TransactionCreateManyCashierInput = {
    id?: string
    tenantId: string
    storeId: string
    cardId: string
    customerId: string
    type: $Enums.TxType
    category: $Enums.TxCategory
    amountCents: number
    cashbackCents?: number
    beforeBalanceCents: number
    afterBalanceCents: number
    note?: string | null
    sourceIp?: string | null
    createdAt?: Date | string
  }

  export type TransactionUpdateWithoutCashierInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumTxTypeFieldUpdateOperationsInput | $Enums.TxType
    category?: EnumTxCategoryFieldUpdateOperationsInput | $Enums.TxCategory
    amountCents?: IntFieldUpdateOperationsInput | number
    cashbackCents?: IntFieldUpdateOperationsInput | number
    beforeBalanceCents?: IntFieldUpdateOperationsInput | number
    afterBalanceCents?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    sourceIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    card?: CardUpdateOneRequiredWithoutTransactionsNestedInput
    customer?: CustomerUpdateOneRequiredWithoutTransactionsNestedInput
    store?: StoreUpdateOneRequiredWithoutTransactionsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateWithoutCashierInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    storeId?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    type?: EnumTxTypeFieldUpdateOperationsInput | $Enums.TxType
    category?: EnumTxCategoryFieldUpdateOperationsInput | $Enums.TxCategory
    amountCents?: IntFieldUpdateOperationsInput | number
    cashbackCents?: IntFieldUpdateOperationsInput | number
    beforeBalanceCents?: IntFieldUpdateOperationsInput | number
    afterBalanceCents?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    sourceIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutCashierInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    storeId?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    type?: EnumTxTypeFieldUpdateOperationsInput | $Enums.TxType
    category?: EnumTxCategoryFieldUpdateOperationsInput | $Enums.TxCategory
    amountCents?: IntFieldUpdateOperationsInput | number
    cashbackCents?: IntFieldUpdateOperationsInput | number
    beforeBalanceCents?: IntFieldUpdateOperationsInput | number
    afterBalanceCents?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    sourceIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CardCreateManyCustomerInput = {
    id?: string
    tenantId: string
    cardUid: string
    activatedAt?: Date | string | null
    storeId?: string | null
    status?: $Enums.CardStatus
    qrUrl?: string | null
    balanceCents?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateManyCustomerInput = {
    id?: string
    tenantId: string
    channel: $Enums.NotifChannel
    template: string
    payload: JsonNullValueInput | InputJsonValue
    status?: $Enums.NotifStatus
    error?: string | null
    createdAt?: Date | string
    sentAt?: Date | string | null
  }

  export type TransactionCreateManyCustomerInput = {
    id?: string
    tenantId: string
    storeId: string
    cardId: string
    cashierId: string
    type: $Enums.TxType
    category: $Enums.TxCategory
    amountCents: number
    cashbackCents?: number
    beforeBalanceCents: number
    afterBalanceCents: number
    note?: string | null
    sourceIp?: string | null
    createdAt?: Date | string
  }

  export type CardUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardUid?: StringFieldUpdateOperationsInput | string
    activatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumCardStatusFieldUpdateOperationsInput | $Enums.CardStatus
    qrUrl?: NullableStringFieldUpdateOperationsInput | string | null
    balanceCents?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    store?: StoreUpdateOneWithoutCardsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutCardsNestedInput
    transactions?: TransactionUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    cardUid?: StringFieldUpdateOperationsInput | string
    activatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCardStatusFieldUpdateOperationsInput | $Enums.CardStatus
    qrUrl?: NullableStringFieldUpdateOperationsInput | string | null
    balanceCents?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUncheckedUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    cardUid?: StringFieldUpdateOperationsInput | string
    activatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCardStatusFieldUpdateOperationsInput | $Enums.CardStatus
    qrUrl?: NullableStringFieldUpdateOperationsInput | string | null
    balanceCents?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    channel?: EnumNotifChannelFieldUpdateOperationsInput | $Enums.NotifChannel
    template?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    status?: EnumNotifStatusFieldUpdateOperationsInput | $Enums.NotifStatus
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    channel?: EnumNotifChannelFieldUpdateOperationsInput | $Enums.NotifChannel
    template?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    status?: EnumNotifStatusFieldUpdateOperationsInput | $Enums.NotifStatus
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NotificationUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    channel?: EnumNotifChannelFieldUpdateOperationsInput | $Enums.NotifChannel
    template?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    status?: EnumNotifStatusFieldUpdateOperationsInput | $Enums.NotifStatus
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TransactionUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumTxTypeFieldUpdateOperationsInput | $Enums.TxType
    category?: EnumTxCategoryFieldUpdateOperationsInput | $Enums.TxCategory
    amountCents?: IntFieldUpdateOperationsInput | number
    cashbackCents?: IntFieldUpdateOperationsInput | number
    beforeBalanceCents?: IntFieldUpdateOperationsInput | number
    afterBalanceCents?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    sourceIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    card?: CardUpdateOneRequiredWithoutTransactionsNestedInput
    cashier?: UserUpdateOneRequiredWithoutTransactionsProcessedNestedInput
    store?: StoreUpdateOneRequiredWithoutTransactionsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    storeId?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    cashierId?: StringFieldUpdateOperationsInput | string
    type?: EnumTxTypeFieldUpdateOperationsInput | $Enums.TxType
    category?: EnumTxCategoryFieldUpdateOperationsInput | $Enums.TxCategory
    amountCents?: IntFieldUpdateOperationsInput | number
    cashbackCents?: IntFieldUpdateOperationsInput | number
    beforeBalanceCents?: IntFieldUpdateOperationsInput | number
    afterBalanceCents?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    sourceIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    storeId?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    cashierId?: StringFieldUpdateOperationsInput | string
    type?: EnumTxTypeFieldUpdateOperationsInput | $Enums.TxType
    category?: EnumTxCategoryFieldUpdateOperationsInput | $Enums.TxCategory
    amountCents?: IntFieldUpdateOperationsInput | number
    cashbackCents?: IntFieldUpdateOperationsInput | number
    beforeBalanceCents?: IntFieldUpdateOperationsInput | number
    afterBalanceCents?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    sourceIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateManyCardInput = {
    id?: string
    tenantId: string
    storeId: string
    customerId: string
    cashierId: string
    type: $Enums.TxType
    category: $Enums.TxCategory
    amountCents: number
    cashbackCents?: number
    beforeBalanceCents: number
    afterBalanceCents: number
    note?: string | null
    sourceIp?: string | null
    createdAt?: Date | string
  }

  export type TransactionUpdateWithoutCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumTxTypeFieldUpdateOperationsInput | $Enums.TxType
    category?: EnumTxCategoryFieldUpdateOperationsInput | $Enums.TxCategory
    amountCents?: IntFieldUpdateOperationsInput | number
    cashbackCents?: IntFieldUpdateOperationsInput | number
    beforeBalanceCents?: IntFieldUpdateOperationsInput | number
    afterBalanceCents?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    sourceIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cashier?: UserUpdateOneRequiredWithoutTransactionsProcessedNestedInput
    customer?: CustomerUpdateOneRequiredWithoutTransactionsNestedInput
    store?: StoreUpdateOneRequiredWithoutTransactionsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateWithoutCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    storeId?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    cashierId?: StringFieldUpdateOperationsInput | string
    type?: EnumTxTypeFieldUpdateOperationsInput | $Enums.TxType
    category?: EnumTxCategoryFieldUpdateOperationsInput | $Enums.TxCategory
    amountCents?: IntFieldUpdateOperationsInput | number
    cashbackCents?: IntFieldUpdateOperationsInput | number
    beforeBalanceCents?: IntFieldUpdateOperationsInput | number
    afterBalanceCents?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    sourceIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    storeId?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    cashierId?: StringFieldUpdateOperationsInput | string
    type?: EnumTxTypeFieldUpdateOperationsInput | $Enums.TxType
    category?: EnumTxCategoryFieldUpdateOperationsInput | $Enums.TxCategory
    amountCents?: IntFieldUpdateOperationsInput | number
    cashbackCents?: IntFieldUpdateOperationsInput | number
    beforeBalanceCents?: IntFieldUpdateOperationsInput | number
    afterBalanceCents?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    sourceIp?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CardLimitTransactionCreateManyRelatedOrderInput = {
    id?: string
    tenantId: string
    type: $Enums.CardLimitTransactionType
    source: $Enums.CardLimitTransactionSource
    amount: number
    previousBalance: number
    newBalance: number
    description?: string | null
    relatedPlanId?: string | null
    createdAt?: Date | string
    createdBy?: string | null
  }

  export type CardLimitTransactionUpdateWithoutRelatedOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumCardLimitTransactionTypeFieldUpdateOperationsInput | $Enums.CardLimitTransactionType
    source?: EnumCardLimitTransactionSourceFieldUpdateOperationsInput | $Enums.CardLimitTransactionSource
    amount?: IntFieldUpdateOperationsInput | number
    previousBalance?: IntFieldUpdateOperationsInput | number
    newBalance?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    relatedPlan?: PlanUpdateOneWithoutCardLimitTransactionsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutCardLimitTransactionsNestedInput
  }

  export type CardLimitTransactionUncheckedUpdateWithoutRelatedOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    type?: EnumCardLimitTransactionTypeFieldUpdateOperationsInput | $Enums.CardLimitTransactionType
    source?: EnumCardLimitTransactionSourceFieldUpdateOperationsInput | $Enums.CardLimitTransactionSource
    amount?: IntFieldUpdateOperationsInput | number
    previousBalance?: IntFieldUpdateOperationsInput | number
    newBalance?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    relatedPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CardLimitTransactionUncheckedUpdateManyWithoutRelatedOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    type?: EnumCardLimitTransactionTypeFieldUpdateOperationsInput | $Enums.CardLimitTransactionType
    source?: EnumCardLimitTransactionSourceFieldUpdateOperationsInput | $Enums.CardLimitTransactionSource
    amount?: IntFieldUpdateOperationsInput | number
    previousBalance?: IntFieldUpdateOperationsInput | number
    newBalance?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    relatedPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CardLimitTransactionCreateManyRelatedPlanInput = {
    id?: string
    tenantId: string
    type: $Enums.CardLimitTransactionType
    source: $Enums.CardLimitTransactionSource
    amount: number
    previousBalance: number
    newBalance: number
    description?: string | null
    relatedOrderId?: string | null
    createdAt?: Date | string
    createdBy?: string | null
  }

  export type TenantCreateManyPlanInput = {
    id?: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    graceEndsAt?: Date | string | null
    slug: string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    subscriptionStatus?: $Enums.SubscriptionStatus
    trialEndsAt?: Date | string | null
    freeTrialActivations?: number
    freeTrialCardsCreated?: number
    freeTrialLimit?: number
    trialExpiredNotified?: boolean
    currentCardBalance?: number
    subscriptionCardLimit?: number
    subscriptionCardsUsed?: number
    totalCardAllowance?: number
  }

  export type PaymentCreateManyPlanInput = {
    id?: string
    tenantId: string
    stripeSubscriptionId?: string | null
    stripeInvoiceId?: string | null
    stripePaymentIntentId?: string | null
    amount: number
    currency?: string
    status: string
    description?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionEventCreateManyPlanInput = {
    id?: string
    tenantId: string
    eventType: string
    previousPlanId?: string | null
    stripeSubscriptionId?: string | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type SubscriptionEventCreateManyPreviousPlanInput = {
    id?: string
    tenantId: string
    planId: string
    eventType: string
    stripeSubscriptionId?: string | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type CardLimitTransactionUpdateWithoutRelatedPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumCardLimitTransactionTypeFieldUpdateOperationsInput | $Enums.CardLimitTransactionType
    source?: EnumCardLimitTransactionSourceFieldUpdateOperationsInput | $Enums.CardLimitTransactionSource
    amount?: IntFieldUpdateOperationsInput | number
    previousBalance?: IntFieldUpdateOperationsInput | number
    newBalance?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    relatedOrder?: CardOrderUpdateOneWithoutCardLimitTransactionsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutCardLimitTransactionsNestedInput
  }

  export type CardLimitTransactionUncheckedUpdateWithoutRelatedPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    type?: EnumCardLimitTransactionTypeFieldUpdateOperationsInput | $Enums.CardLimitTransactionType
    source?: EnumCardLimitTransactionSourceFieldUpdateOperationsInput | $Enums.CardLimitTransactionSource
    amount?: IntFieldUpdateOperationsInput | number
    previousBalance?: IntFieldUpdateOperationsInput | number
    newBalance?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    relatedOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CardLimitTransactionUncheckedUpdateManyWithoutRelatedPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    type?: EnumCardLimitTransactionTypeFieldUpdateOperationsInput | $Enums.CardLimitTransactionType
    source?: EnumCardLimitTransactionSourceFieldUpdateOperationsInput | $Enums.CardLimitTransactionSource
    amount?: IntFieldUpdateOperationsInput | number
    previousBalance?: IntFieldUpdateOperationsInput | number
    newBalance?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    relatedOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TenantUpdateWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graceEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slug?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeTrialActivations?: IntFieldUpdateOperationsInput | number
    freeTrialCardsCreated?: IntFieldUpdateOperationsInput | number
    freeTrialLimit?: IntFieldUpdateOperationsInput | number
    trialExpiredNotified?: BoolFieldUpdateOperationsInput | boolean
    currentCardBalance?: IntFieldUpdateOperationsInput | number
    subscriptionCardLimit?: IntFieldUpdateOperationsInput | number
    subscriptionCardsUsed?: IntFieldUpdateOperationsInput | number
    totalCardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUpdateManyWithoutTenantNestedInput
    cardOrders?: CardOrderUpdateManyWithoutTenantNestedInput
    cards?: CardUpdateManyWithoutTenantNestedInput
    cashbackRules?: CashbackRuleUpdateManyWithoutTenantNestedInput
    customers?: CustomerUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUpdateManyWithoutTenantNestedInput
    offers?: OfferUpdateManyWithoutTenantNestedInput
    stores?: StoreUpdateManyWithoutTenantNestedInput
    tierRules?: TierRuleUpdateManyWithoutTenantNestedInput
    transactions?: TransactionUpdateManyWithoutTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    payments?: PaymentUpdateManyWithoutTenantNestedInput
    subscriptionEvents?: SubscriptionEventUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graceEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slug?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeTrialActivations?: IntFieldUpdateOperationsInput | number
    freeTrialCardsCreated?: IntFieldUpdateOperationsInput | number
    freeTrialLimit?: IntFieldUpdateOperationsInput | number
    trialExpiredNotified?: BoolFieldUpdateOperationsInput | boolean
    currentCardBalance?: IntFieldUpdateOperationsInput | number
    subscriptionCardLimit?: IntFieldUpdateOperationsInput | number
    subscriptionCardsUsed?: IntFieldUpdateOperationsInput | number
    totalCardAllowance?: IntFieldUpdateOperationsInput | number
    cardLimitTransactions?: CardLimitTransactionUncheckedUpdateManyWithoutTenantNestedInput
    cardOrders?: CardOrderUncheckedUpdateManyWithoutTenantNestedInput
    cards?: CardUncheckedUpdateManyWithoutTenantNestedInput
    cashbackRules?: CashbackRuleUncheckedUpdateManyWithoutTenantNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutTenantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutTenantNestedInput
    offers?: OfferUncheckedUpdateManyWithoutTenantNestedInput
    stores?: StoreUncheckedUpdateManyWithoutTenantNestedInput
    tierRules?: TierRuleUncheckedUpdateManyWithoutTenantNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutTenantNestedInput
    subscriptionEvents?: SubscriptionEventUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateManyWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    graceEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    slug?: StringFieldUpdateOperationsInput | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeTrialActivations?: IntFieldUpdateOperationsInput | number
    freeTrialCardsCreated?: IntFieldUpdateOperationsInput | number
    freeTrialLimit?: IntFieldUpdateOperationsInput | number
    trialExpiredNotified?: BoolFieldUpdateOperationsInput | boolean
    currentCardBalance?: IntFieldUpdateOperationsInput | number
    subscriptionCardLimit?: IntFieldUpdateOperationsInput | number
    subscriptionCardsUsed?: IntFieldUpdateOperationsInput | number
    totalCardAllowance?: IntFieldUpdateOperationsInput | number
  }

  export type PaymentUpdateWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeInvoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePaymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeInvoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePaymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeInvoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePaymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionEventUpdateWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutSubscriptionEventsNestedInput
    previousPlan?: PlanUpdateOneWithoutPreviousSubscriptionEventsNestedInput
  }

  export type SubscriptionEventUncheckedUpdateWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    previousPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionEventUncheckedUpdateManyWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    previousPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionEventUpdateWithoutPreviousPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutSubscriptionEventsNestedInput
    plan?: PlanUpdateOneRequiredWithoutSubscriptionEventsNestedInput
  }

  export type SubscriptionEventUncheckedUpdateWithoutPreviousPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionEventUncheckedUpdateManyWithoutPreviousPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use TenantCountOutputTypeDefaultArgs instead
     */
    export type TenantCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TenantCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StoreCountOutputTypeDefaultArgs instead
     */
    export type StoreCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StoreCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CustomerCountOutputTypeDefaultArgs instead
     */
    export type CustomerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CustomerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CardCountOutputTypeDefaultArgs instead
     */
    export type CardCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CardCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CardOrderCountOutputTypeDefaultArgs instead
     */
    export type CardOrderCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CardOrderCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlanCountOutputTypeDefaultArgs instead
     */
    export type PlanCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlanCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TenantDefaultArgs instead
     */
    export type TenantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TenantDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StoreDefaultArgs instead
     */
    export type StoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StoreDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CustomerDefaultArgs instead
     */
    export type CustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CustomerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CardDefaultArgs instead
     */
    export type CardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CardDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TransactionDefaultArgs instead
     */
    export type TransactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TransactionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TierRuleDefaultArgs instead
     */
    export type TierRuleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TierRuleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CashbackRuleDefaultArgs instead
     */
    export type CashbackRuleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CashbackRuleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OfferDefaultArgs instead
     */
    export type OfferArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OfferDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CardOrderDefaultArgs instead
     */
    export type CardOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CardOrderDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlanDefaultArgs instead
     */
    export type PlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlanDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CardLimitTransactionDefaultArgs instead
     */
    export type CardLimitTransactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CardLimitTransactionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaymentDefaultArgs instead
     */
    export type PaymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaymentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubscriptionEventDefaultArgs instead
     */
    export type SubscriptionEventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubscriptionEventDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}