
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.TenantScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  graceEndsAt: 'graceEndsAt',
  planId: 'planId',
  slug: 'slug',
  stripeCustomerId: 'stripeCustomerId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  subscriptionStatus: 'subscriptionStatus',
  trialEndsAt: 'trialEndsAt',
  freeTrialActivations: 'freeTrialActivations',
  freeTrialCardsCreated: 'freeTrialCardsCreated',
  freeTrialLimit: 'freeTrialLimit',
  trialExpiredNotified: 'trialExpiredNotified',
  currentCardBalance: 'currentCardBalance',
  subscriptionCardLimit: 'subscriptionCardLimit',
  subscriptionCardsUsed: 'subscriptionCardsUsed',
  totalCardAllowance: 'totalCardAllowance'
};

exports.Prisma.StoreScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  name: 'name',
  address: 'address',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  email: 'email',
  passwordHash: 'passwordHash',
  role: 'role',
  storeId: 'storeId',
  firstName: 'firstName',
  lastName: 'lastName',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLogin: 'lastLogin'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  email: 'email',
  tier: 'tier',
  totalSpend: 'totalSpend',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CardScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  cardUid: 'cardUid',
  customerId: 'customerId',
  activatedAt: 'activatedAt',
  storeId: 'storeId',
  status: 'status',
  qrUrl: 'qrUrl',
  balanceCents: 'balanceCents',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  storeId: 'storeId',
  cardId: 'cardId',
  customerId: 'customerId',
  cashierId: 'cashierId',
  type: 'type',
  category: 'category',
  amountCents: 'amountCents',
  cashbackCents: 'cashbackCents',
  beforeBalanceCents: 'beforeBalanceCents',
  afterBalanceCents: 'afterBalanceCents',
  note: 'note',
  sourceIp: 'sourceIp',
  createdAt: 'createdAt'
};

exports.Prisma.TierRuleScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  tier: 'tier',
  name: 'name',
  minTotalSpendCents: 'minTotalSpendCents',
  baseRateBps: 'baseRateBps',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CashbackRuleScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  category: 'category',
  baseRateBps: 'baseRateBps',
  startAt: 'startAt',
  endAt: 'endAt',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OfferScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  name: 'name',
  description: 'description',
  rateMultiplierBps: 'rateMultiplierBps',
  startAt: 'startAt',
  endAt: 'endAt',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  customerId: 'customerId',
  channel: 'channel',
  template: 'template',
  payload: 'payload',
  status: 'status',
  error: 'error',
  createdAt: 'createdAt',
  sentAt: 'sentAt'
};

exports.Prisma.CardOrderScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  cardType: 'cardType',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice',
  status: 'status',
  storeName: 'storeName',
  storePhone: 'storePhone',
  storeAddress: 'storeAddress',
  customDesign: 'customDesign',
  shippingAddress: 'shippingAddress',
  trackingNumber: 'trackingNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  shippedAt: 'shippedAt',
  deliveredAt: 'deliveredAt',
  approvedAt: 'approvedAt',
  approvedBy: 'approvedBy',
  deductFromBalance: 'deductFromBalance',
  paidAt: 'paidAt',
  sourceType: 'sourceType',
  stripePaymentId: 'stripePaymentId',
  stripeSessionId: 'stripeSessionId'
};

exports.Prisma.PlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  priceMonthly: 'priceMonthly',
  billingPeriod: 'billingPeriod',
  billingPeriodMultiplier: 'billingPeriodMultiplier',
  stripePriceId: 'stripePriceId',
  features: 'features',
  maxStores: 'maxStores',
  maxStaff: 'maxStaff',
  maxCards: 'maxCards',
  maxTransactions: 'maxTransactions',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  allowCardOrdering: 'allowCardOrdering',
  cardAllowance: 'cardAllowance'
};

exports.Prisma.CardLimitTransactionScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  type: 'type',
  source: 'source',
  amount: 'amount',
  previousBalance: 'previousBalance',
  newBalance: 'newBalance',
  description: 'description',
  relatedOrderId: 'relatedOrderId',
  relatedPlanId: 'relatedPlanId',
  createdAt: 'createdAt',
  createdBy: 'createdBy'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  planId: 'planId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  stripeInvoiceId: 'stripeInvoiceId',
  stripePaymentIntentId: 'stripePaymentIntentId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  description: 'description',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionEventScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  planId: 'planId',
  eventType: 'eventType',
  previousPlanId: 'previousPlanId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  NONE: 'NONE',
  TRIALING: 'TRIALING',
  ACTIVE: 'ACTIVE',
  PAST_DUE: 'PAST_DUE',
  CANCELED: 'CANCELED'
};

exports.Role = exports.$Enums.Role = {
  platform_admin: 'platform_admin',
  tenant_admin: 'tenant_admin',
  cashier: 'cashier',
  customer: 'customer'
};

exports.Tier = exports.$Enums.Tier = {
  SILVER: 'SILVER',
  GOLD: 'GOLD',
  PLATINUM: 'PLATINUM'
};

exports.CardStatus = exports.$Enums.CardStatus = {
  UNASSIGNED: 'UNASSIGNED',
  ACTIVE: 'ACTIVE',
  BLOCKED: 'BLOCKED'
};

exports.TxType = exports.$Enums.TxType = {
  EARN: 'EARN',
  REDEEM: 'REDEEM',
  ADJUST: 'ADJUST'
};

exports.TxCategory = exports.$Enums.TxCategory = {
  PURCHASE: 'PURCHASE',
  REPAIR: 'REPAIR',
  OTHER: 'OTHER'
};

exports.NotifChannel = exports.$Enums.NotifChannel = {
  SMS: 'SMS',
  WHATSAPP: 'WHATSAPP'
};

exports.NotifStatus = exports.$Enums.NotifStatus = {
  PENDING: 'PENDING',
  SENT: 'SENT',
  FAILED: 'FAILED'
};

exports.CardType = exports.$Enums.CardType = {
  SINGLE_SIDED: 'SINGLE_SIDED',
  DOUBLE_SIDED_CUSTOM: 'DOUBLE_SIDED_CUSTOM'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  SHIPPED: 'SHIPPED',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED',
  PENDING_PAYMENT: 'PENDING_PAYMENT',
  PENDING_APPROVAL: 'PENDING_APPROVAL',
  APPROVED: 'APPROVED'
};

exports.OrderSourceType = exports.$Enums.OrderSourceType = {
  TRIAL: 'TRIAL',
  SUBSCRIPTION: 'SUBSCRIPTION',
  ADDITIONAL: 'ADDITIONAL'
};

exports.BillingPeriod = exports.$Enums.BillingPeriod = {
  MONTHLY: 'MONTHLY',
  THREE_MONTHS: 'THREE_MONTHS',
  SIX_MONTHS: 'SIX_MONTHS',
  YEARLY: 'YEARLY'
};

exports.CardLimitTransactionType = exports.$Enums.CardLimitTransactionType = {
  GRANTED: 'GRANTED',
  USED: 'USED',
  REFUNDED: 'REFUNDED',
  EXPIRED: 'EXPIRED'
};

exports.CardLimitTransactionSource = exports.$Enums.CardLimitTransactionSource = {
  TRIAL: 'TRIAL',
  SUBSCRIPTION_UPGRADE: 'SUBSCRIPTION_UPGRADE',
  CARD_ORDER: 'CARD_ORDER',
  MANUAL_ADJUSTMENT: 'MANUAL_ADJUSTMENT'
};

exports.Prisma.ModelName = {
  Tenant: 'Tenant',
  Store: 'Store',
  User: 'User',
  Customer: 'Customer',
  Card: 'Card',
  Transaction: 'Transaction',
  TierRule: 'TierRule',
  CashbackRule: 'CashbackRule',
  Offer: 'Offer',
  Notification: 'Notification',
  CardOrder: 'CardOrder',
  Plan: 'Plan',
  CardLimitTransaction: 'CardLimitTransaction',
  Payment: 'Payment',
  SubscriptionEvent: 'SubscriptionEvent'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
