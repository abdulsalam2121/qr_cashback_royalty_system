generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id                    String                  @id @default(cuid())
  name                  String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  graceEndsAt           DateTime?
  planId                String?
  slug                  String                  @unique
  stripeCustomerId      String?
  stripeSubscriptionId  String?
  subscriptionStatus    SubscriptionStatus      @default(TRIALING)
  trialEndsAt           DateTime?
  freeTrialActivations  Int                     @default(0)
  freeTrialCardsCreated Int                     @default(0)
  freeTrialLimit        Int                     @default(40)
  trialExpiredNotified  Boolean                 @default(false)
  currentCardBalance    Int                     @default(40)
  previousPlanId        String?
  subscriptionCardLimit Int                     @default(0)
  subscriptionCardsUsed Int                     @default(0)
  subscriptionStartDate DateTime?
  totalCardAllowance    Int                     @default(40)
  cardLimitTransactions CardLimitTransaction[]
  cardOrders            CardOrder[]
  cardPrintOrders       CardPrintOrder[]
  cards                 Card[]
  cashbackRules         CashbackRule[]
  customers             Customer[]
  notifications         Notification[]
  offers                Offer[]
  payment_links         payment_links[]
  payments              Payment[]
  purchase_transactions purchase_transactions[]
  stores                Store[]
  subscriptionEvents    SubscriptionEvent[]
  plan                  Plan?                   @relation(fields: [planId], references: [id])
  tierRules             TierRule[]
  transactions          Transaction[]
  users                 User[]

  @@map("tenants")
}

model Store {
  id                    String                  @id @default(cuid())
  tenantId              String
  name                  String
  address               String?
  active                Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  cards                 Card[]
  purchase_transactions purchase_transactions[]
  tenant                Tenant                  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  transactions          Transaction[]
  users                 User[]

  @@map("stores")
}

model User {
  id                           String                  @id @default(cuid())
  tenantId                     String
  email                        String                  @unique
  passwordHash                 String?
  role                         Role
  storeId                      String?
  firstName                    String?
  lastName                     String?
  active                       Boolean                 @default(true)
  createdAt                    DateTime                @default(now())
  updatedAt                    DateTime                @updatedAt
  lastLogin                    DateTime?
  authProvider                 String?
  displayName                  String?
  photoURL                     String?
  emailVerificationToken       String?
  emailVerificationTokenExpiry DateTime?
  emailVerified                Boolean                 @default(false)
  passwordResetToken           String?
  passwordResetTokenExpiry     DateTime?
  purchase_transactions        purchase_transactions[]
  transactionsProcessed        Transaction[]           @relation("CashierTransactions")
  store                        Store?                  @relation(fields: [storeId], references: [id])
  tenant                       Tenant                  @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("users")
}

model Customer {
  id                    String                  @id @default(cuid())
  tenantId              String
  firstName             String
  lastName              String
  phone                 String?
  email                 String?                 @unique
  tier                  Tier                    @default(SILVER)
  totalSpend            Decimal                 @default(0)
  active                Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  cards                 Card[]
  tenant                Tenant                  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  notifications         Notification[]
  purchase_transactions purchase_transactions[]
  transactions          Transaction[]

  @@map("customers")
}

model Card {
  id           String          @id @default(cuid())
  tenantId     String
  cardUid      String          @unique
  customerId   String?
  activatedAt  DateTime?
  storeId      String?
  status       CardStatus      @default(UNASSIGNED)
  qrUrl        String?
  balanceCents Int             @default(0)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  printOrderId String?
  customer     Customer?       @relation(fields: [customerId], references: [id])
  printOrder   CardPrintOrder? @relation("CardPrintOrderCards", fields: [printOrderId], references: [id])
  store        Store?          @relation(fields: [storeId], references: [id])
  tenant       Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("cards")
}

model Transaction {
  id                 String     @id @default(cuid())
  tenantId           String
  storeId            String
  cardId             String
  customerId         String
  cashierId          String
  type               TxType
  category           TxCategory
  amountCents        Int
  cashbackCents      Int        @default(0)
  beforeBalanceCents Int
  afterBalanceCents  Int
  note               String?
  sourceIp           String?
  createdAt          DateTime   @default(now())
  card               Card       @relation(fields: [cardId], references: [id])
  cashier            User       @relation("CashierTransactions", fields: [cashierId], references: [id])
  customer           Customer   @relation(fields: [customerId], references: [id])
  store              Store      @relation(fields: [storeId], references: [id])
  tenant             Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model TierRule {
  id                 String   @id @default(cuid())
  tenantId           String
  tier               Tier
  name               String
  minTotalSpendCents Int
  baseRateBps        Int
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  tenant             Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, tier])
  @@map("tier_rules")
}

model CashbackRule {
  id          String     @id @default(cuid())
  tenantId    String
  category    TxCategory
  baseRateBps Int
  startAt     DateTime?
  endAt       DateTime?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  tenant      Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, category])
  @@map("cashback_rules")
}

model Offer {
  id                String   @id @default(cuid())
  tenantId          String
  name              String
  description       String?
  rateMultiplierBps Int
  startAt           DateTime
  endAt             DateTime
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("offers")
}

model Notification {
  id         String       @id @default(cuid())
  tenantId   String
  customerId String
  channel    NotifChannel
  template   String
  payload    Json
  status     NotifStatus  @default(PENDING)
  error      String?
  createdAt  DateTime     @default(now())
  sentAt     DateTime?
  customer   Customer     @relation(fields: [customerId], references: [id])
  tenant     Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model CardOrder {
  id                    String                 @id @default(cuid())
  tenantId              String
  cardType              CardType
  quantity              Int
  unitPrice             Decimal
  totalPrice            Decimal
  status                OrderStatus            @default(PENDING_PAYMENT)
  storeName             String?
  storePhone            String?
  storeAddress          String?
  customDesign          String?
  shippingAddress       String?
  trackingNumber        String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  shippedAt             DateTime?
  deliveredAt           DateTime?
  approvedAt            DateTime?
  approvedBy            String?
  deductFromBalance     Boolean                @default(true)
  paidAt                DateTime?
  sourceType            OrderSourceType        @default(SUBSCRIPTION)
  stripePaymentId       String?
  stripeSessionId       String?
  cardLimitTransactions CardLimitTransaction[]
  tenant                Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("card_orders")
}

model Plan {
  id                         String                 @id @default(cuid())
  name                       String
  description                String
  priceMonthly               Int
  billingPeriod              BillingPeriod          @default(MONTHLY)
  billingPeriodMultiplier    Int                    @default(1)
  stripePriceId              String
  features                   String[]
  maxStores                  Int                    @default(-1)
  maxStaff                   Int                    @default(-1)
  maxCards                   Int                    @default(-1)
  maxTransactions            Int                    @default(-1)
  isActive                   Boolean                @default(true)
  createdAt                  DateTime               @default(now())
  updatedAt                  DateTime               @updatedAt
  allowCardOrdering          Boolean                @default(true)
  cardAllowance              Int                    @default(0)
  cardLimitTransactions      CardLimitTransaction[]
  payments                   Payment[]
  subscriptionEvents         SubscriptionEvent[]
  previousSubscriptionEvents SubscriptionEvent[]    @relation("PreviousPlan")
  tenants                    Tenant[]

  @@map("plans")
}

model CardLimitTransaction {
  id              String                     @id @default(cuid())
  tenantId        String
  type            CardLimitTransactionType
  source          CardLimitTransactionSource
  amount          Int
  previousBalance Int
  newBalance      Int
  description     String?
  relatedOrderId  String?
  relatedPlanId   String?
  createdAt       DateTime                   @default(now())
  createdBy       String?
  relatedOrder    CardOrder?                 @relation(fields: [relatedOrderId], references: [id])
  relatedPlan     Plan?                      @relation(fields: [relatedPlanId], references: [id])
  tenant          Tenant                     @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("card_limit_transactions")
}

model Payment {
  id                    String   @id @default(cuid())
  tenantId              String
  planId                String
  stripeSubscriptionId  String?
  stripeInvoiceId       String?
  stripePaymentIntentId String?
  amount                Int
  currency              String   @default("usd")
  status                String
  description           String?
  metadata              String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  plan                  Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  tenant                Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([planId])
  @@index([status])
  @@index([createdAt])
  @@map("payments")
}

model SubscriptionEvent {
  id                   String   @id @default(cuid())
  tenantId             String
  planId               String
  eventType            String
  previousPlanId       String?
  stripeSubscriptionId String?
  metadata             String?
  createdAt            DateTime @default(now())
  plan                 Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  previousPlan         Plan?    @relation("PreviousPlan", fields: [previousPlanId], references: [id])
  tenant               Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([eventType])
  @@index([createdAt])
  @@map("subscription_events")
}

model CardPrintOrder {
  id               String               @id @default(cuid())
  tenantId         String
  quantity         Int
  status           CardPrintOrderStatus @default(CREATED)
  notes            String?
  storeName        String?
  storeAddress     String?
  tenantAdminEmail String?
  tenantAdminName  String?
  deliveryMethod   DeliveryMethod       @default(PICKUP)
  deliveryAddress  String?
  trackingInfo     String?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  acceptedAt       DateTime?
  acceptedBy       String?
  printedAt        DateTime?
  printedBy        String?
  deliveredAt      DateTime?
  deliveredBy      String?
  collectedAt      DateTime?
  collectedBy      String?
  tenant           Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  cards            Card[]               @relation("CardPrintOrderCards")

  @@map("card_print_orders")
}

model payment_links {
  id                    String                  @id
  tenantId              String
  token                 String                  @unique
  amountCents           Int
  description           String?
  expiresAt             DateTime
  usedAt                DateTime?
  createdAt             DateTime                @default(now())
  tenants               Tenant                  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  purchase_transactions purchase_transactions[]

  @@index([expiresAt])
  @@index([tenantId])
  @@index([token])
}

model purchase_transactions {
  id                String         @id
  tenantId          String
  storeId           String
  customerId        String?
  cashierId         String
  cardUid           String?
  paymentMethod     PaymentMethod
  paymentStatus     PaymentStatus  @default(PENDING)
  amountCents       Int
  cashbackCents     Int?           @default(0)
  category          TxCategory
  description       String?
  paymentLinkId     String?
  paymentLinkExpiry DateTime?
  paidAt            DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime
  users             User           @relation(fields: [cashierId], references: [id])
  customers         Customer?      @relation(fields: [customerId], references: [id])
  payment_links     payment_links? @relation(fields: [paymentLinkId], references: [id])
  stores            Store          @relation(fields: [storeId], references: [id])
  tenants           Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([paymentStatus])
  @@index([tenantId])
}

enum SubscriptionStatus {
  NONE
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
}

enum Role {
  platform_admin
  tenant_admin
  cashier
  customer
}

enum Tier {
  SILVER
  GOLD
  PLATINUM
}

enum CardStatus {
  UNASSIGNED
  ACTIVE
  BLOCKED
}

enum TxType {
  EARN
  REDEEM
  ADJUST
}

enum TxCategory {
  PURCHASE
  REPAIR
  OTHER
}

enum NotifChannel {
  SMS
  WHATSAPP
}

enum NotifStatus {
  PENDING
  SENT
  FAILED
}

enum CardType {
  SINGLE_SIDED
  DOUBLE_SIDED_CUSTOM
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  PENDING_PAYMENT
  PENDING_APPROVAL
  APPROVED
}

enum OrderSourceType {
  TRIAL
  SUBSCRIPTION
  ADDITIONAL
}

enum BillingPeriod {
  MONTHLY
  THREE_MONTHS
  SIX_MONTHS
  YEARLY
}

enum CardLimitTransactionType {
  GRANTED
  USED
  REFUNDED
  EXPIRED
}

enum CardLimitTransactionSource {
  TRIAL
  SUBSCRIPTION_UPGRADE
  CARD_ORDER
  MANUAL_ADJUSTMENT
}

enum CardPrintOrderStatus {
  CREATED
  PRINTING_ACCEPTED
  PRINTING_IN_PROGRESS
  PRINTED
  READY_FOR_DELIVERY
  DELIVERED
  READY_FOR_PICKUP
  COLLECTED
  CANCELLED
}

enum DeliveryMethod {
  PICKUP
  DELIVERY
}

enum PaymentMethod {
  COD
  QR_PAYMENT
  CASH
  CARD
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  EXPIRED
  CANCELLED
}
